import * as bpclient from '@botpress/client';
import { Request, Response } from '../serve';
import { Merge } from '../type-utils';
import { BotSpecificClient } from './client';
import { EnumerateEvents } from './client/types';
import { BotContext } from './context';
import { BaseBot } from './generic';
type CommonArgs<TBot extends BaseBot> = {
    ctx: BotContext;
    client: BotSpecificClient<TBot>;
};
type MessagePayload<TBot extends BaseBot> = {
    user: bpclient.User;
    conversation: bpclient.Conversation;
    message: bpclient.Message;
    event: bpclient.Event;
    states: {
        [TState in keyof TBot['states']]: {
            type: StateType;
            payload: TBot['states'][TState];
        };
    };
};
type MessageArgs<TBot extends BaseBot> = CommonArgs<TBot> & MessagePayload<TBot>;
type EventPayload<TBot extends BaseBot> = {
    event: {
        [K in keyof EnumerateEvents<TBot>]: Merge<bpclient.Event, {
            type: K;
            payload: EnumerateEvents<TBot>[K];
        }>;
    }[keyof EnumerateEvents<TBot>];
};
type EventArgs<TBot extends BaseBot> = CommonArgs<TBot> & EventPayload<TBot>;
type StateExpiredPayload = {
    state: bpclient.State;
};
type StateExpiredArgs<TBot extends BaseBot> = CommonArgs<TBot> & StateExpiredPayload;
export type StateType = 'conversation' | 'user' | 'bot';
export type MessageHandler<TBot extends BaseBot> = (args: MessageArgs<TBot>) => Promise<void>;
export type EventHandler<TBot extends BaseBot> = (args: EventArgs<TBot>) => Promise<void>;
export type StateExpiredHandler<TBot extends BaseBot> = (args: StateExpiredArgs<TBot>) => Promise<void>;
export type BotHandlers<TBot extends BaseBot> = {
    messageHandlers: MessageHandler<TBot>[];
    eventHandlers: EventHandler<TBot>[];
    stateExpiredHandlers: StateExpiredHandler<TBot>[];
};
export declare const botHandler: <TBot extends BaseBot>(instance: BotHandlers<TBot>) => (req: Request) => Promise<Response | void>;
export {};

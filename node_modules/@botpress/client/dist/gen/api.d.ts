/**
 * Botpress API
 * API for Botpress Cloud
 *
 * The version of the OpenAPI document: 0.15.6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'email': string;
    /**
     * Creation date of the [Account](#schema_account) in ISO 8601 format
     * @type {string}
     * @memberof Account
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface AddParticipantBody
 */
export interface AddParticipantBody {
    /**
     * User id
     * @type {string}
     * @memberof AddParticipantBody
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface AddParticipantResponse
 */
export interface AddParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof AddParticipantResponse
     */
    'participant': User;
}
/**
 *
 * @export
 * @interface Bot
 */
export interface Bot {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Bot
     */
    'id': string;
    /**
     * Creation date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'createdAt': string;
    /**
     * Updating date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'updatedAt': string;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof Bot
     */
    'signingSecret': string;
    /**
     * A mapping of integrations to their configuration
     * @type {{ [key: string]: BotIntegrationsValue; }}
     * @memberof Bot
     */
    'integrations': {
        [key: string]: BotIntegrationsValue;
    };
    /**
     *
     * @type {BotUser}
     * @memberof Bot
     */
    'user': BotUser;
    /**
     *
     * @type {BotConversation}
     * @memberof Bot
     */
    'conversation': BotConversation;
    /**
     *
     * @type {BotMessage}
     * @memberof Bot
     */
    'message': BotMessage;
    /**
     * A mapping of states to their definition
     * @type {{ [key: string]: CreateBotBodyStatesValue; }}
     * @memberof Bot
     */
    'states': {
        [key: string]: CreateBotBodyStatesValue;
    };
    /**
     *
     * @type {BotConfiguration}
     * @memberof Bot
     */
    'configuration': BotConfiguration;
    /**
     * Events definition
     * @type {{ [key: string]: CreateBotBodyEventsValue; }}
     * @memberof Bot
     */
    'events': {
        [key: string]: CreateBotBodyEventsValue;
    };
    /**
     * Recurring events
     * @type {{ [key: string]: BotRecurringEventsValue; }}
     * @memberof Bot
     */
    'recurringEvents': {
        [key: string]: BotRecurringEventsValue;
    };
    /**
     * Name of the [Bot](#schema_bot)
     * @type {string}
     * @memberof Bot
     */
    'name': string;
    /**
     * Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format
     * @type {string}
     * @memberof Bot
     */
    'deployedAt'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations
     * @type {boolean}
     * @memberof Bot
     */
    'dev': boolean;
    /**
     * Id of the user that created the bot
     * @type {string}
     * @memberof Bot
     */
    'createdBy'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) should be executed in accelerated mode
     * @type {boolean}
     * @memberof Bot
     */
    'alwaysAlive': boolean;
    /**
     * Status of the bot
     * @type {string}
     * @memberof Bot
     */
    'status': BotStatusEnum;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<BotMediasInner>}
     * @memberof Bot
     */
    'medias': Array<BotMediasInner>;
}
export declare const BotStatusEnum: {
    readonly Active: "active";
    readonly Deploying: "deploying";
};
export type BotStatusEnum = typeof BotStatusEnum[keyof typeof BotStatusEnum];
/**
 * Configuration of the bot
 * @export
 * @interface BotConfiguration
 */
export interface BotConfiguration {
    /**
     * Configuration data
     * @type {{ [key: string]: any; }}
     * @memberof BotConfiguration
     */
    'data': {
        [key: string]: any;
    };
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof BotConfiguration
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 * Conversation object configuration
 * @export
 * @interface BotConversation
 */
export interface BotConversation {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof BotConversation
     */
    'tags': {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 *
 * @export
 * @interface BotIntegrationsValue
 */
export interface BotIntegrationsValue {
    /**
     *
     * @type {boolean}
     * @memberof BotIntegrationsValue
     */
    'enabled': boolean;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'name': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'version': string;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'webhookUrl': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'webhookId': string;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'identifier'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BotIntegrationsValue
     */
    'configuration': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'status': BotIntegrationsValueStatusEnum;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'statusReason': string | null;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'id': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'updatedAt': string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof BotIntegrationsValue
     */
    'iconUrl': string;
}
export declare const BotIntegrationsValueStatusEnum: {
    readonly RegistrationPending: "registration_pending";
    readonly Registered: "registered";
    readonly RegistrationFailed: "registration_failed";
    readonly UnregistrationPending: "unregistration_pending";
    readonly Unregistered: "unregistered";
    readonly UnregistrationFailed: "unregistration_failed";
};
export type BotIntegrationsValueStatusEnum = typeof BotIntegrationsValueStatusEnum[keyof typeof BotIntegrationsValueStatusEnum];
/**
 *
 * @export
 * @interface BotMediasInner
 */
export interface BotMediasInner {
    /**
     * URL of the media file
     * @type {string}
     * @memberof BotMediasInner
     */
    'url': string;
    /**
     * Name of the media file
     * @type {string}
     * @memberof BotMediasInner
     */
    'name': string;
}
/**
 * Message object configuration
 * @export
 * @interface BotMessage
 */
export interface BotMessage {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof BotMessage
     */
    'tags': {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 *
 * @export
 * @interface BotRecurringEventsValue
 */
export interface BotRecurringEventsValue {
    /**
     *
     * @type {BotRecurringEventsValueSchedule}
     * @memberof BotRecurringEventsValue
     */
    'schedule': BotRecurringEventsValueSchedule;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof BotRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof BotRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface BotRecurringEventsValueSchedule
 */
export interface BotRecurringEventsValueSchedule {
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof BotRecurringEventsValueSchedule
     */
    'cron': string;
}
/**
 * User object configuration
 * @export
 * @interface BotUser
 */
export interface BotUser {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof BotUser
     */
    'tags': {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 *
 * @export
 * @interface BreakDownWorkspaceUsageByBotResponse
 */
export interface BreakDownWorkspaceUsageByBotResponse {
    /**
     *
     * @type {Array<BreakDownWorkspaceUsageByBotResponseDataInner>}
     * @memberof BreakDownWorkspaceUsageByBotResponse
     */
    'data': Array<BreakDownWorkspaceUsageByBotResponseDataInner>;
}
/**
 *
 * @export
 * @interface BreakDownWorkspaceUsageByBotResponseDataInner
 */
export interface BreakDownWorkspaceUsageByBotResponseDataInner {
    /**
     *
     * @type {string}
     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner
     */
    'botId': string;
    /**
     *
     * @type {number}
     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner
     */
    'value': number;
}
/**
 *
 * @export
 * @interface CallActionBody
 */
export interface CallActionBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CallActionBody
     */
    'type': string;
    /**
     * Input of the action
     * @type {{ [key: string]: any; }}
     * @memberof CallActionBody
     */
    'input': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CallActionResponse
 */
export interface CallActionResponse {
    /**
     * Input of the action
     * @type {{ [key: string]: any; }}
     * @memberof CallActionResponse
     */
    'output': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ChangeAISpendQuotaBody
 */
export interface ChangeAISpendQuotaBody {
    /**
     *
     * @type {number}
     * @memberof ChangeAISpendQuotaBody
     */
    'monthlySpendingLimit': number;
}
/**
 *
 * @export
 * @interface ChangeWorkspacePlanBody
 */
export interface ChangeWorkspacePlanBody {
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanBody
     */
    'plan': ChangeWorkspacePlanBodyPlanEnum;
}
export declare const ChangeWorkspacePlanBodyPlanEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type ChangeWorkspacePlanBodyPlanEnum = typeof ChangeWorkspacePlanBodyPlanEnum[keyof typeof ChangeWorkspacePlanBodyPlanEnum];
/**
 *
 * @export
 * @interface ChangeWorkspacePlanResponse
 */
export interface ChangeWorkspacePlanResponse {
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof ChangeWorkspacePlanResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'accountType': ChangeWorkspacePlanResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'billingVersion': ChangeWorkspacePlanResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof ChangeWorkspacePlanResponse
     */
    'plan': ChangeWorkspacePlanResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof ChangeWorkspacePlanResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof ChangeWorkspacePlanResponse
     */
    'spendingLimit': number;
}
export declare const ChangeWorkspacePlanResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type ChangeWorkspacePlanResponseAccountTypeEnum = typeof ChangeWorkspacePlanResponseAccountTypeEnum[keyof typeof ChangeWorkspacePlanResponseAccountTypeEnum];
export declare const ChangeWorkspacePlanResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type ChangeWorkspacePlanResponseBillingVersionEnum = typeof ChangeWorkspacePlanResponseBillingVersionEnum[keyof typeof ChangeWorkspacePlanResponseBillingVersionEnum];
export declare const ChangeWorkspacePlanResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type ChangeWorkspacePlanResponsePlanEnum = typeof ChangeWorkspacePlanResponsePlanEnum[keyof typeof ChangeWorkspacePlanResponsePlanEnum];
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesBody
 */
export interface ChargeWorkspaceUnpaidInvoicesBody {
    /**
     *
     * @type {Array<string>}
     * @memberof ChargeWorkspaceUnpaidInvoicesBody
     */
    'invoiceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponse
 */
export interface ChargeWorkspaceUnpaidInvoicesResponse {
    /**
     * Invoices that were successfully charged by this request.
     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponse
     */
    'chargedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>;
    /**
     * Invoices that failed to be charged by this request.
     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponse
     */
    'failedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
 */
export interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
 */
export interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner
     */
    'failedReason': string;
}
/**
 *
 * @export
 * @interface ConfigureIntegrationBody
 */
export interface ConfigureIntegrationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ConfigureIntegrationBody
     */
    'identifier': string;
}
/**
 * The conversation object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration\'s channels. For example, a Slack channel represents a conversation.
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Conversation
     */
    'id': string;
    /**
     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'createdAt': string;
    /**
     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'updatedAt': string;
    /**
     * Name of the channel where the [Conversation](#schema_conversation) is happening
     * @type {string}
     * @memberof Conversation
     */
    'channel': string;
    /**
     * Name of the integration that created the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Conversation
     */
    'integration': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof Conversation
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface CreateBotBody
 */
export interface CreateBotBody {
    /**
     * A mapping of states to their definition
     * @type {{ [key: string]: CreateBotBodyStatesValue; }}
     * @memberof CreateBotBody
     */
    'states'?: {
        [key: string]: CreateBotBodyStatesValue;
    };
    /**
     * Events definition
     * @type {{ [key: string]: CreateBotBodyEventsValue; }}
     * @memberof CreateBotBody
     */
    'events'?: {
        [key: string]: CreateBotBodyEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}
     * @memberof CreateBotBody
     */
    'recurringEvents'?: {
        [key: string]: CreateBotBodyRecurringEventsValue;
    };
    /**
     *
     * @type {CreateBotBodyConfiguration}
     * @memberof CreateBotBody
     */
    'configuration'?: CreateBotBodyConfiguration;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'user'?: CreateBotBodyUser;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'conversation'?: CreateBotBodyUser;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateBotBody
     */
    'message'?: CreateBotBodyUser;
    /**
     * JavaScript code of the bot
     * @type {string}
     * @memberof CreateBotBody
     */
    'code'?: string;
    /**
     * Optional name for the bot, if not provided will be auto-generated
     * @type {string}
     * @memberof CreateBotBody
     */
    'name'?: string;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<CreateBotBodyMediasInner>}
     * @memberof CreateBotBody
     */
    'medias'?: Array<CreateBotBodyMediasInner>;
    /**
     * URL of the [Bot](#schema_bot); Only available for dev bots
     * @type {string}
     * @memberof CreateBotBody
     */
    'url'?: string;
    /**
     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations
     * @type {boolean}
     * @memberof CreateBotBody
     */
    'dev'?: boolean;
}
/**
 *
 * @export
 * @interface CreateBotBodyConfiguration
 */
export interface CreateBotBodyConfiguration {
    /**
     * Configuration data
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyConfiguration
     */
    'data'?: {
        [key: string]: any;
    };
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
}
/**
 * Event Definition
 * @export
 * @interface CreateBotBodyEventsValue
 */
export interface CreateBotBodyEventsValue {
    /**
     * Title of the event
     * @type {string}
     * @memberof CreateBotBodyEventsValue
     */
    'title'?: string;
    /**
     * Description of the event
     * @type {string}
     * @memberof CreateBotBodyEventsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyEventsValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateBotBodyMediasInner
 */
export interface CreateBotBodyMediasInner {
    /**
     *
     * @type {string}
     * @memberof CreateBotBodyMediasInner
     */
    'url': string;
    /**
     *
     * @type {string}
     * @memberof CreateBotBodyMediasInner
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateBotBodyRecurringEventsValue
 */
export interface CreateBotBodyRecurringEventsValue {
    /**
     *
     * @type {CreateBotBodyRecurringEventsValueSchedule}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'schedule': CreateBotBodyRecurringEventsValueSchedule;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateBotBodyRecurringEventsValueSchedule
 */
export interface CreateBotBodyRecurringEventsValueSchedule {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateBotBodyRecurringEventsValueSchedule
     */
    'cron': string;
}
/**
 *
 * @export
 * @interface CreateBotBodyStatesValue
 */
export interface CreateBotBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)
     * @type {string}
     * @memberof CreateBotBodyStatesValue
     */
    'type': CreateBotBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof CreateBotBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof CreateBotBodyStatesValue
     */
    'expiry'?: number;
}
export declare const CreateBotBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
};
export type CreateBotBodyStatesValueTypeEnum = typeof CreateBotBodyStatesValueTypeEnum[keyof typeof CreateBotBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface CreateBotBodyUser
 */
export interface CreateBotBodyUser {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof CreateBotBodyUser
     */
    'tags'?: {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 * Definition of a tag that can be provided on the object
 * @export
 * @interface CreateBotBodyUserTagsValue
 */
export interface CreateBotBodyUserTagsValue {
    /**
     * Title of the tag
     * @type {string}
     * @memberof CreateBotBodyUserTagsValue
     */
    'title'?: string;
    /**
     * Description of the tag
     * @type {string}
     * @memberof CreateBotBodyUserTagsValue
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface CreateBotResponse
 */
export interface CreateBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof CreateBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface CreateConversationBody
 */
export interface CreateConversationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateConversationBody
     */
    'channel': string;
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof CreateConversationBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof CreateConversationBody
     * @deprecated
     */
    'integrationName'?: string;
}
/**
 *
 * @export
 * @interface CreateConversationResponse
 */
export interface CreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof CreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface CreateEventBody
 */
export interface CreateEventBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateEventBody
     */
    'type': string;
    /**
     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our API.
     * @type {{ [key: string]: any; }}
     * @memberof CreateEventBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     *
     * @type {CreateEventBodySchedule}
     * @memberof CreateEventBody
     */
    'schedule'?: CreateEventBodySchedule;
    /**
     * ID of the [Conversation](#schema_conversation) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'conversationId'?: string;
    /**
     * ID of the [User](#schema_user) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'userId'?: string;
    /**
     * ID of the [Message](#schema_message) to link the event to.
     * @type {string}
     * @memberof CreateEventBody
     */
    'messageId'?: string;
}
/**
 * Schedule the Event to be sent at a specific time. Either dateTime or delay must be provided.
 * @export
 * @interface CreateEventBodySchedule
 */
export interface CreateEventBodySchedule {
    /**
     * When the [Event](#schema_event) will be sent, in the ISO 8601 format
     * @type {string}
     * @memberof CreateEventBodySchedule
     */
    'dateTime'?: string;
    /**
     * Delay in milliseconds before sending the [Event](#schema_event)
     * @type {number}
     * @memberof CreateEventBodySchedule
     */
    'delay'?: number;
}
/**
 *
 * @export
 * @interface CreateEventResponse
 */
export interface CreateEventResponse {
    /**
     *
     * @type {Event}
     * @memberof CreateEventResponse
     */
    'event': Event;
}
/**
 *
 * @export
 * @interface CreateFileBody
 */
export interface CreateFileBody {
    /**
     * ID of the bot the file will be used for
     * @type {string}
     * @memberof CreateFileBody
     */
    'botId': string;
    /**
     * Base64-encoded file contents
     * @type {string}
     * @memberof CreateFileBody
     */
    'contents': string;
    /**
     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.
     * @type {string}
     * @memberof CreateFileBody
     */
    'name': string;
    /**
     * Accepted values: private, public
     * @type {string}
     * @memberof CreateFileBody
     */
    'accessType': CreateFileBodyAccessTypeEnum;
}
export declare const CreateFileBodyAccessTypeEnum: {
    readonly Private: "private";
    readonly Public: "public";
};
export type CreateFileBodyAccessTypeEnum = typeof CreateFileBodyAccessTypeEnum[keyof typeof CreateFileBodyAccessTypeEnum];
/**
 *
 * @export
 * @interface CreateFileResponse
 */
export interface CreateFileResponse {
    /**
     *
     * @type {any}
     * @memberof CreateFileResponse
     */
    'file': any;
}
/**
 *
 * @export
 * @interface CreateIntegrationBody
 */
export interface CreateIntegrationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'version': string;
    /**
     *
     * @type {CreateIntegrationBodyConfiguration}
     * @memberof CreateIntegrationBody
     */
    'configuration'?: CreateIntegrationBodyConfiguration;
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}
     * @memberof CreateIntegrationBody
     */
    'states'?: {
        [key: string]: CreateIntegrationBodyStatesValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateBotBodyEventsValue; }}
     * @memberof CreateIntegrationBody
     */
    'events'?: {
        [key: string]: CreateBotBodyEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}
     * @memberof CreateIntegrationBody
     */
    'actions'?: {
        [key: string]: CreateIntegrationBodyActionsValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyIdentifier}
     * @memberof CreateIntegrationBody
     */
    'identifier'?: CreateIntegrationBodyIdentifier;
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyChannelsValue; }}
     * @memberof CreateIntegrationBody
     */
    'channels'?: {
        [key: string]: CreateIntegrationBodyChannelsValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyUser}
     * @memberof CreateIntegrationBody
     */
    'user'?: CreateIntegrationBodyUser;
    /**
     * JavaScript code of the integration
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'code'?: string;
    /**
     * URL of the integration; Only available for dev integrations
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'url'?: string;
    /**
     * Indicates if the integration is a development integration; Dev integrations run locally
     * @type {boolean}
     * @memberof CreateIntegrationBody
     */
    'dev'?: boolean;
    /**
     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'icon'?: string;
    /**
     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'readme'?: string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'title'?: string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof CreateIntegrationBody
     */
    'description'?: string;
}
/**
 * Action definition
 * @export
 * @interface CreateIntegrationBodyActionsValue
 */
export interface CreateIntegrationBodyActionsValue {
    /**
     * Title of the action
     * @type {string}
     * @memberof CreateIntegrationBodyActionsValue
     */
    'title'?: string;
    /**
     * Description of the action
     * @type {string}
     * @memberof CreateIntegrationBodyActionsValue
     */
    'description'?: string;
    /**
     *
     * @type {CreateIntegrationBodyActionsValueInput}
     * @memberof CreateIntegrationBodyActionsValue
     */
    'input': CreateIntegrationBodyActionsValueInput;
    /**
     *
     * @type {CreateIntegrationBodyActionsValueInput}
     * @memberof CreateIntegrationBodyActionsValue
     */
    'output': CreateIntegrationBodyActionsValueInput;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyActionsValueInput
 */
export interface CreateIntegrationBodyActionsValueInput {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateIntegrationBodyActionsValueInput
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyChannelsValue
 */
export interface CreateIntegrationBodyChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'messages': {
        [key: string]: CreateIntegrationBodyChannelsValueMessagesValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyChannelsValueConversation}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'conversation'?: CreateIntegrationBodyChannelsValueConversation;
    /**
     *
     * @type {CreateBotBodyUser}
     * @memberof CreateIntegrationBodyChannelsValue
     */
    'message'?: CreateBotBodyUser;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyChannelsValueConversation
 */
export interface CreateIntegrationBodyChannelsValueConversation {
    /**
     *
     * @type {CreateIntegrationBodyChannelsValueConversationCreation}
     * @memberof CreateIntegrationBodyChannelsValueConversation
     */
    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof CreateIntegrationBodyChannelsValueConversation
     */
    'tags'?: {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 * The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.
 * @export
 * @interface CreateIntegrationBodyChannelsValueConversationCreation
 */
export interface CreateIntegrationBodyChannelsValueConversationCreation {
    /**
     * Enable conversation creation
     * @type {boolean}
     * @memberof CreateIntegrationBodyChannelsValueConversationCreation
     */
    'enabled': boolean;
    /**
     * The list of tags that are required to be specified when calling the API directly to create a conversation.
     * @type {Array<string>}
     * @memberof CreateIntegrationBodyChannelsValueConversationCreation
     */
    'requiredTags': Array<string>;
}
/**
 * Message definition
 * @export
 * @interface CreateIntegrationBodyChannelsValueMessagesValue
 */
export interface CreateIntegrationBodyChannelsValueMessagesValue {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateIntegrationBodyChannelsValueMessagesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyConfiguration
 */
export interface CreateIntegrationBodyConfiguration {
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof CreateIntegrationBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {CreateIntegrationBodyConfigurationIdentifier}
     * @memberof CreateIntegrationBodyConfiguration
     */
    'identifier'?: CreateIntegrationBodyConfigurationIdentifier;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyConfigurationIdentifier
 */
export interface CreateIntegrationBodyConfigurationIdentifier {
    /**
     *
     * @type {boolean}
     * @memberof CreateIntegrationBodyConfigurationIdentifier
     */
    'required'?: boolean;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof CreateIntegrationBodyConfigurationIdentifier
     */
    'linkTemplateScript'?: string;
}
/**
 *
 * @export
 * @interface CreateIntegrationBodyIdentifier
 */
export interface CreateIntegrationBodyIdentifier {
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof CreateIntegrationBodyIdentifier
     */
    'fallbackHandlerScript'?: string;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof CreateIntegrationBodyIdentifier
     */
    'extractScript'?: string;
}
/**
 * State definition
 * @export
 * @interface CreateIntegrationBodyStatesValue
 */
export interface CreateIntegrationBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)
     * @type {string}
     * @memberof CreateIntegrationBodyStatesValue
     */
    'type': CreateIntegrationBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof CreateIntegrationBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
}
export declare const CreateIntegrationBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Integration: "integration";
};
export type CreateIntegrationBodyStatesValueTypeEnum = typeof CreateIntegrationBodyStatesValueTypeEnum[keyof typeof CreateIntegrationBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface CreateIntegrationBodyUser
 */
export interface CreateIntegrationBodyUser {
    /**
     *
     * @type {CreateIntegrationBodyUserCreation}
     * @memberof CreateIntegrationBodyUser
     */
    'creation'?: CreateIntegrationBodyUserCreation;
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof CreateIntegrationBodyUser
     */
    'tags'?: {
        [key: string]: CreateBotBodyUserTagsValue;
    };
}
/**
 * The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.
 * @export
 * @interface CreateIntegrationBodyUserCreation
 */
export interface CreateIntegrationBodyUserCreation {
    /**
     * Enable user creation
     * @type {boolean}
     * @memberof CreateIntegrationBodyUserCreation
     */
    'enabled': boolean;
    /**
     * The list of tags that are required to be specified when calling the API directly to create a user.
     * @type {Array<string>}
     * @memberof CreateIntegrationBodyUserCreation
     */
    'requiredTags': Array<string>;
}
/**
 *
 * @export
 * @interface CreateIntegrationResponse
 */
export interface CreateIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof CreateIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface CreateMessageBody
 */
export interface CreateMessageBody {
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof CreateMessageBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * User id
     * @type {string}
     * @memberof CreateMessageBody
     */
    'userId': string;
    /**
     * User id
     * @type {string}
     * @memberof CreateMessageBody
     */
    'conversationId': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof CreateMessageBody
     */
    'type': string;
    /**
     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof CreateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     *
     * @type {CreateMessageBodySchedule}
     * @memberof CreateMessageBody
     */
    'schedule'?: CreateMessageBodySchedule;
}
/**
 * Schedule the Message to be sent at a specific time. Either dateTime or delay must be provided.
 * @export
 * @interface CreateMessageBodySchedule
 */
export interface CreateMessageBodySchedule {
    /**
     * When the [Event](#schema_event) will be sent, in the ISO 8601 format
     * @type {string}
     * @memberof CreateMessageBodySchedule
     */
    'dateTime'?: string;
    /**
     * Delay in milliseconds before sending the [Message](#schema_message)
     * @type {number}
     * @memberof CreateMessageBodySchedule
     */
    'delay'?: number;
}
/**
 *
 * @export
 * @interface CreateMessageResponse
 */
export interface CreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof CreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenBody
 */
export interface CreatePersonalAccessTokenBody {
    /**
     * Note to identify the PAT
     * @type {string}
     * @memberof CreatePersonalAccessTokenBody
     */
    'note': string;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponse
 */
export interface CreatePersonalAccessTokenResponse {
    /**
     *
     * @type {CreatePersonalAccessTokenResponsePat}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'pat': CreatePersonalAccessTokenResponsePat;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponsePat
 */
export interface CreatePersonalAccessTokenResponsePat {
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'note': string;
    /**
     * The PAT value. This will only be returned here when created and cannot be retrieved later.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponsePat
     */
    'value': string;
}
/**
 *
 * @export
 * @interface CreateUserBody
 */
export interface CreateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof CreateUserBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof CreateUserBody
     * @deprecated
     */
    'integrationName'?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof CreateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof CreateUserBody
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     *
     * @type {User}
     * @memberof CreateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface CreateWorkspaceBody
 */
export interface CreateWorkspaceBody {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceBody
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateWorkspaceMemberBody
 */
export interface CreateWorkspaceMemberBody {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberBody
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberBody
     */
    'role': CreateWorkspaceMemberBodyRoleEnum;
}
export declare const CreateWorkspaceMemberBodyRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type CreateWorkspaceMemberBodyRoleEnum = typeof CreateWorkspaceMemberBodyRoleEnum[keyof typeof CreateWorkspaceMemberBodyRoleEnum];
/**
 *
 * @export
 * @interface CreateWorkspaceMemberResponse
 */
export interface CreateWorkspaceMemberResponse {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceMemberResponse
     */
    'role': CreateWorkspaceMemberResponseRoleEnum;
}
export declare const CreateWorkspaceMemberResponseRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type CreateWorkspaceMemberResponseRoleEnum = typeof CreateWorkspaceMemberResponseRoleEnum[keyof typeof CreateWorkspaceMemberResponseRoleEnum];
/**
 *
 * @export
 * @interface CreateWorkspaceResponse
 */
export interface CreateWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof CreateWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'accountType': CreateWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'billingVersion': CreateWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceResponse
     */
    'plan': CreateWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof CreateWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof CreateWorkspaceResponse
     */
    'spendingLimit': number;
}
export declare const CreateWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type CreateWorkspaceResponseAccountTypeEnum = typeof CreateWorkspaceResponseAccountTypeEnum[keyof typeof CreateWorkspaceResponseAccountTypeEnum];
export declare const CreateWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type CreateWorkspaceResponseBillingVersionEnum = typeof CreateWorkspaceResponseBillingVersionEnum[keyof typeof CreateWorkspaceResponseBillingVersionEnum];
export declare const CreateWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type CreateWorkspaceResponsePlanEnum = typeof CreateWorkspaceResponsePlanEnum[keyof typeof CreateWorkspaceResponsePlanEnum];
/**
 * The event object represents an action or an occurrence.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Event
     */
    'id': string;
    /**
     * Creation date of the [Event](#schema_event) in ISO 8601 format
     * @type {string}
     * @memberof Event
     */
    'createdAt': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof Event
     */
    'type': string;
    /**
     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api.
     * @type {{ [key: string]: any; }}
     * @memberof Event
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * ID of the [Conversation](#schema_conversation) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'conversationId'?: string;
    /**
     * ID of the [User](#schema_user) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'userId'?: string;
    /**
     * ID of the [Message](#schema_message) to link the event to.
     * @type {string}
     * @memberof Event
     */
    'messageId'?: string;
}
/**
 *
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     *
     * @type {GetAccountResponseAccount}
     * @memberof GetAccountResponse
     */
    'account': GetAccountResponseAccount;
}
/**
 *
 * @export
 * @interface GetAccountResponseAccount
 */
export interface GetAccountResponseAccount {
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'email': string;
    /**
     * Creation date of the [Account](#schema_account) in ISO 8601 format
     * @type {string}
     * @memberof GetAccountResponseAccount
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface GetAuditRecordsResponse
 */
export interface GetAuditRecordsResponse {
    /**
     *
     * @type {Array<GetAuditRecordsResponseRecordsInner>}
     * @memberof GetAuditRecordsResponse
     */
    'records': Array<GetAuditRecordsResponseRecordsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof GetAuditRecordsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface GetAuditRecordsResponseRecordsInner
 */
export interface GetAuditRecordsResponseRecordsInner {
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'recordedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'userId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'userEmail'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'resourceId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'resourceName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetAuditRecordsResponseRecordsInner
     */
    'action': GetAuditRecordsResponseRecordsInnerActionEnum;
}
export declare const GetAuditRecordsResponseRecordsInnerActionEnum: {
    readonly Unknown: "UNKNOWN";
    readonly AddWorkspaceMember: "ADD_WORKSPACE_MEMBER";
    readonly RemoveWorkspaceMember: "REMOVE_WORKSPACE_MEMBER";
    readonly UpdateWorkspaceMember: "UPDATE_WORKSPACE_MEMBER";
    readonly CloseWorkspace: "CLOSE_WORKSPACE";
    readonly CreateBot: "CREATE_BOT";
    readonly CreateWorkspace: "CREATE_WORKSPACE";
    readonly DeleteBot: "DELETE_BOT";
    readonly DeployBot: "DEPLOY_BOT";
    readonly TransferBot: "TRANSFER_BOT";
    readonly DowngradeWorkspacePlan: "DOWNGRADE_WORKSPACE_PLAN";
    readonly DownloadBotArchive: "DOWNLOAD_BOT_ARCHIVE";
    readonly UpdateBot: "UPDATE_BOT";
    readonly UpdateBotChannel: "UPDATE_BOT_CHANNEL";
    readonly UpdateBotConfig: "UPDATE_BOT_CONFIG";
    readonly UpdatePaymentMethod: "UPDATE_PAYMENT_METHOD";
    readonly UpdateWorkspace: "UPDATE_WORKSPACE";
    readonly UpgradeWorkspacePlan: "UPGRADE_WORKSPACE_PLAN";
    readonly SetSpendingLimit: "SET_SPENDING_LIMIT";
};
export type GetAuditRecordsResponseRecordsInnerActionEnum = typeof GetAuditRecordsResponseRecordsInnerActionEnum[keyof typeof GetAuditRecordsResponseRecordsInnerActionEnum];
/**
 *
 * @export
 * @interface GetBotAnalyticsResponse
 */
export interface GetBotAnalyticsResponse {
    /**
     *
     * @type {Array<GetBotAnalyticsResponseRecordsInner>}
     * @memberof GetBotAnalyticsResponse
     */
    'records': Array<GetBotAnalyticsResponseRecordsInner>;
}
/**
 *
 * @export
 * @interface GetBotAnalyticsResponseRecordsInner
 */
export interface GetBotAnalyticsResponseRecordsInner {
    /**
     * ISO 8601 date string of the beginning (inclusive) of the period
     * @type {string}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'startDateTimeUtc': string;
    /**
     * ISO 8601 date string of the end (exclusive) of the period
     * @type {string}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'endDateTimeUtc': string;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'returningUsers': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'newUsers': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'sessions': number;
    /**
     * Deprecated. Use `userMessages` instead.
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'messages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'userMessages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'botMessages': number;
    /**
     *
     * @type {number}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'events': number;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof GetBotAnalyticsResponseRecordsInner
     */
    'eventTypes': {
        [key: string]: number;
    };
}
/**
 *
 * @export
 * @interface GetBotLogsResponse
 */
export interface GetBotLogsResponse {
    /**
     *
     * @type {Array<GetBotLogsResponseLogsInner>}
     * @memberof GetBotLogsResponse
     */
    'logs': Array<GetBotLogsResponseLogsInner>;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponse
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface GetBotLogsResponseLogsInner
 */
export interface GetBotLogsResponseLogsInner {
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'timestamp': string;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'level': string;
    /**
     *
     * @type {string}
     * @memberof GetBotLogsResponseLogsInner
     */
    'message': string;
}
/**
 *
 * @export
 * @interface GetBotResponse
 */
export interface GetBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof GetBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface GetBotWebchatResponse
 */
export interface GetBotWebchatResponse {
    /**
     *
     * @type {string}
     * @memberof GetBotWebchatResponse
     */
    'code': string;
}
/**
 *
 * @export
 * @interface GetConversationResponse
 */
export interface GetConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetEventResponse
 */
export interface GetEventResponse {
    /**
     *
     * @type {Event}
     * @memberof GetEventResponse
     */
    'event': Event;
}
/**
 *
 * @export
 * @interface GetFileResponse
 */
export interface GetFileResponse {
    /**
     *
     * @type {any}
     * @memberof GetFileResponse
     */
    'file': any;
}
/**
 *
 * @export
 * @interface GetIntegrationByNameResponse
 */
export interface GetIntegrationByNameResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetIntegrationByNameResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetIntegrationLogsResponse
 */
export interface GetIntegrationLogsResponse {
    /**
     *
     * @type {Array<GetBotLogsResponseLogsInner>}
     * @memberof GetIntegrationLogsResponse
     */
    'logs': Array<GetBotLogsResponseLogsInner>;
    /**
     *
     * @type {string}
     * @memberof GetIntegrationLogsResponse
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface GetIntegrationResponse
 */
export interface GetIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetMessageResponse
 */
export interface GetMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationBody
 */
export interface GetOrCreateConversationBody {
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetOrCreateConversationBody
     */
    'channel': string;
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateConversationBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof GetOrCreateConversationBody
     * @deprecated
     */
    'integrationName'?: string;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationResponse
 */
export interface GetOrCreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetOrCreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageBody
 */
export interface GetOrCreateMessageBody {
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof GetOrCreateMessageBody
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * User id
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'userId': string;
    /**
     * User id
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'conversationId': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'type': string;
    /**
     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     *
     * @type {CreateMessageBodySchedule}
     * @memberof GetOrCreateMessageBody
     */
    'schedule'?: CreateMessageBodySchedule;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageResponse
 */
export interface GetOrCreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetOrCreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetOrCreateUserBody
 */
export interface GetOrCreateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof GetOrCreateUserBody
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.
     * @type {string}
     * @memberof GetOrCreateUserBody
     * @deprecated
     */
    'integrationName'?: string;
    /**
     * Name of the user
     * @type {string}
     * @memberof GetOrCreateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof GetOrCreateUserBody
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface GetOrCreateUserResponse
 */
export interface GetOrCreateUserResponse {
    /**
     *
     * @type {User}
     * @memberof GetOrCreateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface GetParticipantResponse
 */
export interface GetParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof GetParticipantResponse
     */
    'participant': User;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationByIdResponse
 */
export interface GetPublicIntegrationByIdResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetPublicIntegrationByIdResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetPublicIntegrationResponse
 */
export interface GetPublicIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof GetPublicIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface GetStateResponse
 */
export interface GetStateResponse {
    /**
     *
     * @type {State}
     * @memberof GetStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface GetUsageResponse
 */
export interface GetUsageResponse {
    /**
     *
     * @type {Usage}
     * @memberof GetUsageResponse
     */
    'usage': Usage;
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     *
     * @type {User}
     * @memberof GetUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface GetWorkspaceBillingDetailsResponse
 */
export interface GetWorkspaceBillingDetailsResponse {
    /**
     *
     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriod}
     * @memberof GetWorkspaceBillingDetailsResponse
     */
    'currentPeriod': GetWorkspaceBillingDetailsResponseCurrentPeriod;
    /**
     *
     * @type {GetWorkspaceBillingDetailsResponsePaymentMethod}
     * @memberof GetWorkspaceBillingDetailsResponse
     */
    'paymentMethod': GetWorkspaceBillingDetailsResponsePaymentMethod | null;
}
/**
 *
 * @export
 * @interface GetWorkspaceBillingDetailsResponseCurrentPeriod
 */
export interface GetWorkspaceBillingDetailsResponseCurrentPeriod {
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod
     */
    'start': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod
     */
    'end': string;
    /**
     *
     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriodUsage}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod
     */
    'usage': GetWorkspaceBillingDetailsResponseCurrentPeriodUsage;
}
/**
 *
 * @export
 * @interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsage
 */
export interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsage {
    /**
     *
     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsage
     */
    'userMessages': GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages;
}
/**
 *
 * @export
 * @interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
 */
export interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages {
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
     */
    'status': GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
     */
    'price': number;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
     */
    'minimum': number;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages
     */
    'maximum': number;
}
export declare const GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum: {
    readonly Ok: "OK";
    readonly Warning: "Warning";
    readonly LimitReached: "LimitReached";
};
export type GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum = typeof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum[keyof typeof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum];
/**
 *
 * @export
 * @interface GetWorkspaceBillingDetailsResponsePaymentMethod
 */
export interface GetWorkspaceBillingDetailsResponsePaymentMethod {
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceBillingDetailsResponsePaymentMethod
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceBillingDetailsResponsePaymentMethod
     */
    'lastDigits': string;
}
/**
 *
 * @export
 * @interface GetWorkspaceQuotaResponse
 */
export interface GetWorkspaceQuotaResponse {
    /**
     *
     * @type {GetWorkspaceQuotaResponseQuota}
     * @memberof GetWorkspaceQuotaResponse
     */
    'quota': GetWorkspaceQuotaResponseQuota;
}
/**
 *
 * @export
 * @interface GetWorkspaceQuotaResponseQuota
 */
export interface GetWorkspaceQuotaResponseQuota {
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'period': string;
    /**
     * Value of the quota that is used
     * @type {number}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'value': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof GetWorkspaceQuotaResponseQuota
     */
    'type': GetWorkspaceQuotaResponseQuotaTypeEnum;
}
export declare const GetWorkspaceQuotaResponseQuotaTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetWorkspaceQuotaResponseQuotaTypeEnum = typeof GetWorkspaceQuotaResponseQuotaTypeEnum[keyof typeof GetWorkspaceQuotaResponseQuotaTypeEnum];
/**
 *
 * @export
 * @interface GetWorkspaceResponse
 */
export interface GetWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'accountType': GetWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'billingVersion': GetWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof GetWorkspaceResponse
     */
    'plan': GetWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof GetWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof GetWorkspaceResponse
     */
    'spendingLimit': number;
}
export declare const GetWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type GetWorkspaceResponseAccountTypeEnum = typeof GetWorkspaceResponseAccountTypeEnum[keyof typeof GetWorkspaceResponseAccountTypeEnum];
export declare const GetWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type GetWorkspaceResponseBillingVersionEnum = typeof GetWorkspaceResponseBillingVersionEnum[keyof typeof GetWorkspaceResponseBillingVersionEnum];
export declare const GetWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type GetWorkspaceResponsePlanEnum = typeof GetWorkspaceResponsePlanEnum[keyof typeof GetWorkspaceResponsePlanEnum];
/**
 *
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Integration
     */
    'id': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof Integration
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof Integration
     */
    'updatedAt': string;
    /**
     *
     * @type {IntegrationIdentifier}
     * @memberof Integration
     */
    'identifier': IntegrationIdentifier;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof Integration
     */
    'name': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof Integration
     */
    'version': string;
    /**
     *
     * @type {IntegrationConfiguration}
     * @memberof Integration
     */
    'configuration': IntegrationConfiguration;
    /**
     *
     * @type {{ [key: string]: IntegrationChannelsValue; }}
     * @memberof Integration
     */
    'channels': {
        [key: string]: IntegrationChannelsValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}
     * @memberof Integration
     */
    'states': {
        [key: string]: CreateIntegrationBodyStatesValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateBotBodyEventsValue; }}
     * @memberof Integration
     */
    'events': {
        [key: string]: CreateBotBodyEventsValue;
    };
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}
     * @memberof Integration
     */
    'actions': {
        [key: string]: CreateIntegrationBodyActionsValue;
    };
    /**
     *
     * @type {IntegrationUser}
     * @memberof Integration
     */
    'user': IntegrationUser;
    /**
     * Indicates if the integration is a development integration; Dev integrations run locally
     * @type {boolean}
     * @memberof Integration
     */
    'dev': boolean;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'iconUrl': string;
    /**
     * URL of the readme of the integration. This is the readme that will be displayed in the UI
     * @type {string}
     * @memberof Integration
     */
    'readmeUrl': string;
}
/**
 * Channel definition
 * @export
 * @interface IntegrationChannelsValue
 */
export interface IntegrationChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof IntegrationChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof IntegrationChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}
     * @memberof IntegrationChannelsValue
     */
    'messages': {
        [key: string]: CreateIntegrationBodyChannelsValueMessagesValue;
    };
    /**
     *
     * @type {IntegrationChannelsValueConversation}
     * @memberof IntegrationChannelsValue
     */
    'conversation': IntegrationChannelsValueConversation;
    /**
     *
     * @type {BotMessage}
     * @memberof IntegrationChannelsValue
     */
    'message': BotMessage;
}
/**
 * Conversation object configuration
 * @export
 * @interface IntegrationChannelsValueConversation
 */
export interface IntegrationChannelsValueConversation {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof IntegrationChannelsValueConversation
     */
    'tags': {
        [key: string]: CreateBotBodyUserTagsValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyChannelsValueConversationCreation}
     * @memberof IntegrationChannelsValueConversation
     */
    'creation': CreateIntegrationBodyChannelsValueConversationCreation;
}
/**
 * Configuration definition
 * @export
 * @interface IntegrationConfiguration
 */
export interface IntegrationConfiguration {
    /**
     *
     * @type {IntegrationConfigurationIdentifier}
     * @memberof IntegrationConfiguration
     */
    'identifier': IntegrationConfigurationIdentifier;
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof IntegrationConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
}
/**
 * Identifier configuration of the [Integration](#schema_integration)
 * @export
 * @interface IntegrationConfigurationIdentifier
 */
export interface IntegrationConfigurationIdentifier {
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof IntegrationConfigurationIdentifier
     */
    'linkTemplateScript'?: string;
    /**
     *
     * @type {boolean}
     * @memberof IntegrationConfigurationIdentifier
     */
    'required': boolean;
}
/**
 * Global identifier configuration of the [Integration](#schema_integration)
 * @export
 * @interface IntegrationIdentifier
 */
export interface IntegrationIdentifier {
    /**
     * VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn\'t have an identifier
     * @type {string}
     * @memberof IntegrationIdentifier
     */
    'fallbackHandlerScript'?: string;
    /**
     * VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth
     * @type {string}
     * @memberof IntegrationIdentifier
     */
    'extractScript'?: string;
}
/**
 * User object configuration
 * @export
 * @interface IntegrationUser
 */
export interface IntegrationUser {
    /**
     *
     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}
     * @memberof IntegrationUser
     */
    'tags': {
        [key: string]: CreateBotBodyUserTagsValue;
    };
    /**
     *
     * @type {CreateIntegrationBodyUserCreation}
     * @memberof IntegrationUser
     */
    'creation': CreateIntegrationBodyUserCreation;
}
/**
 *
 * @export
 * @interface IntrospectBody
 */
export interface IntrospectBody {
    /**
     *
     * @type {string}
     * @memberof IntrospectBody
     */
    'botId': string;
}
/**
 *
 * @export
 * @interface IntrospectResponse
 */
export interface IntrospectResponse {
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'botId': string;
    /**
     *
     * @type {string}
     * @memberof IntrospectResponse
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'lastSeenAt': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: IssueGroupedDataValue; }}
     * @memberof Issue
     */
    'groupedData': {
        [key: string]: IssueGroupedDataValue;
    };
    /**
     *
     * @type {number}
     * @memberof Issue
     */
    'eventsCount': number;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'category': IssueCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof Issue
     */
    'resolutionLink': string | null;
}
export declare const IssueCategoryEnum: {
    readonly UserCode: "user_code";
    readonly Limits: "limits";
    readonly Configuration: "configuration";
    readonly Other: "other";
};
export type IssueCategoryEnum = typeof IssueCategoryEnum[keyof typeof IssueCategoryEnum];
/**
 *
 * @export
 * @interface IssueEvent
 */
export interface IssueEvent {
    /**
     *
     * @type {string}
     * @memberof IssueEvent
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof IssueEvent
     */
    'createdAt': string;
    /**
     *
     * @type {{ [key: string]: IssueGroupedDataValue; }}
     * @memberof IssueEvent
     */
    'data': {
        [key: string]: IssueGroupedDataValue;
    };
}
/**
 *
 * @export
 * @interface IssueGroupedDataValue
 */
export interface IssueGroupedDataValue {
    /**
     *
     * @type {string}
     * @memberof IssueGroupedDataValue
     */
    'raw': string;
    /**
     *
     * @type {string}
     * @memberof IssueGroupedDataValue
     */
    'pretty'?: string;
}
/**
 *
 * @export
 * @interface ListBotIssueEventsResponse
 */
export interface ListBotIssueEventsResponse {
    /**
     *
     * @type {Array<ListBotIssueEventsResponseIssueEventsInner>}
     * @memberof ListBotIssueEventsResponse
     */
    'issueEvents': Array<ListBotIssueEventsResponseIssueEventsInner>;
}
/**
 *
 * @export
 * @interface ListBotIssueEventsResponseIssueEventsInner
 */
export interface ListBotIssueEventsResponseIssueEventsInner {
    /**
     *
     * @type {string}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'createdAt': string;
    /**
     *
     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}
     * @memberof ListBotIssueEventsResponseIssueEventsInner
     */
    'data': {
        [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue;
    };
}
/**
 *
 * @export
 * @interface ListBotIssuesResponse
 */
export interface ListBotIssuesResponse {
    /**
     *
     * @type {Array<ListBotIssuesResponseIssuesInner>}
     * @memberof ListBotIssuesResponse
     */
    'issues': Array<ListBotIssuesResponseIssuesInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListBotIssuesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListBotIssuesResponseIssuesInner
 */
export interface ListBotIssuesResponseIssuesInner {
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'lastSeenAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'groupedData': {
        [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue;
    };
    /**
     *
     * @type {number}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'eventsCount': number;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'category': ListBotIssuesResponseIssuesInnerCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInner
     */
    'resolutionLink': string | null;
}
export declare const ListBotIssuesResponseIssuesInnerCategoryEnum: {
    readonly UserCode: "user_code";
    readonly Limits: "limits";
    readonly Configuration: "configuration";
    readonly Other: "other";
};
export type ListBotIssuesResponseIssuesInnerCategoryEnum = typeof ListBotIssuesResponseIssuesInnerCategoryEnum[keyof typeof ListBotIssuesResponseIssuesInnerCategoryEnum];
/**
 *
 * @export
 * @interface ListBotIssuesResponseIssuesInnerGroupedDataValue
 */
export interface ListBotIssuesResponseIssuesInnerGroupedDataValue {
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue
     */
    'raw': string;
    /**
     *
     * @type {string}
     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue
     */
    'pretty'?: string;
}
/**
 *
 * @export
 * @interface ListBotsResponse
 */
export interface ListBotsResponse {
    /**
     *
     * @type {Array<ListBotsResponseBotsInner>}
     * @memberof ListBotsResponse
     */
    'bots': Array<ListBotsResponseBotsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListBotsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListBotsResponseBotsInner
 */
export interface ListBotsResponseBotsInner {
    /**
     * User id
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'id': string;
    /**
     * Creation date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Bot](#schema_bot) in ISO 8601 format
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ListBotsResponseBotsInner
     */
    'deployedAt'?: string;
}
/**
 *
 * @export
 * @interface ListConversationsResponse
 */
export interface ListConversationsResponse {
    /**
     *
     * @type {Array<Conversation>}
     * @memberof ListConversationsResponse
     */
    'conversations': Array<Conversation>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListConversationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListConversationsResponseMeta
 */
export interface ListConversationsResponseMeta {
    /**
     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.
     * @type {string}
     * @memberof ListConversationsResponseMeta
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface ListEventsResponse
 */
export interface ListEventsResponse {
    /**
     *
     * @type {Array<Event>}
     * @memberof ListEventsResponse
     */
    'events': Array<Event>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListEventsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListFilesResponse
 */
export interface ListFilesResponse {
    /**
     *
     * @type {Array<any>}
     * @memberof ListFilesResponse
     */
    'files': Array<any>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListFilesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListIntegrationsResponse
 */
export interface ListIntegrationsResponse {
    /**
     *
     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}
     * @memberof ListIntegrationsResponse
     */
    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListIntegrationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListMessagesResponse
 */
export interface ListMessagesResponse {
    /**
     *
     * @type {Array<Message>}
     * @memberof ListMessagesResponse
     */
    'messages': Array<Message>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListMessagesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListParticipantsResponse
 */
export interface ListParticipantsResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof ListParticipantsResponse
     */
    'participants': Array<User>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListParticipantsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListPersonalAccessTokensResponse
 */
export interface ListPersonalAccessTokensResponse {
    /**
     *
     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}
     * @memberof ListPersonalAccessTokensResponse
     */
    'pats': Array<ListPersonalAccessTokensResponsePatsInner>;
}
/**
 *
 * @export
 * @interface ListPersonalAccessTokensResponsePatsInner
 */
export interface ListPersonalAccessTokensResponsePatsInner {
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ListPersonalAccessTokensResponsePatsInner
     */
    'note': string;
}
/**
 *
 * @export
 * @interface ListPublicIntegrationsResponse
 */
export interface ListPublicIntegrationsResponse {
    /**
     *
     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}
     * @memberof ListPublicIntegrationsResponse
     */
    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListPublicIntegrationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListPublicIntegrationsResponseIntegrationsInner
 */
export interface ListPublicIntegrationsResponseIntegrationsInner {
    /**
     * User id
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'id': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'name': string;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'version': string;
    /**
     * Creation date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Integration](#schema_integration) in ISO 8601 format
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'updatedAt': string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'title': string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'description': string;
    /**
     * URL of the icon of the integration. This is the icon that will be displayed in the UI
     * @type {string}
     * @memberof ListPublicIntegrationsResponseIntegrationsInner
     */
    'iconUrl': string;
}
/**
 *
 * @export
 * @interface ListUsageHistoryResponse
 */
export interface ListUsageHistoryResponse {
    /**
     *
     * @type {Array<Usage>}
     * @memberof ListUsageHistoryResponse
     */
    'usages': Array<Usage>;
}
/**
 *
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    'users': Array<User>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListUsersResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponse
 */
export interface ListWorkspaceInvoicesResponse {
    /**
     *
     * @type {Array<ListWorkspaceInvoicesResponseInvoicesInner>}
     * @memberof ListWorkspaceInvoicesResponse
     */
    'invoices': Array<ListWorkspaceInvoicesResponseInvoicesInner>;
}
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponseInvoicesInner
 */
export interface ListWorkspaceInvoicesResponseInvoicesInner {
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'id': string;
    /**
     *
     * @type {ListWorkspaceInvoicesResponseInvoicesInnerPeriod}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'period': ListWorkspaceInvoicesResponseInvoicesInnerPeriod;
    /**
     * Date on which the invoice was generated.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'date': string;
    /**
     * Total amount to pay of the invoice.
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'amount': number;
    /**
     * Currency of the invoice amount.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'currency': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'paymentStatus': ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum;
    /**
     * Number of times payment has been unsuccessfully attempted on the invoice.
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'paymentAttemptCount': number | null;
    /**
     * Date on which the next payment attempt will be made.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'nextPaymentAttemptDate': string | null;
    /**
     * URL to download the PDF file of the invoice.
     * @type {string}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInner
     */
    'pdfUrl': string;
}
export declare const ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum: {
    readonly Paid: "paid";
    readonly Unpaid: "unpaid";
};
export type ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum[keyof typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum];
/**
 *
 * @export
 * @interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod
 */
export interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod {
    /**
     *
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod
     */
    'month': number;
    /**
     *
     * @type {number}
     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod
     */
    'year': number;
}
/**
 *
 * @export
 * @interface ListWorkspaceMembersResponse
 */
export interface ListWorkspaceMembersResponse {
    /**
     *
     * @type {Array<ListWorkspaceMembersResponseMembersInner>}
     * @memberof ListWorkspaceMembersResponse
     */
    'members': Array<ListWorkspaceMembersResponseMembersInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListWorkspaceMembersResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListWorkspaceMembersResponseMembersInner
 */
export interface ListWorkspaceMembersResponseMembersInner {
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof ListWorkspaceMembersResponseMembersInner
     */
    'role': ListWorkspaceMembersResponseMembersInnerRoleEnum;
}
export declare const ListWorkspaceMembersResponseMembersInnerRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type ListWorkspaceMembersResponseMembersInnerRoleEnum = typeof ListWorkspaceMembersResponseMembersInnerRoleEnum[keyof typeof ListWorkspaceMembersResponseMembersInnerRoleEnum];
/**
 *
 * @export
 * @interface ListWorkspaceQuotasResponse
 */
export interface ListWorkspaceQuotasResponse {
    /**
     *
     * @type {Array<ListWorkspaceQuotasResponseQuotasInner>}
     * @memberof ListWorkspaceQuotasResponse
     */
    'quotas': Array<ListWorkspaceQuotasResponseQuotasInner>;
}
/**
 *
 * @export
 * @interface ListWorkspaceQuotasResponseQuotasInner
 */
export interface ListWorkspaceQuotasResponseQuotasInner {
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'period': string;
    /**
     * Value of the quota that is used
     * @type {number}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'value': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof ListWorkspaceQuotasResponseQuotasInner
     */
    'type': ListWorkspaceQuotasResponseQuotasInnerTypeEnum;
}
export declare const ListWorkspaceQuotasResponseQuotasInnerTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListWorkspaceQuotasResponseQuotasInnerTypeEnum = typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum[keyof typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum];
/**
 *
 * @export
 * @interface ListWorkspaceUsagesResponse
 */
export interface ListWorkspaceUsagesResponse {
    /**
     *
     * @type {Array<Usage>}
     * @memberof ListWorkspaceUsagesResponse
     */
    'usages': Array<Usage>;
}
/**
 *
 * @export
 * @interface ListWorkspacesResponse
 */
export interface ListWorkspacesResponse {
    /**
     *
     * @type {Array<UpdateWorkspaceResponse>}
     * @memberof ListWorkspacesResponse
     */
    'workspaces': Array<UpdateWorkspaceResponse>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListWorkspacesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * Creation date of the [Message](#schema_message) in ISO 8601 format
     * @type {string}
     * @memberof Message
     */
    'createdAt': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof Message
     */
    'type': string;
    /**
     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location
     * @type {{ [key: string]: any; }}
     * @memberof Message
     */
    'payload': {
        [key: string]: any;
    };
    /**
     * Direction of the message (`incoming` or `outgoing`).
     * @type {string}
     * @memberof Message
     */
    'direction': MessageDirectionEnum;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'userId': string;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'conversationId': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof Message
     */
    'tags': {
        [key: string]: string;
    };
}
export declare const MessageDirectionEnum: {
    readonly Incoming: "incoming";
    readonly Outgoing: "outgoing";
};
export type MessageDirectionEnum = typeof MessageDirectionEnum[keyof typeof MessageDirectionEnum];
/**
 *
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * ID of the bot the file will be used for
     * @type {string}
     * @memberof ModelFile
     */
    'botId': string;
    /**
     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.
     * @type {string}
     * @memberof ModelFile
     */
    'name': string;
    /**
     * Accepted values: private, public
     * @type {string}
     * @memberof ModelFile
     */
    'accessType': ModelFileAccessTypeEnum;
    /**
     * ID of the [File](#schema_file)
     * @type {string}
     * @memberof ModelFile
     */
    'id': string;
    /**
     * Creation date of the [File](#schema_file) in ISO 8601 format
     * @type {string}
     * @memberof ModelFile
     */
    'createdAt': string;
    /**
     * Size of the file in bytes
     * @type {number}
     * @memberof ModelFile
     */
    'size': number;
    /**
     * Public URL to the file contents, available only if the access type is public. If the file is private, use the Download endpoint to retrieve the file contents.
     * @type {string}
     * @memberof ModelFile
     */
    'publicUrl'?: string;
}
export declare const ModelFileAccessTypeEnum: {
    readonly Private: "private";
    readonly Public: "public";
};
export type ModelFileAccessTypeEnum = typeof ModelFileAccessTypeEnum[keyof typeof ModelFileAccessTypeEnum];
/**
 *
 * @export
 * @interface PatchStateBody
 */
export interface PatchStateBody {
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof PatchStateBody
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface PatchStateResponse
 */
export interface PatchStateResponse {
    /**
     *
     * @type {State}
     * @memberof PatchStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface SetStateBody
 */
export interface SetStateBody {
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof SetStateBody
     */
    'payload': {
        [key: string]: any;
    } | null;
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof SetStateBody
     */
    'expiry'?: number;
}
/**
 *
 * @export
 * @interface SetStateResponse
 */
export interface SetStateResponse {
    /**
     *
     * @type {State}
     * @memberof SetStateResponse
     */
    'state': State;
}
/**
 *
 * @export
 * @interface SetWorkspacePaymentMethodBody
 */
export interface SetWorkspacePaymentMethodBody {
    /**
     * ID of the Stripe PaymentMethod to attach to the workspace.
     * @type {string}
     * @memberof SetWorkspacePaymentMethodBody
     */
    'stripePaymentMethodId': string;
}
/**
 *
 * @export
 * @interface SetWorkspacePaymentMethodResponse
 */
export interface SetWorkspacePaymentMethodResponse {
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'stripePaymentMethodId': string;
    /**
     *
     * @type {GetWorkspaceBillingDetailsResponsePaymentMethod}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'paymentMethod': GetWorkspaceBillingDetailsResponsePaymentMethod | null;
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'status': SetWorkspacePaymentMethodResponseStatusEnum;
    /**
     *
     * @type {SetWorkspacePaymentMethodResponseNextAction}
     * @memberof SetWorkspacePaymentMethodResponse
     */
    'nextAction'?: SetWorkspacePaymentMethodResponseNextAction;
}
export declare const SetWorkspacePaymentMethodResponseStatusEnum: {
    readonly Succeeded: "succeeded";
    readonly Processing: "processing";
    readonly Canceled: "canceled";
    readonly RequiresConfirmation: "requires_confirmation";
    readonly RequiresAction: "requires_action";
    readonly RequiresPaymentMethod: "requires_payment_method";
};
export type SetWorkspacePaymentMethodResponseStatusEnum = typeof SetWorkspacePaymentMethodResponseStatusEnum[keyof typeof SetWorkspacePaymentMethodResponseStatusEnum];
/**
 * If the payment needs to be confirmed, this will contain a URL to redirect the user to so they can complete the verification process to confirm it.
 * @export
 * @interface SetWorkspacePaymentMethodResponseNextAction
 */
export interface SetWorkspacePaymentMethodResponseNextAction {
    /**
     *
     * @type {string}
     * @memberof SetWorkspacePaymentMethodResponseNextAction
     */
    'redirectToUrl': string;
}
/**
 * The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.
 * @export
 * @interface State
 */
export interface State {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'id': string;
    /**
     * Creation date of the [State](#schema_state) in ISO 8601 format
     * @type {string}
     * @memberof State
     */
    'createdAt': string;
    /**
     * Updating date of the [State](#schema_state) in ISO 8601 format
     * @type {string}
     * @memberof State
     */
    'updatedAt': string;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'botId': string;
    /**
     * Id of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof State
     */
    'conversationId'?: string;
    /**
     * Id of the [User](#schema_user)
     * @type {string}
     * @memberof State
     */
    'userId'?: string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof State
     */
    'name': string;
    /**
     * Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot` or `integration`) that the state is related to
     * @type {string}
     * @memberof State
     */
    'type': StateTypeEnum;
    /**
     * Payload is the content of the state defined by your bot.
     * @type {{ [key: string]: any; }}
     * @memberof State
     */
    'payload': {
        [key: string]: any;
    };
}
export declare const StateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
};
export type StateTypeEnum = typeof StateTypeEnum[keyof typeof StateTypeEnum];
/**
 *
 * @export
 * @interface TransferBotBody
 */
export interface TransferBotBody {
    /**
     * The ID of the workspace you want to transfer the bot to.
     * @type {string}
     * @memberof TransferBotBody
     */
    'targetWorkspaceId': string;
}
/**
 *
 * @export
 * @interface UpdateBotBody
 */
export interface UpdateBotBody {
    /**
     * URL of the [Bot](#schema_bot); Only available for dev bots
     * @type {string}
     * @memberof UpdateBotBody
     */
    'url'?: string;
    /**
     * Type of the [Bot](#schema_bot) authentication (`iam`)
     * @type {string}
     * @memberof UpdateBotBody
     */
    'authentication'?: UpdateBotBodyAuthenticationEnum;
    /**
     *
     * @type {CreateBotBodyConfiguration}
     * @memberof UpdateBotBody
     */
    'configuration'?: CreateBotBodyConfiguration;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBotBody
     */
    'blocked'?: boolean;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'user'?: UpdateBotBodyUser;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'message'?: UpdateBotBodyUser;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateBotBody
     */
    'conversation'?: UpdateBotBodyUser;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}
     * @memberof UpdateBotBody
     */
    'events'?: {
        [key: string]: UpdateBotBodyEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyStatesValue | null; }}
     * @memberof UpdateBotBody
     */
    'states'?: {
        [key: string]: UpdateBotBodyStatesValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyRecurringEventsValue | null; }}
     * @memberof UpdateBotBody
     */
    'recurringEvents'?: {
        [key: string]: UpdateBotBodyRecurringEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyIntegrationsValue | null; }}
     * @memberof UpdateBotBody
     */
    'integrations'?: {
        [key: string]: UpdateBotBodyIntegrationsValue | null;
    };
    /**
     * JavaScript code of the bot
     * @type {string}
     * @memberof UpdateBotBody
     */
    'code'?: string;
    /**
     * Optional name for the bot, if not provided will be auto-generated
     * @type {string}
     * @memberof UpdateBotBody
     */
    'name'?: string;
    /**
     * Media files associated with the [Bot](#schema_bot)
     * @type {Array<CreateBotBodyMediasInner>}
     * @memberof UpdateBotBody
     */
    'medias'?: Array<CreateBotBodyMediasInner>;
    /**
     * Indicates if the [Bot](#schema_bot) should be executed in accelerated mode
     * @type {boolean}
     * @memberof UpdateBotBody
     */
    'alwaysAlive'?: boolean;
}
export declare const UpdateBotBodyAuthenticationEnum: {
    readonly Iam: "iam";
};
export type UpdateBotBodyAuthenticationEnum = typeof UpdateBotBodyAuthenticationEnum[keyof typeof UpdateBotBodyAuthenticationEnum];
/**
 * Event Definition
 * @export
 * @interface UpdateBotBodyEventsValue
 */
export interface UpdateBotBodyEventsValue {
    /**
     * Title of the event
     * @type {string}
     * @memberof UpdateBotBodyEventsValue
     */
    'title'?: string;
    /**
     * Description of the event
     * @type {string}
     * @memberof UpdateBotBodyEventsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyEventsValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyIntegrationsValue
 */
export interface UpdateBotBodyIntegrationsValue {
    /**
     *
     * @type {boolean}
     * @memberof UpdateBotBodyIntegrationsValue
     */
    'enabled'?: boolean;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyIntegrationsValue
     */
    'configuration'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyRecurringEventsValue
 */
export interface UpdateBotBodyRecurringEventsValue {
    /**
     *
     * @type {CreateBotBodyRecurringEventsValueSchedule}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'schedule': CreateBotBodyRecurringEventsValueSchedule;
    /**
     * Unique identifier of the integration that was installed on the bot
     * @type {string}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyRecurringEventsValue
     */
    'payload': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateBotBodyStatesValue
 */
export interface UpdateBotBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)
     * @type {string}
     * @memberof UpdateBotBodyStatesValue
     */
    'type': UpdateBotBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateBotBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
    /**
     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\'t expire.
     * @type {number}
     * @memberof UpdateBotBodyStatesValue
     */
    'expiry'?: number;
}
export declare const UpdateBotBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
};
export type UpdateBotBodyStatesValueTypeEnum = typeof UpdateBotBodyStatesValueTypeEnum[keyof typeof UpdateBotBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface UpdateBotBodyUser
 */
export interface UpdateBotBodyUser {
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateBotBodyUser
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 * Definition of a tag that can be provided on the object
 * @export
 * @interface UpdateBotBodyUserTagsValue
 */
export interface UpdateBotBodyUserTagsValue {
    /**
     * Title of the tag
     * @type {string}
     * @memberof UpdateBotBodyUserTagsValue
     */
    'title'?: string;
    /**
     * Description of the tag
     * @type {string}
     * @memberof UpdateBotBodyUserTagsValue
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface UpdateBotResponse
 */
export interface UpdateBotResponse {
    /**
     *
     * @type {Bot}
     * @memberof UpdateBotResponse
     */
    'bot': Bot;
}
/**
 *
 * @export
 * @interface UpdateConversationBody
 */
export interface UpdateConversationBody {
    /**
     * Tags for the [Conversation](#schema_conversation)
     * @type {{ [key: string]: string; }}
     * @memberof UpdateConversationBody
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateConversationResponse
 */
export interface UpdateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof UpdateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBody
 */
export interface UpdateIntegrationBody {
    /**
     *
     * @type {UpdateIntegrationBodyConfiguration}
     * @memberof UpdateIntegrationBody
     */
    'configuration'?: UpdateIntegrationBodyConfiguration;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'channels'?: {
        [key: string]: UpdateIntegrationBodyChannelsValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyIdentifier}
     * @memberof UpdateIntegrationBody
     */
    'identifier'?: UpdateIntegrationBodyIdentifier;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyActionsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'actions'?: {
        [key: string]: UpdateIntegrationBodyActionsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'events'?: {
        [key: string]: UpdateBotBodyEventsValue | null;
    };
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyStatesValue | null; }}
     * @memberof UpdateIntegrationBody
     */
    'states'?: {
        [key: string]: UpdateIntegrationBodyStatesValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyUser}
     * @memberof UpdateIntegrationBody
     */
    'user'?: UpdateIntegrationBodyUser;
    /**
     * JavaScript code of the integration
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'code'?: string;
    /**
     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'icon'?: string;
    /**
     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'readme'?: string;
    /**
     * Title of the integration. This is the name that will be displayed in the UI
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'title'?: string;
    /**
     * Description of the integration. This is the description that will be displayed in the UI
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'description'?: string;
    /**
     * URL of the integration; Only available for dev integrations
     * @type {string}
     * @memberof UpdateIntegrationBody
     */
    'url'?: string;
}
/**
 * Action definition
 * @export
 * @interface UpdateIntegrationBodyActionsValue
 */
export interface UpdateIntegrationBodyActionsValue {
    /**
     * Title of the action
     * @type {string}
     * @memberof UpdateIntegrationBodyActionsValue
     */
    'title'?: string;
    /**
     * Description of the action
     * @type {string}
     * @memberof UpdateIntegrationBodyActionsValue
     */
    'description'?: string;
    /**
     *
     * @type {CreateIntegrationBodyActionsValueInput}
     * @memberof UpdateIntegrationBodyActionsValue
     */
    'input': CreateIntegrationBodyActionsValueInput;
    /**
     *
     * @type {CreateIntegrationBodyActionsValueInput}
     * @memberof UpdateIntegrationBodyActionsValue
     */
    'output': CreateIntegrationBodyActionsValueInput;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyChannelsValue
 */
export interface UpdateIntegrationBodyChannelsValue {
    /**
     * Title of the channel
     * @type {string}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'title'?: string;
    /**
     * Description of the channel
     * @type {string}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; }}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'messages'?: {
        [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null;
    };
    /**
     *
     * @type {UpdateIntegrationBodyChannelsValueConversation}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'conversation'?: UpdateIntegrationBodyChannelsValueConversation;
    /**
     *
     * @type {UpdateBotBodyUser}
     * @memberof UpdateIntegrationBodyChannelsValue
     */
    'message'?: UpdateBotBodyUser;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyChannelsValueConversation
 */
export interface UpdateIntegrationBodyChannelsValueConversation {
    /**
     *
     * @type {CreateIntegrationBodyChannelsValueConversationCreation}
     * @memberof UpdateIntegrationBodyChannelsValueConversation
     */
    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateIntegrationBodyChannelsValueConversation
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 * Message definition
 * @export
 * @interface UpdateIntegrationBodyChannelsValueMessagesValue
 */
export interface UpdateIntegrationBodyChannelsValueMessagesValue {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyChannelsValueMessagesValue
     */
    'schema': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyConfiguration
 */
export interface UpdateIntegrationBodyConfiguration {
    /**
     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyConfiguration
     */
    'schema'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {UpdateIntegrationBodyConfigurationIdentifier}
     * @memberof UpdateIntegrationBodyConfiguration
     */
    'identifier'?: UpdateIntegrationBodyConfigurationIdentifier;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyConfigurationIdentifier
 */
export interface UpdateIntegrationBodyConfigurationIdentifier {
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof UpdateIntegrationBodyConfigurationIdentifier
     */
    'linkTemplateScript'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof UpdateIntegrationBodyConfigurationIdentifier
     */
    'required'?: boolean;
}
/**
 *
 * @export
 * @interface UpdateIntegrationBodyIdentifier
 */
export interface UpdateIntegrationBodyIdentifier {
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof UpdateIntegrationBodyIdentifier
     */
    'extractScript'?: string | null;
    /**
     * Signing secret of the [Bot](#schema_bot)
     * @type {string}
     * @memberof UpdateIntegrationBodyIdentifier
     */
    'fallbackHandlerScript'?: string | null;
}
/**
 * State definition
 * @export
 * @interface UpdateIntegrationBodyStatesValue
 */
export interface UpdateIntegrationBodyStatesValue {
    /**
     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)
     * @type {string}
     * @memberof UpdateIntegrationBodyStatesValue
     */
    'type': UpdateIntegrationBodyStatesValueTypeEnum;
    /**
     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.
     * @type {{ [key: string]: any; }}
     * @memberof UpdateIntegrationBodyStatesValue
     */
    'schema': {
        [key: string]: any;
    };
}
export declare const UpdateIntegrationBodyStatesValueTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Integration: "integration";
};
export type UpdateIntegrationBodyStatesValueTypeEnum = typeof UpdateIntegrationBodyStatesValueTypeEnum[keyof typeof UpdateIntegrationBodyStatesValueTypeEnum];
/**
 *
 * @export
 * @interface UpdateIntegrationBodyUser
 */
export interface UpdateIntegrationBodyUser {
    /**
     *
     * @type {CreateIntegrationBodyUserCreation}
     * @memberof UpdateIntegrationBodyUser
     */
    'creation'?: CreateIntegrationBodyUserCreation;
    /**
     *
     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}
     * @memberof UpdateIntegrationBodyUser
     */
    'tags'?: {
        [key: string]: UpdateBotBodyUserTagsValue | null;
    };
}
/**
 *
 * @export
 * @interface UpdateIntegrationResponse
 */
export interface UpdateIntegrationResponse {
    /**
     *
     * @type {Integration}
     * @memberof UpdateIntegrationResponse
     */
    'integration': Integration;
}
/**
 *
 * @export
 * @interface UpdateMessageBody
 */
export interface UpdateMessageBody {
    /**
     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateMessageBody
     */
    'tags': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface UpdateMessageResponse
 */
export interface UpdateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof UpdateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface UpdateUserBody
 */
export interface UpdateUserBody {
    /**
     * Tags for the [User](#schema_user)
     * @type {{ [key: string]: string; }}
     * @memberof UpdateUserBody
     */
    'tags'?: {
        [key: string]: string;
    };
    /**
     * Name of the user
     * @type {string}
     * @memberof UpdateUserBody
     */
    'name'?: string;
    /**
     * URI of the user picture
     * @type {string}
     * @memberof UpdateUserBody
     */
    'pictureUrl'?: string | null;
}
/**
 *
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     *
     * @type {User}
     * @memberof UpdateUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface UpdateWorkspaceBody
 */
export interface UpdateWorkspaceBody {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceBody
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceBody
     */
    'spendingLimit'?: number;
}
/**
 *
 * @export
 * @interface UpdateWorkspaceMemberBody
 */
export interface UpdateWorkspaceMemberBody {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberBody
     */
    'role'?: UpdateWorkspaceMemberBodyRoleEnum;
}
export declare const UpdateWorkspaceMemberBodyRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type UpdateWorkspaceMemberBodyRoleEnum = typeof UpdateWorkspaceMemberBodyRoleEnum[keyof typeof UpdateWorkspaceMemberBodyRoleEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceMemberResponse
 */
export interface UpdateWorkspaceMemberResponse {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceMemberResponse
     */
    'role': UpdateWorkspaceMemberResponseRoleEnum;
}
export declare const UpdateWorkspaceMemberResponseRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type UpdateWorkspaceMemberResponseRoleEnum = typeof UpdateWorkspaceMemberResponseRoleEnum[keyof typeof UpdateWorkspaceMemberResponseRoleEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceResponse
 */
export interface UpdateWorkspaceResponse {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'accountType': UpdateWorkspaceResponseAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'billingVersion': UpdateWorkspaceResponseBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse
     */
    'plan': UpdateWorkspaceResponsePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse
     */
    'spendingLimit': number;
}
export declare const UpdateWorkspaceResponseAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type UpdateWorkspaceResponseAccountTypeEnum = typeof UpdateWorkspaceResponseAccountTypeEnum[keyof typeof UpdateWorkspaceResponseAccountTypeEnum];
export declare const UpdateWorkspaceResponseBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type UpdateWorkspaceResponseBillingVersionEnum = typeof UpdateWorkspaceResponseBillingVersionEnum[keyof typeof UpdateWorkspaceResponseBillingVersionEnum];
export declare const UpdateWorkspaceResponsePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type UpdateWorkspaceResponsePlanEnum = typeof UpdateWorkspaceResponsePlanEnum[keyof typeof UpdateWorkspaceResponsePlanEnum];
/**
 *
 * @export
 * @interface UpdateWorkspaceResponse1
 */
export interface UpdateWorkspaceResponse1 {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse1
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'accountType': UpdateWorkspaceResponse1AccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'billingVersion': UpdateWorkspaceResponse1BillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspaceResponse1
     */
    'plan': UpdateWorkspaceResponse1PlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof UpdateWorkspaceResponse1
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateWorkspaceResponse1
     */
    'spendingLimit': number;
}
export declare const UpdateWorkspaceResponse1AccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type UpdateWorkspaceResponse1AccountTypeEnum = typeof UpdateWorkspaceResponse1AccountTypeEnum[keyof typeof UpdateWorkspaceResponse1AccountTypeEnum];
export declare const UpdateWorkspaceResponse1BillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type UpdateWorkspaceResponse1BillingVersionEnum = typeof UpdateWorkspaceResponse1BillingVersionEnum[keyof typeof UpdateWorkspaceResponse1BillingVersionEnum];
export declare const UpdateWorkspaceResponse1PlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type UpdateWorkspaceResponse1PlanEnum = typeof UpdateWorkspaceResponse1PlanEnum[keyof typeof UpdateWorkspaceResponse1PlanEnum];
/**
 *
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     * Id of the usage that it is linked to. It can either be a workspace id or a bot id
     * @type {string}
     * @memberof Usage
     */
    'id': string;
    /**
     * Period of the quota that it is applied to
     * @type {string}
     * @memberof Usage
     */
    'period': string;
    /**
     * Value of the current usage
     * @type {number}
     * @memberof Usage
     */
    'value': number;
    /**
     * Quota of the current usage
     * @type {number}
     * @memberof Usage
     */
    'quota': number;
    /**
     * Usage type that can be used
     * @type {string}
     * @memberof Usage
     */
    'type': UsageTypeEnum;
}
export declare const UsageTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];
/**
 * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.
 * @export
 * @interface User
 */
export interface User {
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * Creation date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * Updating date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.
     * @type {{ [key: string]: string; }}
     * @memberof User
     */
    'tags': {
        [key: string]: string;
    };
    /**
     * Name of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * Picture URL of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'pictureUrl'?: string;
}
/**
 *
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof Workspace
     */
    'botCount': number;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'accountType': WorkspaceAccountTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'billingVersion': WorkspaceBillingVersionEnum;
    /**
     *
     * @type {string}
     * @memberof Workspace
     */
    'plan': WorkspacePlanEnum;
    /**
     *
     * @type {boolean}
     * @memberof Workspace
     */
    'blocked': boolean;
    /**
     *
     * @type {number}
     * @memberof Workspace
     */
    'spendingLimit': number;
}
export declare const WorkspaceAccountTypeEnum: {
    readonly Free: "free";
    readonly Premium: "premium";
};
export type WorkspaceAccountTypeEnum = typeof WorkspaceAccountTypeEnum[keyof typeof WorkspaceAccountTypeEnum];
export declare const WorkspaceBillingVersionEnum: {
    readonly V1: "v1";
    readonly V2: "v2";
};
export type WorkspaceBillingVersionEnum = typeof WorkspaceBillingVersionEnum[keyof typeof WorkspaceBillingVersionEnum];
export declare const WorkspacePlanEnum: {
    readonly Community: "community";
    readonly Team: "team";
    readonly Enterprise: "enterprise";
};
export type WorkspacePlanEnum = typeof WorkspacePlanEnum[keyof typeof WorkspacePlanEnum];
/**
 *
 * @export
 * @interface WorkspaceMember
 */
export interface WorkspaceMember {
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceMember
     */
    'role': WorkspaceMemberRoleEnum;
}
export declare const WorkspaceMemberRoleEnum: {
    readonly Viewer: "viewer";
    readonly Billing: "billing";
    readonly Developer: "developer";
    readonly Manager: "manager";
    readonly Administrator: "administrator";
    readonly Owner: "owner";
};
export type WorkspaceMemberRoleEnum = typeof WorkspaceMemberRoleEnum[keyof typeof WorkspaceMemberRoleEnum];
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant: (id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Break down workspace usage by bot
     * @param {string} id Workspace ID
     * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot: (id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call an action
     * @param {CallActionBody} [callActionBody] Action payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction: (callActionBody?: CallActionBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change AI Spend quota
     * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota: (changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change workspace billing plan
     * @param {string} id Workspace ID
     * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan: (id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {string} id Workspace ID
     * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices: (id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration: (configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create bot
     * @param {CreateBotBody} [createBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot: (createBotBody?: CreateBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation: (createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {CreateEventBody} [createEventBody] Event data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent: (createEventBody?: CreateEventBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create File
     * @param {CreateFileBody} [createFileBody] Create File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile: (createFileBody?: CreateFileBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create integration
     * @param {CreateIntegrationBody} [createIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration: (createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage: (createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a PAT
     * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken: (createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserBody?: CreateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create workspace
     * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace: (createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a member to the workspace
     * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember: (createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete bot
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue: (id: string, issueId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a PAT
     * @param {string} id ID of Personal Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a member of a workspace
     * @param {string} id Workspace member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Download File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {string} id Workspace ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot details
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot analytics
     * @param {string} id Bot ID
     * @param {string} startDate Start date/time (inclusive)
     * @param {string} endDate End date/time (exclusive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics: (id: string, startDate: string, endDate: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get bot logs
     * @param {string} id Bot ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs: (id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the webchat code/URL for a bot
     * @param {string} id Bot ID
     * @param {GetBotWebchatTypeEnum} type type of script to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat: (id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {string} id Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName: (name: string, version: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get integration logs
     * @param {string} id Integration ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs: (id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation: (getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage: (getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser: (getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant: (id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get public integration by name and version
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration: (name: string, version: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get public integration by Id
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {GetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState: (type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get usage
     * @param {GetUsageTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage: (type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get workspace details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get billing details of workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceBillingDetails: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get workspace quota
     * @param {string} id Workspace ID
     * @param {GetWorkspaceQuotaTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota: (id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Introspect the API
     * @param {IntrospectBody} [introspectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect: (introspectBody?: IntrospectBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Events for a Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents: (id: string, issueId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Bot Issues
     * @param {string} id Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List bots
     * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots: (dev?: boolean, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {Array<string>} [participantIds] Filter by participant ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations: (nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, participantIds?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retreives a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [type] Filter by event type
     * @param {string} [conversationId] Filter by conversation id
     * @param {string} [userId] Filter by user id
     * @param {string} [messageId] Filter by message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents: (nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Files
     * @param {string} botId Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles: (botId: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List integrations
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations: (nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Conversation id
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages: (nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants: (id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List public integration
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations: (nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get usage history
     * @param {ListUsageHistoryTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory: (type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List invoices billed to workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the members in a workspace
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers: (nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspace quotas
     * @param {string} id Workspace ID
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas: (id: string, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspace usages
     * @param {string} id Workspace ID
     * @param {ListWorkspaceUsagesTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages: (id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List workspaces the user has access to
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces: (nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {PatchStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {PatchStateBody} [patchStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState: (type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant: (id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {SetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {SetStateBody} [setStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState: (type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {string} id Workspace ID
     * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod: (id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {string} id Bot ID
     * @param {TransferBotBody} [transferBotBody] Bot transfer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot: (id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update bot
     * @param {string} id Bot ID
     * @param {UpdateBotBody} [updateBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot: (id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation: (id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update integration
     * @param {string} id Integration ID
     * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration: (id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a message
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage: (id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id User ID
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update workspace
     * @param {string} id Workspace ID
     * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace: (id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the member of a workspace
     * @param {string} id Workspace member ID
     * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember: (id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>>;
    /**
     * Break down workspace usage by bot
     * @param {string} id Workspace ID
     * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot(id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreakDownWorkspaceUsageByBotResponse>>;
    /**
     * Call an action
     * @param {CallActionBody} [callActionBody] Action payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction(callActionBody?: CallActionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallActionResponse>>;
    /**
     * Change AI Spend quota
     * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota(changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Change workspace billing plan
     * @param {string} id Workspace ID
     * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan(id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeWorkspacePlanResponse>>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {string} id Workspace ID
     * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices(id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration(configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Create bot
     * @param {CreateBotBody} [createBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(createBotBody?: CreateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBotResponse>>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {CreateEventBody} [createEventBody] Event data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(createEventBody?: CreateEventBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>>;
    /**
     * Create File
     * @param {CreateFileBody} [createFileBody] Create File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(createFileBody?: CreateFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>>;
    /**
     * Create integration
     * @param {CreateIntegrationBody} [createIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationResponse>>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>>;
    /**
     * Create a PAT
     * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponse>>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>>;
    /**
     * Create workspace
     * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceResponse>>;
    /**
     * Add a member to the workspace
     * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember(createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceMemberResponse>>;
    /**
     * Delete bot
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete a PAT
     * @param {string} id ID of Personal Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Delete workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Remove a member of a workspace
     * @param {string} id Workspace member ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Download File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {string} id Workspace ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuditRecordsResponse>>;
    /**
     * Get bot details
     * @param {string} id Bot ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotResponse>>;
    /**
     * Get bot analytics
     * @param {string} id Bot ID
     * @param {string} startDate Start date/time (inclusive)
     * @param {string} endDate End date/time (exclusive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics(id: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotAnalyticsResponse>>;
    /**
     * Get bot logs
     * @param {string} id Bot ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotLogsResponse>>;
    /**
     * Get the webchat code/URL for a bot
     * @param {string} id Bot ID
     * @param {GetBotWebchatTypeEnum} type type of script to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat(id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotWebchatResponse>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {string} id Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventResponse>>;
    /**
     * Get File
     * @param {string} id File ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponse>>;
    /**
     * Get integration
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationResponse>>;
    /**
     * Get integration
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationByNameResponse>>;
    /**
     * Get integration logs
     * @param {string} id Integration ID
     * @param {string} timeStart Beginning of the time range to get logs from
     * @param {string} timeEnd End of the time range to get logs from
     * @param {string} [nextToken] Token to get the next page of logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationLogsResponse>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser(getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateUserResponse>>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>>;
    /**
     * Get public integration by name and version
     * @param {string} name Integration Name
     * @param {string} version Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationResponse>>;
    /**
     * Get public integration by Id
     * @param {string} id Integration ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationByIdResponse>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {GetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState(type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateResponse>>;
    /**
     * Get usage
     * @param {GetUsageTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsageResponse>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>>;
    /**
     * Get workspace details
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceResponse>>;
    /**
     * Get billing details of workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceBillingDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceBillingDetailsResponse>>;
    /**
     * Get workspace quota
     * @param {string} id Workspace ID
     * @param {GetWorkspaceQuotaTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota(id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceQuotaResponse>>;
    /**
     * Introspect the API
     * @param {IntrospectBody} [introspectBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect(introspectBody?: IntrospectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectResponse>>;
    /**
     * List Events for a Bot Issue
     * @param {string} id Bot ID
     * @param {string} issueId Issue ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssueEventsResponse>>;
    /**
     * List Bot Issues
     * @param {string} id Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssuesResponse>>;
    /**
     * List bots
     * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots(dev?: boolean, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotsResponse>>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {Array<string>} [participantIds] Filter by participant ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(nextToken?: string, tags?: {
        [key: string]: string;
    } | undefined, participantIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>>;
    /**
     * Retreives a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [type] Filter by event type
     * @param {string} [conversationId] Filter by conversation id
     * @param {string} [userId] Filter by user id
     * @param {string} [messageId] Filter by message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventsResponse>>;
    /**
     * List Files
     * @param {string} botId Bot ID
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(botId: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFilesResponse>>;
    /**
     * List integrations
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationsResponse>>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Conversation id
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages(nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMessagesResponse>>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPersonalAccessTokensResponse>>;
    /**
     * List public integration
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [name] Integration Name
     * @param {string} [version] Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations(nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPublicIntegrationsResponse>>;
    /**
     * Get usage history
     * @param {ListUsageHistoryTypeEnum} type Type of usage
     * @param {string} id ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory(type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageHistoryResponse>>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.
     * @param {{ [key: string]: string; }} [tags] Filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(nextToken?: string, conversationId?: string, tags?: {
        [key: string]: string;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>>;
    /**
     * List invoices billed to workspace
     * @param {string} id Workspace ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceInvoicesResponse>>;
    /**
     * Lists all the members in a workspace
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceMembersResponse>>;
    /**
     * List workspace quotas
     * @param {string} id Workspace ID
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas(id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceQuotasResponse>>;
    /**
     * List workspace usages
     * @param {string} id Workspace ID
     * @param {ListWorkspaceUsagesTypeEnum} type Type of usage
     * @param {string} [period] Period to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages(id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceUsagesResponse>>;
    /**
     * List workspaces the user has access to
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspacesResponse>>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {PatchStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {PatchStateBody} [patchStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState(type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchStateResponse>>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {SetStateTypeEnum} type State type
     * @param {string} id State id
     * @param {string} name State name
     * @param {SetStateBody} [setStateBody] State content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState(type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetStateResponse>>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {string} id Workspace ID
     * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod(id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWorkspacePaymentMethodResponse>>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {string} id Bot ID
     * @param {TransferBotBody} [transferBotBody] Bot transfer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot(id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Update bot
     * @param {string} id Bot ID
     * @param {UpdateBotBody} [updateBotBody] Bot metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot(id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBotResponse>>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>>;
    /**
     * Update integration
     * @param {string} id Integration ID
     * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration(id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIntegrationResponse>>;
    /**
     * Update a message
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {string} id User ID
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>>;
    /**
     * Update workspace
     * @param {string} id Workspace ID
     * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceResponse1>>;
    /**
     * Update the member of a workspace
     * @param {string} id Workspace member ID
     * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember(id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceMemberResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse>;
    /**
     * Break down workspace usage by bot
     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): AxiosPromise<BreakDownWorkspaceUsageByBotResponse>;
    /**
     * Call an action
     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    callAction(requestParameters?: DefaultApiCallActionRequest, options?: AxiosRequestConfig): AxiosPromise<CallActionResponse>;
    /**
     * Change AI Spend quota
     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAISpendQuota(requestParameters?: DefaultApiChangeAISpendQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Change workspace billing plan
     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeWorkspacePlanResponse>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureIntegration(requestParameters?: DefaultApiConfigureIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Create bot
     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(requestParameters?: DefaultApiCreateBotRequest, options?: AxiosRequestConfig): AxiosPromise<CreateBotResponse>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(requestParameters?: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(requestParameters?: DefaultApiCreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse>;
    /**
     * Create File
     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(requestParameters?: DefaultApiCreateFileRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFileResponse>;
    /**
     * Create integration
     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(requestParameters?: DefaultApiCreateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationResponse>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(requestParameters?: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse>;
    /**
     * Create a PAT
     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(requestParameters?: DefaultApiCreatePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<CreatePersonalAccessTokenResponse>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse>;
    /**
     * Create workspace
     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(requestParameters?: DefaultApiCreateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceResponse>;
    /**
     * Add a member to the workspace
     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspaceMember(requestParameters?: DefaultApiCreateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceMemberResponse>;
    /**
     * Delete bot
     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete Bot Issue
     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete File
     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete integration
     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete a PAT
     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Delete workspace
     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Remove a member of a workspace
     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Download File
     * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(options?: AxiosRequestConfig): AxiosPromise<GetAccountResponse>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAuditRecordsResponse>;
    /**
     * Get bot details
     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotResponse>;
    /**
     * Get bot analytics
     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotAnalyticsResponse>;
    /**
     * Get bot logs
     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotLogsResponse>;
    /**
     * Get the webchat code/URL for a bot
     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotWebchatResponse>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<GetEventResponse>;
    /**
     * Get File
     * @param {DefaultApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(requestParameters: DefaultApiGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileResponse>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationResponse>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationByNameResponse>;
    /**
     * Get integration logs
     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationLogsResponse>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(requestParameters?: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(requestParameters?: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateUser(requestParameters?: DefaultApiGetOrCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateUserResponse>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse>;
    /**
     * Get public integration by name and version
     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationResponse>;
    /**
     * Get public integration by Id
     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationByIdResponse>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetStateResponse>;
    /**
     * Get usage
     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): AxiosPromise<GetUsageResponse>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse>;
    /**
     * Get workspace details
     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceResponse>;
    /**
     * Get billing details of workspace
     * @param {DefaultApiGetWorkspaceBillingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceBillingDetails(requestParameters: DefaultApiGetWorkspaceBillingDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceBillingDetailsResponse>;
    /**
     * Get workspace quota
     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceQuotaResponse>;
    /**
     * Introspect the API
     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    introspect(requestParameters?: DefaultApiIntrospectRequest, options?: AxiosRequestConfig): AxiosPromise<IntrospectResponse>;
    /**
     * List Events for a Bot Issue
     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssueEventsResponse>;
    /**
     * List Bot Issues
     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssuesResponse>;
    /**
     * List bots
     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBots(requestParameters?: DefaultApiListBotsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotsResponse>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(requestParameters?: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse>;
    /**
     * Retreives a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(requestParameters?: DefaultApiListEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListEventsResponse>;
    /**
     * List Files
     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<ListFilesResponse>;
    /**
     * List integrations
     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(requestParameters?: DefaultApiListIntegrationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationsResponse>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessages(requestParameters?: DefaultApiListMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListMessagesResponse>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): AxiosPromise<ListPersonalAccessTokensResponse>;
    /**
     * List public integration
     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPublicIntegrations(requestParameters?: DefaultApiListPublicIntegrationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListPublicIntegrationsResponse>;
    /**
     * Get usage history
     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageHistoryResponse>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(requestParameters?: DefaultApiListUsersRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsersResponse>;
    /**
     * List invoices billed to workspace
     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceInvoicesResponse>;
    /**
     * Lists all the members in a workspace
     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceMembers(requestParameters?: DefaultApiListWorkspaceMembersRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceMembersResponse>;
    /**
     * List workspace quotas
     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceQuotasResponse>;
    /**
     * List workspace usages
     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceUsagesResponse>;
    /**
     * List workspaces the user has access to
     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(requestParameters?: DefaultApiListWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspacesResponse>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): AxiosPromise<PatchStateResponse>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<SetStateResponse>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<SetWorkspacePaymentMethodResponse>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Update bot
     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateBotResponse>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse>;
    /**
     * Update integration
     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateIntegrationResponse>;
    /**
     * Update a message
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse>;
    /**
     * Update workspace
     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceResponse1>;
    /**
     * Update the member of a workspace
     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceMemberResponse>;
};
/**
 * Request parameters for addParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiAddParticipantRequest
 */
export interface DefaultApiAddParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiAddParticipant
     */
    readonly id: string;
    /**
     * Participant data
     * @type {AddParticipantBody}
     * @memberof DefaultApiAddParticipant
     */
    readonly addParticipantBody?: AddParticipantBody;
}
/**
 * Request parameters for breakDownWorkspaceUsageByBot operation in DefaultApi.
 * @export
 * @interface DefaultApiBreakDownWorkspaceUsageByBotRequest
 */
export interface DefaultApiBreakDownWorkspaceUsageByBotRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly type: BreakDownWorkspaceUsageByBotTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiBreakDownWorkspaceUsageByBot
     */
    readonly period?: string;
}
/**
 * Request parameters for callAction operation in DefaultApi.
 * @export
 * @interface DefaultApiCallActionRequest
 */
export interface DefaultApiCallActionRequest {
    /**
     * Action payload
     * @type {CallActionBody}
     * @memberof DefaultApiCallAction
     */
    readonly callActionBody?: CallActionBody;
}
/**
 * Request parameters for changeAISpendQuota operation in DefaultApi.
 * @export
 * @interface DefaultApiChangeAISpendQuotaRequest
 */
export interface DefaultApiChangeAISpendQuotaRequest {
    /**
     * New AI Spend quota
     * @type {ChangeAISpendQuotaBody}
     * @memberof DefaultApiChangeAISpendQuota
     */
    readonly changeAISpendQuotaBody?: ChangeAISpendQuotaBody;
}
/**
 * Request parameters for changeWorkspacePlan operation in DefaultApi.
 * @export
 * @interface DefaultApiChangeWorkspacePlanRequest
 */
export interface DefaultApiChangeWorkspacePlanRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiChangeWorkspacePlan
     */
    readonly id: string;
    /**
     * Billing plan to change the workspace to
     * @type {ChangeWorkspacePlanBody}
     * @memberof DefaultApiChangeWorkspacePlan
     */
    readonly changeWorkspacePlanBody?: ChangeWorkspacePlanBody;
}
/**
 * Request parameters for chargeWorkspaceUnpaidInvoices operation in DefaultApi.
 * @export
 * @interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest
 */
export interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices
     */
    readonly id: string;
    /**
     *
     * @type {ChargeWorkspaceUnpaidInvoicesBody}
     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices
     */
    readonly chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody;
}
/**
 * Request parameters for configureIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiConfigureIntegrationRequest
 */
export interface DefaultApiConfigureIntegrationRequest {
    /**
     * Configuration of the integration
     * @type {ConfigureIntegrationBody}
     * @memberof DefaultApiConfigureIntegration
     */
    readonly configureIntegrationBody?: ConfigureIntegrationBody;
}
/**
 * Request parameters for createBot operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateBotRequest
 */
export interface DefaultApiCreateBotRequest {
    /**
     * Bot metadata
     * @type {CreateBotBody}
     * @memberof DefaultApiCreateBot
     */
    readonly createBotBody?: CreateBotBody;
}
/**
 * Request parameters for createConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateConversationRequest
 */
export interface DefaultApiCreateConversationRequest {
    /**
     * Conversation data
     * @type {CreateConversationBody}
     * @memberof DefaultApiCreateConversation
     */
    readonly createConversationBody?: CreateConversationBody;
}
/**
 * Request parameters for createEvent operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateEventRequest
 */
export interface DefaultApiCreateEventRequest {
    /**
     * Event data
     * @type {CreateEventBody}
     * @memberof DefaultApiCreateEvent
     */
    readonly createEventBody?: CreateEventBody;
}
/**
 * Request parameters for createFile operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateFileRequest
 */
export interface DefaultApiCreateFileRequest {
    /**
     * Create File
     * @type {CreateFileBody}
     * @memberof DefaultApiCreateFile
     */
    readonly createFileBody?: CreateFileBody;
}
/**
 * Request parameters for createIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateIntegrationRequest
 */
export interface DefaultApiCreateIntegrationRequest {
    /**
     * Integration
     * @type {CreateIntegrationBody}
     * @memberof DefaultApiCreateIntegration
     */
    readonly createIntegrationBody?: CreateIntegrationBody;
}
/**
 * Request parameters for createMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateMessageRequest
 */
export interface DefaultApiCreateMessageRequest {
    /**
     * Message data
     * @type {CreateMessageBody}
     * @memberof DefaultApiCreateMessage
     */
    readonly createMessageBody?: CreateMessageBody;
}
/**
 * Request parameters for createPersonalAccessToken operation in DefaultApi.
 * @export
 * @interface DefaultApiCreatePersonalAccessTokenRequest
 */
export interface DefaultApiCreatePersonalAccessTokenRequest {
    /**
     *
     * @type {CreatePersonalAccessTokenBody}
     * @memberof DefaultApiCreatePersonalAccessToken
     */
    readonly createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody;
}
/**
 * Request parameters for createUser operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateUserRequest
 */
export interface DefaultApiCreateUserRequest {
    /**
     * User data
     * @type {CreateUserBody}
     * @memberof DefaultApiCreateUser
     */
    readonly createUserBody?: CreateUserBody;
}
/**
 * Request parameters for createWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateWorkspaceRequest
 */
export interface DefaultApiCreateWorkspaceRequest {
    /**
     * Workspace metadata
     * @type {CreateWorkspaceBody}
     * @memberof DefaultApiCreateWorkspace
     */
    readonly createWorkspaceBody?: CreateWorkspaceBody;
}
/**
 * Request parameters for createWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateWorkspaceMemberRequest
 */
export interface DefaultApiCreateWorkspaceMemberRequest {
    /**
     * Workspace member metadata
     * @type {CreateWorkspaceMemberBody}
     * @memberof DefaultApiCreateWorkspaceMember
     */
    readonly createWorkspaceMemberBody?: CreateWorkspaceMemberBody;
}
/**
 * Request parameters for deleteBot operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteBotRequest
 */
export interface DefaultApiDeleteBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiDeleteBot
     */
    readonly id: string;
}
/**
 * Request parameters for deleteBotIssue operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteBotIssueRequest
 */
export interface DefaultApiDeleteBotIssueRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiDeleteBotIssue
     */
    readonly id: string;
    /**
     * Issue ID
     * @type {string}
     * @memberof DefaultApiDeleteBotIssue
     */
    readonly issueId: string;
}
/**
 * Request parameters for deleteConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteConversationRequest
 */
export interface DefaultApiDeleteConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiDeleteConversation
     */
    readonly id: string;
}
/**
 * Request parameters for deleteFile operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteFileRequest
 */
export interface DefaultApiDeleteFileRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiDeleteFile
     */
    readonly id: string;
}
/**
 * Request parameters for deleteIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteIntegrationRequest
 */
export interface DefaultApiDeleteIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiDeleteIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for deleteMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteMessageRequest
 */
export interface DefaultApiDeleteMessageRequest {
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiDeleteMessage
     */
    readonly id: string;
}
/**
 * Request parameters for deletePersonalAccessToken operation in DefaultApi.
 * @export
 * @interface DefaultApiDeletePersonalAccessTokenRequest
 */
export interface DefaultApiDeletePersonalAccessTokenRequest {
    /**
     * ID of Personal Access Token
     * @type {string}
     * @memberof DefaultApiDeletePersonalAccessToken
     */
    readonly id: string;
}
/**
 * Request parameters for deleteUser operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteUserRequest
 */
export interface DefaultApiDeleteUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiDeleteUser
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteWorkspaceRequest
 */
export interface DefaultApiDeleteWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiDeleteWorkspace
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteWorkspaceMemberRequest
 */
export interface DefaultApiDeleteWorkspaceMemberRequest {
    /**
     * Workspace member ID
     * @type {string}
     * @memberof DefaultApiDeleteWorkspaceMember
     */
    readonly id: string;
}
/**
 * Request parameters for downloadFile operation in DefaultApi.
 * @export
 * @interface DefaultApiDownloadFileRequest
 */
export interface DefaultApiDownloadFileRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiDownloadFile
     */
    readonly id: string;
}
/**
 * Request parameters for getAuditRecords operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAuditRecordsRequest
 */
export interface DefaultApiGetAuditRecordsRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetAuditRecords
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiGetAuditRecords
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getBot operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotRequest
 */
export interface DefaultApiGetBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBot
     */
    readonly id: string;
}
/**
 * Request parameters for getBotAnalytics operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotAnalyticsRequest
 */
export interface DefaultApiGetBotAnalyticsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly id: string;
    /**
     * Start date/time (inclusive)
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly startDate: string;
    /**
     * End date/time (exclusive)
     * @type {string}
     * @memberof DefaultApiGetBotAnalytics
     */
    readonly endDate: string;
}
/**
 * Request parameters for getBotLogs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotLogsRequest
 */
export interface DefaultApiGetBotLogsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly id: string;
    /**
     * Beginning of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly timeStart: string;
    /**
     * End of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly timeEnd: string;
    /**
     * Token to get the next page of logs
     * @type {string}
     * @memberof DefaultApiGetBotLogs
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getBotWebchat operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBotWebchatRequest
 */
export interface DefaultApiGetBotWebchatRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiGetBotWebchat
     */
    readonly id: string;
    /**
     * type of script to get
     * @type {'preconfigured' | 'configurable' | 'fullscreen' | 'sharableUrl'}
     * @memberof DefaultApiGetBotWebchat
     */
    readonly type: GetBotWebchatTypeEnum;
}
/**
 * Request parameters for getConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetConversationRequest
 */
export interface DefaultApiGetConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetConversation
     */
    readonly id: string;
}
/**
 * Request parameters for getEvent operation in DefaultApi.
 * @export
 * @interface DefaultApiGetEventRequest
 */
export interface DefaultApiGetEventRequest {
    /**
     * Event id
     * @type {string}
     * @memberof DefaultApiGetEvent
     */
    readonly id: string;
}
/**
 * Request parameters for getFile operation in DefaultApi.
 * @export
 * @interface DefaultApiGetFileRequest
 */
export interface DefaultApiGetFileRequest {
    /**
     * File ID
     * @type {string}
     * @memberof DefaultApiGetFile
     */
    readonly id: string;
}
/**
 * Request parameters for getIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationRequest
 */
export interface DefaultApiGetIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getIntegrationByName operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationByNameRequest
 */
export interface DefaultApiGetIntegrationByNameRequest {
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiGetIntegrationByName
     */
    readonly name: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiGetIntegrationByName
     */
    readonly version: string;
}
/**
 * Request parameters for getIntegrationLogs operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIntegrationLogsRequest
 */
export interface DefaultApiGetIntegrationLogsRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly id: string;
    /**
     * Beginning of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly timeStart: string;
    /**
     * End of the time range to get logs from
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly timeEnd: string;
    /**
     * Token to get the next page of logs
     * @type {string}
     * @memberof DefaultApiGetIntegrationLogs
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for getMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMessageRequest
 */
export interface DefaultApiGetMessageRequest {
    /**
     * Id of the Message
     * @type {string}
     * @memberof DefaultApiGetMessage
     */
    readonly id: string;
}
/**
 * Request parameters for getOrCreateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateConversationRequest
 */
export interface DefaultApiGetOrCreateConversationRequest {
    /**
     * Conversation data
     * @type {GetOrCreateConversationBody}
     * @memberof DefaultApiGetOrCreateConversation
     */
    readonly getOrCreateConversationBody?: GetOrCreateConversationBody;
}
/**
 * Request parameters for getOrCreateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateMessageRequest
 */
export interface DefaultApiGetOrCreateMessageRequest {
    /**
     * Message data
     * @type {GetOrCreateMessageBody}
     * @memberof DefaultApiGetOrCreateMessage
     */
    readonly getOrCreateMessageBody?: GetOrCreateMessageBody;
}
/**
 * Request parameters for getOrCreateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateUserRequest
 */
export interface DefaultApiGetOrCreateUserRequest {
    /**
     * User data
     * @type {GetOrCreateUserBody}
     * @memberof DefaultApiGetOrCreateUser
     */
    readonly getOrCreateUserBody?: GetOrCreateUserBody;
}
/**
 * Request parameters for getParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiGetParticipantRequest
 */
export interface DefaultApiGetParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for getPublicIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPublicIntegrationRequest
 */
export interface DefaultApiGetPublicIntegrationRequest {
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiGetPublicIntegration
     */
    readonly name: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiGetPublicIntegration
     */
    readonly version: string;
}
/**
 * Request parameters for getPublicIntegrationById operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPublicIntegrationByIdRequest
 */
export interface DefaultApiGetPublicIntegrationByIdRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiGetPublicIntegrationById
     */
    readonly id: string;
}
/**
 * Request parameters for getState operation in DefaultApi.
 * @export
 * @interface DefaultApiGetStateRequest
 */
export interface DefaultApiGetStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration'}
     * @memberof DefaultApiGetState
     */
    readonly type: GetStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiGetState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiGetState
     */
    readonly name: string;
}
/**
 * Request parameters for getUsage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUsageRequest
 */
export interface DefaultApiGetUsageRequest {
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiGetUsage
     */
    readonly type: GetUsageTypeEnum;
    /**
     * ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @type {string}
     * @memberof DefaultApiGetUsage
     */
    readonly id: string;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiGetUsage
     */
    readonly period?: string;
}
/**
 * Request parameters for getUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUserRequest
 */
export interface DefaultApiGetUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiGetUser
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiGetWorkspaceRequest
 */
export interface DefaultApiGetWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetWorkspace
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkspaceBillingDetails operation in DefaultApi.
 * @export
 * @interface DefaultApiGetWorkspaceBillingDetailsRequest
 */
export interface DefaultApiGetWorkspaceBillingDetailsRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetWorkspaceBillingDetails
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkspaceQuota operation in DefaultApi.
 * @export
 * @interface DefaultApiGetWorkspaceQuotaRequest
 */
export interface DefaultApiGetWorkspaceQuotaRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly type: GetWorkspaceQuotaTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiGetWorkspaceQuota
     */
    readonly period?: string;
}
/**
 * Request parameters for introspect operation in DefaultApi.
 * @export
 * @interface DefaultApiIntrospectRequest
 */
export interface DefaultApiIntrospectRequest {
    /**
     *
     * @type {IntrospectBody}
     * @memberof DefaultApiIntrospect
     */
    readonly introspectBody?: IntrospectBody;
}
/**
 * Request parameters for listBotIssueEvents operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotIssueEventsRequest
 */
export interface DefaultApiListBotIssueEventsRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListBotIssueEvents
     */
    readonly id: string;
    /**
     * Issue ID
     * @type {string}
     * @memberof DefaultApiListBotIssueEvents
     */
    readonly issueId: string;
}
/**
 * Request parameters for listBotIssues operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotIssuesRequest
 */
export interface DefaultApiListBotIssuesRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListBotIssues
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListBotIssues
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listBots operation in DefaultApi.
 * @export
 * @interface DefaultApiListBotsRequest
 */
export interface DefaultApiListBotsRequest {
    /**
     * If true, only dev bots are returned. Otherwise, only production bots are returned.
     * @type {boolean}
     * @memberof DefaultApiListBots
     */
    readonly dev?: boolean;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListBots
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listConversations operation in DefaultApi.
 * @export
 * @interface DefaultApiListConversationsRequest
 */
export interface DefaultApiListConversationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListConversations
     */
    readonly nextToken?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListConversations
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Filter by participant ids
     * @type {Array<string>}
     * @memberof DefaultApiListConversations
     */
    readonly participantIds?: Array<string>;
}
/**
 * Request parameters for listEvents operation in DefaultApi.
 * @export
 * @interface DefaultApiListEventsRequest
 */
export interface DefaultApiListEventsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly nextToken?: string;
    /**
     * Filter by event type
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly type?: string;
    /**
     * Filter by conversation id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly conversationId?: string;
    /**
     * Filter by user id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly userId?: string;
    /**
     * Filter by message id
     * @type {string}
     * @memberof DefaultApiListEvents
     */
    readonly messageId?: string;
}
/**
 * Request parameters for listFiles operation in DefaultApi.
 * @export
 * @interface DefaultApiListFilesRequest
 */
export interface DefaultApiListFilesRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiListFiles
     */
    readonly botId: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListFiles
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listIntegrations operation in DefaultApi.
 * @export
 * @interface DefaultApiListIntegrationsRequest
 */
export interface DefaultApiListIntegrationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly nextToken?: string;
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly name?: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiListIntegrations
     */
    readonly version?: string;
    /**
     * If true, only dev integrations are returned. Otherwise, only production integrations are returned.
     * @type {boolean}
     * @memberof DefaultApiListIntegrations
     */
    readonly dev?: boolean;
}
/**
 * Request parameters for listMessages operation in DefaultApi.
 * @export
 * @interface DefaultApiListMessagesRequest
 */
export interface DefaultApiListMessagesRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListMessages
     */
    readonly nextToken?: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListMessages
     */
    readonly conversationId?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListMessages
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listParticipants operation in DefaultApi.
 * @export
 * @interface DefaultApiListParticipantsRequest
 */
export interface DefaultApiListParticipantsRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listPublicIntegrations operation in DefaultApi.
 * @export
 * @interface DefaultApiListPublicIntegrationsRequest
 */
export interface DefaultApiListPublicIntegrationsRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly nextToken?: string;
    /**
     * Integration Name
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly name?: string;
    /**
     * Integration version. Either a semver version or tag \&quot;latest\&quot;
     * @type {string}
     * @memberof DefaultApiListPublicIntegrations
     */
    readonly version?: string;
}
/**
 * Request parameters for listUsageHistory operation in DefaultApi.
 * @export
 * @interface DefaultApiListUsageHistoryRequest
 */
export interface DefaultApiListUsageHistoryRequest {
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiListUsageHistory
     */
    readonly type: ListUsageHistoryTypeEnum;
    /**
     * ID of a bot or a workspace, depending on the \&quot;type\&quot; parameter
     * @type {string}
     * @memberof DefaultApiListUsageHistory
     */
    readonly id: string;
}
/**
 * Request parameters for listUsers operation in DefaultApi.
 * @export
 * @interface DefaultApiListUsersRequest
 */
export interface DefaultApiListUsersRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListUsers
     */
    readonly nextToken?: string;
    /**
     * Filter by conversation id. This will return all users that have participated in the conversation.
     * @type {string}
     * @memberof DefaultApiListUsers
     */
    readonly conversationId?: string;
    /**
     * Filter by tags
     * @type {{ [key: string]: string; }}
     * @memberof DefaultApiListUsers
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Request parameters for listWorkspaceInvoices operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceInvoicesRequest
 */
export interface DefaultApiListWorkspaceInvoicesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceInvoices
     */
    readonly id: string;
}
/**
 * Request parameters for listWorkspaceMembers operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceMembersRequest
 */
export interface DefaultApiListWorkspaceMembersRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListWorkspaceMembers
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listWorkspaceQuotas operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceQuotasRequest
 */
export interface DefaultApiListWorkspaceQuotasRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceQuotas
     */
    readonly id: string;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiListWorkspaceQuotas
     */
    readonly period?: string;
}
/**
 * Request parameters for listWorkspaceUsages operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspaceUsagesRequest
 */
export interface DefaultApiListWorkspaceUsagesRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly id: string;
    /**
     * Type of usage
     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly type: ListWorkspaceUsagesTypeEnum;
    /**
     * Period to get
     * @type {string}
     * @memberof DefaultApiListWorkspaceUsages
     */
    readonly period?: string;
}
/**
 * Request parameters for listWorkspaces operation in DefaultApi.
 * @export
 * @interface DefaultApiListWorkspacesRequest
 */
export interface DefaultApiListWorkspacesRequest {
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListWorkspaces
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for patchState operation in DefaultApi.
 * @export
 * @interface DefaultApiPatchStateRequest
 */
export interface DefaultApiPatchStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration'}
     * @memberof DefaultApiPatchState
     */
    readonly type: PatchStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiPatchState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiPatchState
     */
    readonly name: string;
    /**
     * State content
     * @type {PatchStateBody}
     * @memberof DefaultApiPatchState
     */
    readonly patchStateBody?: PatchStateBody;
}
/**
 * Request parameters for removeParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiRemoveParticipantRequest
 */
export interface DefaultApiRemoveParticipantRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for setState operation in DefaultApi.
 * @export
 * @interface DefaultApiSetStateRequest
 */
export interface DefaultApiSetStateRequest {
    /**
     * State type
     * @type {'conversation' | 'user' | 'bot' | 'integration'}
     * @memberof DefaultApiSetState
     */
    readonly type: SetStateTypeEnum;
    /**
     * State id
     * @type {string}
     * @memberof DefaultApiSetState
     */
    readonly id: string;
    /**
     * State name
     * @type {string}
     * @memberof DefaultApiSetState
     */
    readonly name: string;
    /**
     * State content
     * @type {SetStateBody}
     * @memberof DefaultApiSetState
     */
    readonly setStateBody?: SetStateBody;
}
/**
 * Request parameters for setWorkspacePaymentMethod operation in DefaultApi.
 * @export
 * @interface DefaultApiSetWorkspacePaymentMethodRequest
 */
export interface DefaultApiSetWorkspacePaymentMethodRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiSetWorkspacePaymentMethod
     */
    readonly id: string;
    /**
     *
     * @type {SetWorkspacePaymentMethodBody}
     * @memberof DefaultApiSetWorkspacePaymentMethod
     */
    readonly setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody;
}
/**
 * Request parameters for transferBot operation in DefaultApi.
 * @export
 * @interface DefaultApiTransferBotRequest
 */
export interface DefaultApiTransferBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiTransferBot
     */
    readonly id: string;
    /**
     * Bot transfer request
     * @type {TransferBotBody}
     * @memberof DefaultApiTransferBot
     */
    readonly transferBotBody?: TransferBotBody;
}
/**
 * Request parameters for updateBot operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateBotRequest
 */
export interface DefaultApiUpdateBotRequest {
    /**
     * Bot ID
     * @type {string}
     * @memberof DefaultApiUpdateBot
     */
    readonly id: string;
    /**
     * Bot metadata
     * @type {UpdateBotBody}
     * @memberof DefaultApiUpdateBot
     */
    readonly updateBotBody?: UpdateBotBody;
}
/**
 * Request parameters for updateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateConversationRequest
 */
export interface DefaultApiUpdateConversationRequest {
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiUpdateConversation
     */
    readonly id: string;
    /**
     * Conversation data
     * @type {UpdateConversationBody}
     * @memberof DefaultApiUpdateConversation
     */
    readonly updateConversationBody?: UpdateConversationBody;
}
/**
 * Request parameters for updateIntegration operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateIntegrationRequest
 */
export interface DefaultApiUpdateIntegrationRequest {
    /**
     * Integration ID
     * @type {string}
     * @memberof DefaultApiUpdateIntegration
     */
    readonly id: string;
    /**
     * Integration
     * @type {UpdateIntegrationBody}
     * @memberof DefaultApiUpdateIntegration
     */
    readonly updateIntegrationBody?: UpdateIntegrationBody;
}
/**
 * Request parameters for updateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateMessageRequest
 */
export interface DefaultApiUpdateMessageRequest {
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiUpdateMessage
     */
    readonly id: string;
    /**
     * Message data
     * @type {UpdateMessageBody}
     * @memberof DefaultApiUpdateMessage
     */
    readonly updateMessageBody?: UpdateMessageBody;
}
/**
 * Request parameters for updateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateUserRequest
 */
export interface DefaultApiUpdateUserRequest {
    /**
     * User ID
     * @type {string}
     * @memberof DefaultApiUpdateUser
     */
    readonly id: string;
    /**
     * User data
     * @type {UpdateUserBody}
     * @memberof DefaultApiUpdateUser
     */
    readonly updateUserBody?: UpdateUserBody;
}
/**
 * Request parameters for updateWorkspace operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateWorkspaceRequest
 */
export interface DefaultApiUpdateWorkspaceRequest {
    /**
     * Workspace ID
     * @type {string}
     * @memberof DefaultApiUpdateWorkspace
     */
    readonly id: string;
    /**
     * Workspace metadata
     * @type {UpdateWorkspaceBody}
     * @memberof DefaultApiUpdateWorkspace
     */
    readonly updateWorkspaceBody?: UpdateWorkspaceBody;
}
/**
 * Request parameters for updateWorkspaceMember operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateWorkspaceMemberRequest
 */
export interface DefaultApiUpdateWorkspaceMemberRequest {
    /**
     * Workspace member ID
     * @type {string}
     * @memberof DefaultApiUpdateWorkspaceMember
     */
    readonly id: string;
    /**
     * Workspace member metadata
     * @type {UpdateWorkspaceMemberBody}
     * @memberof DefaultApiUpdateWorkspaceMember
     */
    readonly updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddParticipantResponse, any>>;
    /**
     * Break down workspace usage by bot
     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BreakDownWorkspaceUsageByBotResponse, any>>;
    /**
     * Call an action
     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    callAction(requestParameters?: DefaultApiCallActionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CallActionResponse, any>>;
    /**
     * Change AI Spend quota
     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    changeAISpendQuota(requestParameters?: DefaultApiChangeAISpendQuotaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Change workspace billing plan
     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChangeWorkspacePlanResponse, any>>;
    /**
     * Charge unpaid invoices of a workspace.
     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChargeWorkspaceUnpaidInvoicesResponse, any>>;
    /**
     * An integration can call this endpoint to configure itself
     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    configureIntegration(requestParameters?: DefaultApiConfigureIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Create bot
     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createBot(requestParameters?: DefaultApiCreateBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateBotResponse, any>>;
    /**
     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createConversation(requestParameters?: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateConversationResponse, any>>;
    /**
     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createEvent(requestParameters?: DefaultApiCreateEventRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateEventResponse, any>>;
    /**
     * Create File
     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createFile(requestParameters?: DefaultApiCreateFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateFileResponse, any>>;
    /**
     * Create integration
     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createIntegration(requestParameters?: DefaultApiCreateIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateIntegrationResponse, any>>;
    /**
     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createMessage(requestParameters?: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateMessageResponse, any>>;
    /**
     * Create a PAT
     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createPersonalAccessToken(requestParameters?: DefaultApiCreatePersonalAccessTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePersonalAccessTokenResponse, any>>;
    /**
     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUserResponse, any>>;
    /**
     * Create workspace
     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createWorkspace(requestParameters?: DefaultApiCreateWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkspaceResponse, any>>;
    /**
     * Add a member to the workspace
     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createWorkspaceMember(requestParameters?: DefaultApiCreateWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWorkspaceMemberResponse, any>>;
    /**
     * Delete bot
     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete Bot Issue
     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete File
     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete integration
     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete a PAT
     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Delete workspace
     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Remove a member of a workspace
     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Download File
     * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get details of the account authenticating with this endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAccount(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAccountResponse, any>>;
    /**
     * Get the audit records of a workspace, sorted from most recent to oldest.
     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAuditRecordsResponse, any>>;
    /**
     * Get bot details
     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotResponse, any>>;
    /**
     * Get bot analytics
     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotAnalyticsResponse, any>>;
    /**
     * Get bot logs
     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotLogsResponse, any>>;
    /**
     * Get the webchat code/URL for a bot
     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBotWebchatResponse, any>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetConversationResponse, any>>;
    /**
     * Retrieves the [Event](#schema_event) object for a valid identifiers.
     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEventResponse, any>>;
    /**
     * Get File
     * @param {DefaultApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getFile(requestParameters: DefaultApiGetFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFileResponse, any>>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationResponse, any>>;
    /**
     * Get integration
     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationByNameResponse, any>>;
    /**
     * Get integration logs
     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetIntegrationLogsResponse, any>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMessageResponse, any>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateConversation(requestParameters?: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateConversationResponse, any>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateMessage(requestParameters?: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateMessageResponse, any>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.
     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateUser(requestParameters?: DefaultApiGetOrCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateUserResponse, any>>;
    /**
     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetParticipantResponse, any>>;
    /**
     * Get public integration by name and version
     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPublicIntegrationResponse, any>>;
    /**
     * Get public integration by Id
     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPublicIntegrationByIdResponse, any>>;
    /**
     * Retrieves the [State](#schema_state) object for a valid identifiers.
     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetStateResponse, any>>;
    /**
     * Get usage
     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUsageResponse, any>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserResponse, any>>;
    /**
     * Get workspace details
     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkspaceResponse, any>>;
    /**
     * Get billing details of workspace
     * @param {DefaultApiGetWorkspaceBillingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWorkspaceBillingDetails(requestParameters: DefaultApiGetWorkspaceBillingDetailsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkspaceBillingDetailsResponse, any>>;
    /**
     * Get workspace quota
     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWorkspaceQuotaResponse, any>>;
    /**
     * Introspect the API
     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    introspect(requestParameters?: DefaultApiIntrospectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IntrospectResponse, any>>;
    /**
     * List Events for a Bot Issue
     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotIssueEventsResponse, any>>;
    /**
     * List Bot Issues
     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotIssuesResponse, any>>;
    /**
     * List bots
     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listBots(requestParameters?: DefaultApiListBotsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBotsResponse, any>>;
    /**
     * Retrieves a list of [Conversation](#schema_conversation) you’ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listConversations(requestParameters?: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListConversationsResponse, any>>;
    /**
     * Retreives a list of [Event](#schema_event) you’ve previously created. The events are returned in sorted order, with the most recent appearing first.
     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listEvents(requestParameters?: DefaultApiListEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListEventsResponse, any>>;
    /**
     * List Files
     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFilesResponse, any>>;
    /**
     * List integrations
     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listIntegrations(requestParameters?: DefaultApiListIntegrationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListIntegrationsResponse, any>>;
    /**
     * Retrieves a list of [Messages](#schema_message) you’ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listMessages(requestParameters?: DefaultApiListMessagesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListMessagesResponse, any>>;
    /**
     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListParticipantsResponse, any>>;
    /**
     * List PATs (Personal Access Tokens) of account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPersonalAccessTokensResponse, any>>;
    /**
     * List public integration
     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listPublicIntegrations(requestParameters?: DefaultApiListPublicIntegrationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPublicIntegrationsResponse, any>>;
    /**
     * Get usage history
     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListUsageHistoryResponse, any>>;
    /**
     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).
     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listUsers(requestParameters?: DefaultApiListUsersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListUsersResponse, any>>;
    /**
     * List invoices billed to workspace
     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceInvoicesResponse, any>>;
    /**
     * Lists all the members in a workspace
     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceMembers(requestParameters?: DefaultApiListWorkspaceMembersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceMembersResponse, any>>;
    /**
     * List workspace quotas
     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceQuotasResponse, any>>;
    /**
     * List workspace usages
     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspaceUsagesResponse, any>>;
    /**
     * List workspaces the user has access to
     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listWorkspaces(requestParameters?: DefaultApiListWorkspacesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkspacesResponse, any>>;
    /**
     * Updates the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PatchStateResponse, any>>;
    /**
     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.
     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetStateResponse, any>>;
    /**
     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.
     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetWorkspacePaymentMethodResponse, any>>;
    /**
     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.
     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Update bot
     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateBotResponse, any>>;
    /**
     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateConversationResponse, any>>;
    /**
     * Update integration
     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateIntegrationResponse, any>>;
    /**
     * Update a message
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateMessageResponse, any>>;
    /**
     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateUserResponse, any>>;
    /**
     * Update workspace
     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkspaceResponse1, any>>;
    /**
     * Update the member of a workspace
     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateWorkspaceMemberResponse, any>>;
}
/**
 * @export
 */
export declare const BreakDownWorkspaceUsageByBotTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type BreakDownWorkspaceUsageByBotTypeEnum = typeof BreakDownWorkspaceUsageByBotTypeEnum[keyof typeof BreakDownWorkspaceUsageByBotTypeEnum];
/**
 * @export
 */
export declare const GetBotWebchatTypeEnum: {
    readonly Preconfigured: "preconfigured";
    readonly Configurable: "configurable";
    readonly Fullscreen: "fullscreen";
    readonly SharableUrl: "sharableUrl";
};
export type GetBotWebchatTypeEnum = typeof GetBotWebchatTypeEnum[keyof typeof GetBotWebchatTypeEnum];
/**
 * @export
 */
export declare const GetStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
};
export type GetStateTypeEnum = typeof GetStateTypeEnum[keyof typeof GetStateTypeEnum];
/**
 * @export
 */
export declare const GetUsageTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetUsageTypeEnum = typeof GetUsageTypeEnum[keyof typeof GetUsageTypeEnum];
/**
 * @export
 */
export declare const GetWorkspaceQuotaTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type GetWorkspaceQuotaTypeEnum = typeof GetWorkspaceQuotaTypeEnum[keyof typeof GetWorkspaceQuotaTypeEnum];
/**
 * @export
 */
export declare const ListUsageHistoryTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListUsageHistoryTypeEnum = typeof ListUsageHistoryTypeEnum[keyof typeof ListUsageHistoryTypeEnum];
/**
 * @export
 */
export declare const ListWorkspaceUsagesTypeEnum: {
    readonly InvocationTimeout: "invocation_timeout";
    readonly InvocationCalls: "invocation_calls";
    readonly StorageCount: "storage_count";
    readonly BotCount: "bot_count";
    readonly KnowledgebaseVectorStorage: "knowledgebase_vector_storage";
    readonly WorkspaceRatelimit: "workspace_ratelimit";
    readonly TableRowCount: "table_row_count";
    readonly WorkspaceMemberCount: "workspace_member_count";
    readonly IntegrationsOwnedCount: "integrations_owned_count";
    readonly AiSpend: "ai_spend";
    readonly OpenaiSpend: "openai_spend";
    readonly BingSearchSpend: "bing_search_spend";
    readonly AlwaysAlive: "always_alive";
};
export type ListWorkspaceUsagesTypeEnum = typeof ListWorkspaceUsagesTypeEnum[keyof typeof ListWorkspaceUsagesTypeEnum];
/**
 * @export
 */
export declare const PatchStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
};
export type PatchStateTypeEnum = typeof PatchStateTypeEnum[keyof typeof PatchStateTypeEnum];
/**
 * @export
 */
export declare const SetStateTypeEnum: {
    readonly Conversation: "conversation";
    readonly User: "user";
    readonly Bot: "bot";
    readonly Integration: "integration";
};
export type SetStateTypeEnum = typeof SetStateTypeEnum[keyof typeof SetStateTypeEnum];

{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config.ts", "../src/gen/client.ts", "../src/gen/api.ts", "../src/gen/base.ts", "../src/gen/common.ts", "../src/gen/errors.ts"],
  "sourcesContent": ["import axios from 'axios'\nimport { getClientConfig, ClientProps, ClientConfig } from './config'\nimport { ApiClient as AutoGeneratedClient } from './gen/client'\n\nexport * as axios from 'axios'\nexport type {\n  Message,\n  Conversation,\n  User,\n  State,\n  Event,\n  ModelFile as File,\n  Bot,\n  Integration,\n  Issue,\n  IssueEvent,\n} from './gen'\nexport * from './gen/errors'\n\nconst _100mb = 100 * 1024 * 1024\nconst maxBodyLength = _100mb\nconst maxContentLength = _100mb\n\nexport class Client extends AutoGeneratedClient {\n  public readonly config: Readonly<ClientConfig>\n\n  public constructor(clientProps: ClientProps = {}) {\n    const clientConfig = getClientConfig(clientProps)\n    const { apiUrl, headers, withCredentials, timeout } = clientConfig\n\n    const axiosClient = axios.create({ headers, withCredentials, timeout, maxBodyLength, maxContentLength })\n\n    super(undefined, apiUrl, axiosClient)\n\n    this.config = clientConfig\n  }\n}\n", "import { isBrowser, isNode } from 'browser-or-node'\n\nconst defaultApiUrl = 'https://api.botpress.cloud'\nconst defaultTimeout = 60_000\n\nconst apiUrlEnvName = 'BP_API_URL'\nconst botIdEnvName = 'BP_BOT_ID'\nconst integrationIdEnvName = 'BP_INTEGRATION_ID'\nconst workspaceIdEnvName = 'BP_WORKSPACE_ID'\nconst tokenEnvName = 'BP_TOKEN'\n\ntype Headers = Record<string, string | string[]>\n\nexport type ClientProps = {\n  integrationId?: string\n  workspaceId?: string\n  botId?: string\n  token?: string\n  apiUrl?: string\n  timeout?: number\n  headers?: Headers\n}\n\nexport type ClientConfig = {\n  apiUrl: string\n  headers: Headers\n  withCredentials: boolean\n  timeout: number\n}\n\nexport function getClientConfig(clientProps: ClientProps): ClientConfig {\n  const props = readEnvConfig(clientProps)\n\n  let headers: Record<string, string | string[]> = {}\n\n  if (props.workspaceId) {\n    headers['x-workspace-id'] = props.workspaceId\n  }\n\n  if (props.botId) {\n    headers['x-bot-id'] = props.botId\n  }\n\n  if (props.integrationId) {\n    headers['x-integration-id'] = props.integrationId\n  }\n\n  if (props.token) {\n    headers['Authorization'] = `Bearer ${props.token}`\n  }\n\n  headers = {\n    ...headers,\n    ...props.headers,\n  }\n\n  const apiUrl = props.apiUrl ?? defaultApiUrl\n  const timeout = props.timeout ?? defaultTimeout\n\n  return {\n    apiUrl,\n    timeout,\n    withCredentials: isBrowser,\n    headers,\n  }\n}\n\nfunction readEnvConfig(props: ClientProps): ClientProps {\n  if (isBrowser) {\n    return getBrowserConfig(props)\n  }\n\n  if (isNode) {\n    return getNodeConfig(props)\n  }\n\n  return props\n}\n\nfunction getNodeConfig(props: ClientProps): ClientProps {\n  const config: ClientProps = {\n    ...props,\n    apiUrl: props.apiUrl ?? process.env[apiUrlEnvName],\n    botId: props.botId ?? process.env[botIdEnvName],\n    integrationId: props.integrationId ?? process.env[integrationIdEnvName],\n    workspaceId: props.workspaceId ?? process.env[workspaceIdEnvName],\n  }\n\n  const token = config.token ?? process.env[tokenEnvName]\n\n  if (token) {\n    config.token = token\n  }\n\n  return config\n}\n\nfunction getBrowserConfig(props: ClientProps): ClientProps {\n  return props\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport axios, { AxiosInstance } from 'axios'\nimport type { Merge, Except } from 'type-fest'\nimport {\n  DefaultApi,\n  Configuration,\n\tDefaultApiCreateConversationRequest,\n\tDefaultApiGetConversationRequest,\n\tDefaultApiListConversationsRequest,\n\tDefaultApiGetOrCreateConversationRequest,\n\tDefaultApiUpdateConversationRequest,\n\tDefaultApiDeleteConversationRequest,\n\tDefaultApiListParticipantsRequest,\n\tDefaultApiAddParticipantRequest,\n\tDefaultApiGetParticipantRequest,\n\tDefaultApiRemoveParticipantRequest,\n\tDefaultApiCreateEventRequest,\n\tDefaultApiGetEventRequest,\n\tDefaultApiListEventsRequest,\n\tDefaultApiCreateMessageRequest,\n\tDefaultApiGetOrCreateMessageRequest,\n\tDefaultApiGetMessageRequest,\n\tDefaultApiUpdateMessageRequest,\n\tDefaultApiListMessagesRequest,\n\tDefaultApiDeleteMessageRequest,\n\tDefaultApiCreateUserRequest,\n\tDefaultApiGetUserRequest,\n\tDefaultApiListUsersRequest,\n\tDefaultApiGetOrCreateUserRequest,\n\tDefaultApiUpdateUserRequest,\n\tDefaultApiDeleteUserRequest,\n\tDefaultApiGetStateRequest,\n\tDefaultApiSetStateRequest,\n\tDefaultApiPatchStateRequest,\n\tDefaultApiCallActionRequest,\n\tDefaultApiConfigureIntegrationRequest,\n\tDefaultApiCreatePersonalAccessTokenRequest,\n\tDefaultApiDeletePersonalAccessTokenRequest,\n\tDefaultApiListPublicIntegrationsRequest,\n\tDefaultApiGetPublicIntegrationByIdRequest,\n\tDefaultApiGetPublicIntegrationRequest,\n\tDefaultApiCreateBotRequest,\n\tDefaultApiUpdateBotRequest,\n\tDefaultApiTransferBotRequest,\n\tDefaultApiListBotsRequest,\n\tDefaultApiGetBotRequest,\n\tDefaultApiDeleteBotRequest,\n\tDefaultApiGetBotLogsRequest,\n\tDefaultApiGetBotWebchatRequest,\n\tDefaultApiGetBotAnalyticsRequest,\n\tDefaultApiListBotIssuesRequest,\n\tDefaultApiDeleteBotIssueRequest,\n\tDefaultApiListBotIssueEventsRequest,\n\tDefaultApiGetWorkspaceBillingDetailsRequest,\n\tDefaultApiSetWorkspacePaymentMethodRequest,\n\tDefaultApiListWorkspaceInvoicesRequest,\n\tDefaultApiChargeWorkspaceUnpaidInvoicesRequest,\n\tDefaultApiCreateWorkspaceRequest,\n\tDefaultApiGetWorkspaceRequest,\n\tDefaultApiListWorkspaceUsagesRequest,\n\tDefaultApiBreakDownWorkspaceUsageByBotRequest,\n\tDefaultApiGetWorkspaceQuotaRequest,\n\tDefaultApiListWorkspaceQuotasRequest,\n\tDefaultApiUpdateWorkspaceRequest,\n\tDefaultApiListWorkspacesRequest,\n\tDefaultApiChangeWorkspacePlanRequest,\n\tDefaultApiDeleteWorkspaceRequest,\n\tDefaultApiGetAuditRecordsRequest,\n\tDefaultApiListWorkspaceMembersRequest,\n\tDefaultApiDeleteWorkspaceMemberRequest,\n\tDefaultApiCreateWorkspaceMemberRequest,\n\tDefaultApiUpdateWorkspaceMemberRequest,\n\tDefaultApiCreateIntegrationRequest,\n\tDefaultApiUpdateIntegrationRequest,\n\tDefaultApiListIntegrationsRequest,\n\tDefaultApiGetIntegrationRequest,\n\tDefaultApiGetIntegrationLogsRequest,\n\tDefaultApiGetIntegrationByNameRequest,\n\tDefaultApiDeleteIntegrationRequest,\n\tDefaultApiGetUsageRequest,\n\tDefaultApiListUsageHistoryRequest,\n\tDefaultApiChangeAISpendQuotaRequest,\n\tDefaultApiIntrospectRequest,\n\tDefaultApiCreateFileRequest,\n\tDefaultApiGetFileRequest,\n\tDefaultApiDownloadFileRequest,\n\tDefaultApiDeleteFileRequest,\n\tDefaultApiListFilesRequest,\n} from '.'\nimport { errorFrom } from './errors'\n\nexport class ApiClient {\n  private _innerClient: DefaultApi\n  public constructor(configuration?: Configuration, basePath?: string, axiosInstance?: AxiosInstance) {\n    this._innerClient = new DefaultApi(configuration, basePath, axiosInstance)\n  }\n\tpublic createConversation = (createConversationBody: CreateConversationProps) => this._innerClient.createConversation({ createConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getConversation = (props: GetConversationProps) => this._innerClient.getConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listConversations = (props: ListConversationsProps) => this._innerClient.listConversations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateConversation = (getOrCreateConversationBody: GetOrCreateConversationProps) => this._innerClient.getOrCreateConversation({ getOrCreateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateConversation = ({ id, ...updateConversationBody }: UpdateConversationProps) => this._innerClient.updateConversation({ id, updateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteConversation = (props: DeleteConversationProps) => this._innerClient.deleteConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listParticipants = (props: ListParticipantsProps) => this._innerClient.listParticipants(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic addParticipant = ({ id, ...addParticipantBody }: AddParticipantProps) => this._innerClient.addParticipant({ id, addParticipantBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getParticipant = (props: GetParticipantProps) => this._innerClient.getParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic removeParticipant = (props: RemoveParticipantProps) => this._innerClient.removeParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createEvent = (createEventBody: CreateEventProps) => this._innerClient.createEvent({ createEventBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getEvent = (props: GetEventProps) => this._innerClient.getEvent(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listEvents = (props: ListEventsProps) => this._innerClient.listEvents(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createMessage = (createMessageBody: CreateMessageProps) => this._innerClient.createMessage({ createMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateMessage = (getOrCreateMessageBody: GetOrCreateMessageProps) => this._innerClient.getOrCreateMessage({ getOrCreateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getMessage = (props: GetMessageProps) => this._innerClient.getMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateMessage = ({ id, ...updateMessageBody }: UpdateMessageProps) => this._innerClient.updateMessage({ id, updateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listMessages = (props: ListMessagesProps) => this._innerClient.listMessages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteMessage = (props: DeleteMessageProps) => this._innerClient.deleteMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createUser = (createUserBody: CreateUserProps) => this._innerClient.createUser({ createUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUser = (props: GetUserProps) => this._innerClient.getUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listUsers = (props: ListUsersProps) => this._innerClient.listUsers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateUser = (getOrCreateUserBody: GetOrCreateUserProps) => this._innerClient.getOrCreateUser({ getOrCreateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateUser = ({ id, ...updateUserBody }: UpdateUserProps) => this._innerClient.updateUser({ id, updateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteUser = (props: DeleteUserProps) => this._innerClient.deleteUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getState = (props: GetStateProps) => this._innerClient.getState(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setState = ({ type, id, name, ...setStateBody }: SetStateProps) => this._innerClient.setState({ type, id, name, setStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic patchState = ({ type, id, name, ...patchStateBody }: PatchStateProps) => this._innerClient.patchState({ type, id, name, patchStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic callAction = (callActionBody: CallActionProps) => this._innerClient.callAction({ callActionBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic configureIntegration = (configureIntegrationBody: ConfigureIntegrationProps) => this._innerClient.configureIntegration({ configureIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAccount = () => this._innerClient.getAccount().then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listPersonalAccessTokens = () => this._innerClient.listPersonalAccessTokens().then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createPersonalAccessToken = (createPersonalAccessTokenBody: CreatePersonalAccessTokenProps) => this._innerClient.createPersonalAccessToken({ createPersonalAccessTokenBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deletePersonalAccessToken = (props: DeletePersonalAccessTokenProps) => this._innerClient.deletePersonalAccessToken(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listPublicIntegrations = (props: ListPublicIntegrationsProps) => this._innerClient.listPublicIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegrationById = (props: GetPublicIntegrationByIdProps) => this._innerClient.getPublicIntegrationById(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegration = (props: GetPublicIntegrationProps) => this._innerClient.getPublicIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createBot = (createBotBody: CreateBotProps) => this._innerClient.createBot({ createBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateBot = ({ id, ...updateBotBody }: UpdateBotProps) => this._innerClient.updateBot({ id, updateBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic transferBot = ({ id, ...transferBotBody }: TransferBotProps) => this._innerClient.transferBot({ id, transferBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBots = (props: ListBotsProps) => this._innerClient.listBots(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBot = (props: GetBotProps) => this._innerClient.getBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteBot = (props: DeleteBotProps) => this._innerClient.deleteBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotLogs = (props: GetBotLogsProps) => this._innerClient.getBotLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotWebchat = (props: GetBotWebchatProps) => this._innerClient.getBotWebchat(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotAnalytics = (props: GetBotAnalyticsProps) => this._innerClient.getBotAnalytics(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBotIssues = (props: ListBotIssuesProps) => this._innerClient.listBotIssues(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteBotIssue = (props: DeleteBotIssueProps) => this._innerClient.deleteBotIssue(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBotIssueEvents = (props: ListBotIssueEventsProps) => this._innerClient.listBotIssueEvents(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspaceBillingDetails = (props: GetWorkspaceBillingDetailsProps) => this._innerClient.getWorkspaceBillingDetails(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setWorkspacePaymentMethod = ({ id, ...setWorkspacePaymentMethodBody }: SetWorkspacePaymentMethodProps) => this._innerClient.setWorkspacePaymentMethod({ id, setWorkspacePaymentMethodBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceInvoices = (props: ListWorkspaceInvoicesProps) => this._innerClient.listWorkspaceInvoices(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic chargeWorkspaceUnpaidInvoices = ({ id, ...chargeWorkspaceUnpaidInvoicesBody }: ChargeWorkspaceUnpaidInvoicesProps) => this._innerClient.chargeWorkspaceUnpaidInvoices({ id, chargeWorkspaceUnpaidInvoicesBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createWorkspace = (createWorkspaceBody: CreateWorkspaceProps) => this._innerClient.createWorkspace({ createWorkspaceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspace = (props: GetWorkspaceProps) => this._innerClient.getWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceUsages = (props: ListWorkspaceUsagesProps) => this._innerClient.listWorkspaceUsages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic breakDownWorkspaceUsageByBot = (props: BreakDownWorkspaceUsageByBotProps) => this._innerClient.breakDownWorkspaceUsageByBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspaceQuota = (props: GetWorkspaceQuotaProps) => this._innerClient.getWorkspaceQuota(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceQuotas = (props: ListWorkspaceQuotasProps) => this._innerClient.listWorkspaceQuotas(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspace = ({ id, ...updateWorkspaceBody }: UpdateWorkspaceProps) => this._innerClient.updateWorkspace({ id, updateWorkspaceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaces = (props: ListWorkspacesProps) => this._innerClient.listWorkspaces(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic changeWorkspacePlan = ({ id, ...changeWorkspacePlanBody }: ChangeWorkspacePlanProps) => this._innerClient.changeWorkspacePlan({ id, changeWorkspacePlanBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteWorkspace = (props: DeleteWorkspaceProps) => this._innerClient.deleteWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getAuditRecords = (props: GetAuditRecordsProps) => this._innerClient.getAuditRecords(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceMembers = (props: ListWorkspaceMembersProps) => this._innerClient.listWorkspaceMembers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteWorkspaceMember = (props: DeleteWorkspaceMemberProps) => this._innerClient.deleteWorkspaceMember(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createWorkspaceMember = (createWorkspaceMemberBody: CreateWorkspaceMemberProps) => this._innerClient.createWorkspaceMember({ createWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspaceMember = ({ id, ...updateWorkspaceMemberBody }: UpdateWorkspaceMemberProps) => this._innerClient.updateWorkspaceMember({ id, updateWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createIntegration = (createIntegrationBody: CreateIntegrationProps) => this._innerClient.createIntegration({ createIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateIntegration = ({ id, ...updateIntegrationBody }: UpdateIntegrationProps) => this._innerClient.updateIntegration({ id, updateIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listIntegrations = (props: ListIntegrationsProps) => this._innerClient.listIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegration = (props: GetIntegrationProps) => this._innerClient.getIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationLogs = (props: GetIntegrationLogsProps) => this._innerClient.getIntegrationLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationByName = (props: GetIntegrationByNameProps) => this._innerClient.getIntegrationByName(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteIntegration = (props: DeleteIntegrationProps) => this._innerClient.deleteIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUsage = (props: GetUsageProps) => this._innerClient.getUsage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listUsageHistory = (props: ListUsageHistoryProps) => this._innerClient.listUsageHistory(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic changeAISpendQuota = (changeAISpendQuotaBody: ChangeAISpendQuotaProps) => this._innerClient.changeAISpendQuota({ changeAISpendQuotaBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic introspect = (introspectBody: IntrospectProps) => this._innerClient.introspect({ introspectBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createFile = (createFileBody: CreateFileProps) => this._innerClient.createFile({ createFileBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getFile = (props: GetFileProps) => this._innerClient.getFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic downloadFile = (props: DownloadFileProps) => this._innerClient.downloadFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteFile = (props: DeleteFileProps) => this._innerClient.deleteFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listFiles = (props: ListFilesProps) => this._innerClient.listFiles(props).then((res) => res.data).catch((e) => { throw getError(e) })\n}\n\nexport type CreateConversationProps = Merge<\n  Except<DefaultApiCreateConversationRequest, 'createConversationBody'>,\n  NonNullable<DefaultApiCreateConversationRequest['createConversationBody']>\n>\n\nexport type GetConversationProps = Merge<DefaultApiGetConversationRequest, {}>\n\nexport type ListConversationsProps = Merge<DefaultApiListConversationsRequest, {}>\n\nexport type GetOrCreateConversationProps = Merge<\n  Except<DefaultApiGetOrCreateConversationRequest, 'getOrCreateConversationBody'>,\n  NonNullable<DefaultApiGetOrCreateConversationRequest['getOrCreateConversationBody']>\n>\n\nexport type UpdateConversationProps = Merge<\n  Except<DefaultApiUpdateConversationRequest, 'updateConversationBody'>,\n  NonNullable<DefaultApiUpdateConversationRequest['updateConversationBody']>\n>\n\nexport type DeleteConversationProps = Merge<DefaultApiDeleteConversationRequest, {}>\n\nexport type ListParticipantsProps = Merge<DefaultApiListParticipantsRequest, {}>\n\nexport type AddParticipantProps = Merge<\n  Except<DefaultApiAddParticipantRequest, 'addParticipantBody'>,\n  NonNullable<DefaultApiAddParticipantRequest['addParticipantBody']>\n>\n\nexport type GetParticipantProps = Merge<DefaultApiGetParticipantRequest, {}>\n\nexport type RemoveParticipantProps = Merge<DefaultApiRemoveParticipantRequest, {}>\n\nexport type CreateEventProps = Merge<\n  Except<DefaultApiCreateEventRequest, 'createEventBody'>,\n  NonNullable<DefaultApiCreateEventRequest['createEventBody']>\n>\n\nexport type GetEventProps = Merge<DefaultApiGetEventRequest, {}>\n\nexport type ListEventsProps = Merge<DefaultApiListEventsRequest, {}>\n\nexport type CreateMessageProps = Merge<\n  Except<DefaultApiCreateMessageRequest, 'createMessageBody'>,\n  NonNullable<DefaultApiCreateMessageRequest['createMessageBody']>\n>\n\nexport type GetOrCreateMessageProps = Merge<\n  Except<DefaultApiGetOrCreateMessageRequest, 'getOrCreateMessageBody'>,\n  NonNullable<DefaultApiGetOrCreateMessageRequest['getOrCreateMessageBody']>\n>\n\nexport type GetMessageProps = Merge<DefaultApiGetMessageRequest, {}>\n\nexport type UpdateMessageProps = Merge<\n  Except<DefaultApiUpdateMessageRequest, 'updateMessageBody'>,\n  NonNullable<DefaultApiUpdateMessageRequest['updateMessageBody']>\n>\n\nexport type ListMessagesProps = Merge<DefaultApiListMessagesRequest, {}>\n\nexport type DeleteMessageProps = Merge<DefaultApiDeleteMessageRequest, {}>\n\nexport type CreateUserProps = Merge<\n  Except<DefaultApiCreateUserRequest, 'createUserBody'>,\n  NonNullable<DefaultApiCreateUserRequest['createUserBody']>\n>\n\nexport type GetUserProps = Merge<DefaultApiGetUserRequest, {}>\n\nexport type ListUsersProps = Merge<DefaultApiListUsersRequest, {}>\n\nexport type GetOrCreateUserProps = Merge<\n  Except<DefaultApiGetOrCreateUserRequest, 'getOrCreateUserBody'>,\n  NonNullable<DefaultApiGetOrCreateUserRequest['getOrCreateUserBody']>\n>\n\nexport type UpdateUserProps = Merge<\n  Except<DefaultApiUpdateUserRequest, 'updateUserBody'>,\n  NonNullable<DefaultApiUpdateUserRequest['updateUserBody']>\n>\n\nexport type DeleteUserProps = Merge<DefaultApiDeleteUserRequest, {}>\n\nexport type GetStateProps = Merge<DefaultApiGetStateRequest, {}>\n\nexport type SetStateProps = Merge<\n  Except<DefaultApiSetStateRequest, 'setStateBody'>,\n  NonNullable<DefaultApiSetStateRequest['setStateBody']>\n>\n\nexport type PatchStateProps = Merge<\n  Except<DefaultApiPatchStateRequest, 'patchStateBody'>,\n  NonNullable<DefaultApiPatchStateRequest['patchStateBody']>\n>\n\nexport type CallActionProps = Merge<\n  Except<DefaultApiCallActionRequest, 'callActionBody'>,\n  NonNullable<DefaultApiCallActionRequest['callActionBody']>\n>\n\nexport type ConfigureIntegrationProps = Merge<\n  Except<DefaultApiConfigureIntegrationRequest, 'configureIntegrationBody'>,\n  NonNullable<DefaultApiConfigureIntegrationRequest['configureIntegrationBody']>\n>\n\n\n\nexport type CreatePersonalAccessTokenProps = Merge<\n  Except<DefaultApiCreatePersonalAccessTokenRequest, 'createPersonalAccessTokenBody'>,\n  NonNullable<DefaultApiCreatePersonalAccessTokenRequest['createPersonalAccessTokenBody']>\n>\n\nexport type DeletePersonalAccessTokenProps = Merge<DefaultApiDeletePersonalAccessTokenRequest, {}>\n\nexport type ListPublicIntegrationsProps = Merge<DefaultApiListPublicIntegrationsRequest, {}>\n\nexport type GetPublicIntegrationByIdProps = Merge<DefaultApiGetPublicIntegrationByIdRequest, {}>\n\nexport type GetPublicIntegrationProps = Merge<DefaultApiGetPublicIntegrationRequest, {}>\n\nexport type CreateBotProps = Merge<\n  Except<DefaultApiCreateBotRequest, 'createBotBody'>,\n  NonNullable<DefaultApiCreateBotRequest['createBotBody']>\n>\n\nexport type UpdateBotProps = Merge<\n  Except<DefaultApiUpdateBotRequest, 'updateBotBody'>,\n  NonNullable<DefaultApiUpdateBotRequest['updateBotBody']>\n>\n\nexport type TransferBotProps = Merge<\n  Except<DefaultApiTransferBotRequest, 'transferBotBody'>,\n  NonNullable<DefaultApiTransferBotRequest['transferBotBody']>\n>\n\nexport type ListBotsProps = Merge<DefaultApiListBotsRequest, {}>\n\nexport type GetBotProps = Merge<DefaultApiGetBotRequest, {}>\n\nexport type DeleteBotProps = Merge<DefaultApiDeleteBotRequest, {}>\n\nexport type GetBotLogsProps = Merge<DefaultApiGetBotLogsRequest, {}>\n\nexport type GetBotWebchatProps = Merge<DefaultApiGetBotWebchatRequest, {}>\n\nexport type GetBotAnalyticsProps = Merge<DefaultApiGetBotAnalyticsRequest, {}>\n\nexport type ListBotIssuesProps = Merge<DefaultApiListBotIssuesRequest, {}>\n\nexport type DeleteBotIssueProps = Merge<DefaultApiDeleteBotIssueRequest, {}>\n\nexport type ListBotIssueEventsProps = Merge<DefaultApiListBotIssueEventsRequest, {}>\n\nexport type GetWorkspaceBillingDetailsProps = Merge<DefaultApiGetWorkspaceBillingDetailsRequest, {}>\n\nexport type SetWorkspacePaymentMethodProps = Merge<\n  Except<DefaultApiSetWorkspacePaymentMethodRequest, 'setWorkspacePaymentMethodBody'>,\n  NonNullable<DefaultApiSetWorkspacePaymentMethodRequest['setWorkspacePaymentMethodBody']>\n>\n\nexport type ListWorkspaceInvoicesProps = Merge<DefaultApiListWorkspaceInvoicesRequest, {}>\n\nexport type ChargeWorkspaceUnpaidInvoicesProps = Merge<\n  Except<DefaultApiChargeWorkspaceUnpaidInvoicesRequest, 'chargeWorkspaceUnpaidInvoicesBody'>,\n  NonNullable<DefaultApiChargeWorkspaceUnpaidInvoicesRequest['chargeWorkspaceUnpaidInvoicesBody']>\n>\n\nexport type CreateWorkspaceProps = Merge<\n  Except<DefaultApiCreateWorkspaceRequest, 'createWorkspaceBody'>,\n  NonNullable<DefaultApiCreateWorkspaceRequest['createWorkspaceBody']>\n>\n\nexport type GetWorkspaceProps = Merge<DefaultApiGetWorkspaceRequest, {}>\n\nexport type ListWorkspaceUsagesProps = Merge<DefaultApiListWorkspaceUsagesRequest, {}>\n\nexport type BreakDownWorkspaceUsageByBotProps = Merge<DefaultApiBreakDownWorkspaceUsageByBotRequest, {}>\n\nexport type GetWorkspaceQuotaProps = Merge<DefaultApiGetWorkspaceQuotaRequest, {}>\n\nexport type ListWorkspaceQuotasProps = Merge<DefaultApiListWorkspaceQuotasRequest, {}>\n\nexport type UpdateWorkspaceProps = Merge<\n  Except<DefaultApiUpdateWorkspaceRequest, 'updateWorkspaceBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceRequest['updateWorkspaceBody']>\n>\n\nexport type ListWorkspacesProps = Merge<DefaultApiListWorkspacesRequest, {}>\n\nexport type ChangeWorkspacePlanProps = Merge<\n  Except<DefaultApiChangeWorkspacePlanRequest, 'changeWorkspacePlanBody'>,\n  NonNullable<DefaultApiChangeWorkspacePlanRequest['changeWorkspacePlanBody']>\n>\n\nexport type DeleteWorkspaceProps = Merge<DefaultApiDeleteWorkspaceRequest, {}>\n\nexport type GetAuditRecordsProps = Merge<DefaultApiGetAuditRecordsRequest, {}>\n\nexport type ListWorkspaceMembersProps = Merge<DefaultApiListWorkspaceMembersRequest, {}>\n\nexport type DeleteWorkspaceMemberProps = Merge<DefaultApiDeleteWorkspaceMemberRequest, {}>\n\nexport type CreateWorkspaceMemberProps = Merge<\n  Except<DefaultApiCreateWorkspaceMemberRequest, 'createWorkspaceMemberBody'>,\n  NonNullable<DefaultApiCreateWorkspaceMemberRequest['createWorkspaceMemberBody']>\n>\n\nexport type UpdateWorkspaceMemberProps = Merge<\n  Except<DefaultApiUpdateWorkspaceMemberRequest, 'updateWorkspaceMemberBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceMemberRequest['updateWorkspaceMemberBody']>\n>\n\nexport type CreateIntegrationProps = Merge<\n  Except<DefaultApiCreateIntegrationRequest, 'createIntegrationBody'>,\n  NonNullable<DefaultApiCreateIntegrationRequest['createIntegrationBody']>\n>\n\nexport type UpdateIntegrationProps = Merge<\n  Except<DefaultApiUpdateIntegrationRequest, 'updateIntegrationBody'>,\n  NonNullable<DefaultApiUpdateIntegrationRequest['updateIntegrationBody']>\n>\n\nexport type ListIntegrationsProps = Merge<DefaultApiListIntegrationsRequest, {}>\n\nexport type GetIntegrationProps = Merge<DefaultApiGetIntegrationRequest, {}>\n\nexport type GetIntegrationLogsProps = Merge<DefaultApiGetIntegrationLogsRequest, {}>\n\nexport type GetIntegrationByNameProps = Merge<DefaultApiGetIntegrationByNameRequest, {}>\n\nexport type DeleteIntegrationProps = Merge<DefaultApiDeleteIntegrationRequest, {}>\n\nexport type GetUsageProps = Merge<DefaultApiGetUsageRequest, {}>\n\nexport type ListUsageHistoryProps = Merge<DefaultApiListUsageHistoryRequest, {}>\n\nexport type ChangeAISpendQuotaProps = Merge<\n  Except<DefaultApiChangeAISpendQuotaRequest, 'changeAISpendQuotaBody'>,\n  NonNullable<DefaultApiChangeAISpendQuotaRequest['changeAISpendQuotaBody']>\n>\n\nexport type IntrospectProps = Merge<\n  Except<DefaultApiIntrospectRequest, 'introspectBody'>,\n  NonNullable<DefaultApiIntrospectRequest['introspectBody']>\n>\n\nexport type CreateFileProps = Merge<\n  Except<DefaultApiCreateFileRequest, 'createFileBody'>,\n  NonNullable<DefaultApiCreateFileRequest['createFileBody']>\n>\n\nexport type GetFileProps = Merge<DefaultApiGetFileRequest, {}>\n\nexport type DownloadFileProps = Merge<DefaultApiDownloadFileRequest, {}>\n\nexport type DeleteFileProps = Merge<DefaultApiDeleteFileRequest, {}>\n\nexport type ListFilesProps = Merge<DefaultApiListFilesRequest, {}>\n\n\nfunction getError(err: Error) {\n  if (axios.isAxiosError(err) && err.response?.data) {\n    return errorFrom(err.response.data)\n  }\n  return errorFrom(err)\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.15.6\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// URLSearchParams not necessarily used\n// @ts-ignore\n\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    'email': string;\n    /**\n     * Creation date of the [Account](#schema_account) in ISO 8601 format\n     * @type {string}\n     * @memberof Account\n     */\n    'createdAt': string;\n}\n/**\n * \n * @export\n * @interface AddParticipantBody\n */\nexport interface AddParticipantBody {\n    /**\n     * User id\n     * @type {string}\n     * @memberof AddParticipantBody\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface AddParticipantResponse\n */\nexport interface AddParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof AddParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * \n * @export\n * @interface Bot\n */\nexport interface Bot {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Bot\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'updatedAt': string;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'signingSecret': string;\n    /**\n     * A mapping of integrations to their configuration\n     * @type {{ [key: string]: BotIntegrationsValue; }}\n     * @memberof Bot\n     */\n    'integrations': { [key: string]: BotIntegrationsValue; };\n    /**\n     * \n     * @type {BotUser}\n     * @memberof Bot\n     */\n    'user': BotUser;\n    /**\n     * \n     * @type {BotConversation}\n     * @memberof Bot\n     */\n    'conversation': BotConversation;\n    /**\n     * \n     * @type {BotMessage}\n     * @memberof Bot\n     */\n    'message': BotMessage;\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof Bot\n     */\n    'states': { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * \n     * @type {BotConfiguration}\n     * @memberof Bot\n     */\n    'configuration': BotConfiguration;\n    /**\n     * Events definition\n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof Bot\n     */\n    'events': { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * Recurring events\n     * @type {{ [key: string]: BotRecurringEventsValue; }}\n     * @memberof Bot\n     */\n    'recurringEvents': { [key: string]: BotRecurringEventsValue; };\n    /**\n     * Name of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'name': string;\n    /**\n     * Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'deployedAt'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof Bot\n     */\n    'dev': boolean;\n    /**\n     * Id of the user that created the bot\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdBy'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) should be executed in accelerated mode\n     * @type {boolean}\n     * @memberof Bot\n     */\n    'alwaysAlive': boolean;\n    /**\n     * Status of the bot\n     * @type {string}\n     * @memberof Bot\n     */\n    'status': BotStatusEnum;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<BotMediasInner>}\n     * @memberof Bot\n     */\n    'medias': Array<BotMediasInner>;\n}\n\nexport const BotStatusEnum = {\n    Active: 'active',\n    Deploying: 'deploying'\n} as const;\n\nexport type BotStatusEnum = typeof BotStatusEnum[keyof typeof BotStatusEnum];\n\n/**\n * Configuration of the bot\n * @export\n * @interface BotConfiguration\n */\nexport interface BotConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'data': { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Conversation object configuration\n * @export\n * @interface BotConversation\n */\nexport interface BotConversation {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotConversation\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface BotIntegrationsValue\n */\nexport interface BotIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof BotIntegrationsValue\n     */\n    'enabled': boolean;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'name': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'version': string;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'webhookUrl': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'webhookId': string;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'identifier'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof BotIntegrationsValue\n     */\n    'configuration': { [key: string]: any; };\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'status': BotIntegrationsValueStatusEnum;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'statusReason': string | null;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'iconUrl': string;\n}\n\nexport const BotIntegrationsValueStatusEnum = {\n    RegistrationPending: 'registration_pending',\n    Registered: 'registered',\n    RegistrationFailed: 'registration_failed',\n    UnregistrationPending: 'unregistration_pending',\n    Unregistered: 'unregistered',\n    UnregistrationFailed: 'unregistration_failed'\n} as const;\n\nexport type BotIntegrationsValueStatusEnum = typeof BotIntegrationsValueStatusEnum[keyof typeof BotIntegrationsValueStatusEnum];\n\n/**\n * \n * @export\n * @interface BotMediasInner\n */\nexport interface BotMediasInner {\n    /**\n     * URL of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'url': string;\n    /**\n     * Name of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'name': string;\n}\n/**\n * Message object configuration\n * @export\n * @interface BotMessage\n */\nexport interface BotMessage {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotMessage\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface BotRecurringEventsValue\n */\nexport interface BotRecurringEventsValue {\n    /**\n     * \n     * @type {BotRecurringEventsValueSchedule}\n     * @memberof BotRecurringEventsValue\n     */\n    'schedule': BotRecurringEventsValueSchedule;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof BotRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof BotRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface BotRecurringEventsValueSchedule\n */\nexport interface BotRecurringEventsValueSchedule {\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof BotRecurringEventsValueSchedule\n     */\n    'cron': string;\n}\n/**\n * User object configuration\n * @export\n * @interface BotUser\n */\nexport interface BotUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotUser\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface BreakDownWorkspaceUsageByBotResponse\n */\nexport interface BreakDownWorkspaceUsageByBotResponse {\n    /**\n     * \n     * @type {Array<BreakDownWorkspaceUsageByBotResponseDataInner>}\n     * @memberof BreakDownWorkspaceUsageByBotResponse\n     */\n    'data': Array<BreakDownWorkspaceUsageByBotResponseDataInner>;\n}\n/**\n * \n * @export\n * @interface BreakDownWorkspaceUsageByBotResponseDataInner\n */\nexport interface BreakDownWorkspaceUsageByBotResponseDataInner {\n    /**\n     * \n     * @type {string}\n     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner\n     */\n    'botId': string;\n    /**\n     * \n     * @type {number}\n     * @memberof BreakDownWorkspaceUsageByBotResponseDataInner\n     */\n    'value': number;\n}\n/**\n * \n * @export\n * @interface CallActionBody\n */\nexport interface CallActionBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CallActionBody\n     */\n    'type': string;\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionBody\n     */\n    'input': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CallActionResponse\n */\nexport interface CallActionResponse {\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionResponse\n     */\n    'output': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface ChangeAISpendQuotaBody\n */\nexport interface ChangeAISpendQuotaBody {\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeAISpendQuotaBody\n     */\n    'monthlySpendingLimit': number;\n}\n/**\n * \n * @export\n * @interface ChangeWorkspacePlanBody\n */\nexport interface ChangeWorkspacePlanBody {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanBody\n     */\n    'plan': ChangeWorkspacePlanBodyPlanEnum;\n}\n\nexport const ChangeWorkspacePlanBodyPlanEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type ChangeWorkspacePlanBodyPlanEnum = typeof ChangeWorkspacePlanBodyPlanEnum[keyof typeof ChangeWorkspacePlanBodyPlanEnum];\n\n/**\n * \n * @export\n * @interface ChangeWorkspacePlanResponse\n */\nexport interface ChangeWorkspacePlanResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'accountType': ChangeWorkspacePlanResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'billingVersion': ChangeWorkspacePlanResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'plan': ChangeWorkspacePlanResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ChangeWorkspacePlanResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const ChangeWorkspacePlanResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type ChangeWorkspacePlanResponseAccountTypeEnum = typeof ChangeWorkspacePlanResponseAccountTypeEnum[keyof typeof ChangeWorkspacePlanResponseAccountTypeEnum];\nexport const ChangeWorkspacePlanResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type ChangeWorkspacePlanResponseBillingVersionEnum = typeof ChangeWorkspacePlanResponseBillingVersionEnum[keyof typeof ChangeWorkspacePlanResponseBillingVersionEnum];\nexport const ChangeWorkspacePlanResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type ChangeWorkspacePlanResponsePlanEnum = typeof ChangeWorkspacePlanResponsePlanEnum[keyof typeof ChangeWorkspacePlanResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesBody\n */\nexport interface ChargeWorkspaceUnpaidInvoicesBody {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesBody\n     */\n    'invoiceIds'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponse\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponse {\n    /**\n     * Invoices that were successfully charged by this request.\n     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponse\n     */\n    'chargedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner>;\n    /**\n     * Invoices that failed to be charged by this request.\n     * @type {Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponse\n     */\n    'failedInvoices': Array<ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner>;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseChargedInvoicesInner\n     */\n    'amount': number;\n}\n/**\n * \n * @export\n * @interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n */\nexport interface ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'amount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ChargeWorkspaceUnpaidInvoicesResponseFailedInvoicesInner\n     */\n    'failedReason': string;\n}\n/**\n * \n * @export\n * @interface ConfigureIntegrationBody\n */\nexport interface ConfigureIntegrationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ConfigureIntegrationBody\n     */\n    'identifier': string;\n}\n/**\n * The conversation object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration\\'s channels. For example, a Slack channel represents a conversation.\n * @export\n * @interface Conversation\n */\nexport interface Conversation {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'id': string;\n    /**\n     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'updatedAt': string;\n    /**\n     * Name of the channel where the [Conversation](#schema_conversation) is happening\n     * @type {string}\n     * @memberof Conversation\n     */\n    'channel': string;\n    /**\n     * Name of the integration that created the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'integration': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Conversation\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface CreateBotBody\n */\nexport interface CreateBotBody {\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof CreateBotBody\n     */\n    'states'?: { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * Events definition\n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'events'?: { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'recurringEvents'?: { [key: string]: CreateBotBodyRecurringEventsValue; };\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof CreateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'user'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'conversation'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'message'?: CreateBotBodyUser;\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof CreateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof CreateBotBody\n     */\n    'dev'?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyConfiguration\n */\nexport interface CreateBotBodyConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'data'?: { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n}\n/**\n * Event Definition\n * @export\n * @interface CreateBotBodyEventsValue\n */\nexport interface CreateBotBodyEventsValue {\n    /**\n     * Title of the event\n     * @type {string}\n     * @memberof CreateBotBodyEventsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the event\n     * @type {string}\n     * @memberof CreateBotBodyEventsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyMediasInner\n */\nexport interface CreateBotBodyMediasInner {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValue\n */\nexport interface CreateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValueSchedule\n */\nexport interface CreateBotBodyRecurringEventsValueSchedule {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValueSchedule\n     */\n    'cron': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyStatesValue\n */\nexport interface CreateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)\n     * @type {string}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'type': CreateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const CreateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot'\n} as const;\n\nexport type CreateBotBodyStatesValueTypeEnum = typeof CreateBotBodyStatesValueTypeEnum[keyof typeof CreateBotBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateBotBodyUser\n */\nexport interface CreateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateBotBodyUser\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface CreateBotBodyUserTagsValue\n */\nexport interface CreateBotBodyUserTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof CreateBotBodyUserTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof CreateBotBodyUserTagsValue\n     */\n    'description'?: string;\n}\n/**\n * \n * @export\n * @interface CreateBotResponse\n */\nexport interface CreateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof CreateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface CreateConversationBody\n */\nexport interface CreateConversationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof CreateConversationBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface CreateConversationResponse\n */\nexport interface CreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof CreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface CreateEventBody\n */\nexport interface CreateEventBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our API.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateEventBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * \n     * @type {CreateEventBodySchedule}\n     * @memberof CreateEventBody\n     */\n    'schedule'?: CreateEventBodySchedule;\n    /**\n     * ID of the [Conversation](#schema_conversation) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'conversationId'?: string;\n    /**\n     * ID of the [User](#schema_user) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'userId'?: string;\n    /**\n     * ID of the [Message](#schema_message) to link the event to.\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'messageId'?: string;\n}\n/**\n * Schedule the Event to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateEventBodySchedule\n */\nexport interface CreateEventBodySchedule {\n    /**\n     * When the [Event](#schema_event) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateEventBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Event](#schema_event)\n     * @type {number}\n     * @memberof CreateEventBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateEventResponse\n */\nexport interface CreateEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof CreateEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface CreateFileBody\n */\nexport interface CreateFileBody {\n    /**\n     * ID of the bot the file will be used for\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'botId': string;\n    /**\n     * Base64-encoded file contents\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'contents': string;\n    /**\n     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'name': string;\n    /**\n     * Accepted values: private, public\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'accessType': CreateFileBodyAccessTypeEnum;\n}\n\nexport const CreateFileBodyAccessTypeEnum = {\n    Private: 'private',\n    Public: 'public'\n} as const;\n\nexport type CreateFileBodyAccessTypeEnum = typeof CreateFileBodyAccessTypeEnum[keyof typeof CreateFileBodyAccessTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateFileResponse\n */\nexport interface CreateFileResponse {\n    /**\n     * \n     * @type {any}\n     * @memberof CreateFileResponse\n     */\n    'file': any;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBody\n */\nexport interface CreateIntegrationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'version': string;\n    /**\n     * \n     * @type {CreateIntegrationBodyConfiguration}\n     * @memberof CreateIntegrationBody\n     */\n    'configuration'?: CreateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'states'?: { [key: string]: CreateIntegrationBodyStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'events'?: { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'actions'?: { [key: string]: CreateIntegrationBodyActionsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyIdentifier}\n     * @memberof CreateIntegrationBody\n     */\n    'identifier'?: CreateIntegrationBodyIdentifier;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'channels'?: { [key: string]: CreateIntegrationBodyChannelsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyUser}\n     * @memberof CreateIntegrationBody\n     */\n    'user'?: CreateIntegrationBodyUser;\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof CreateIntegrationBody\n     */\n    'dev'?: boolean;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'description'?: string;\n}\n/**\n * Action definition\n * @export\n * @interface CreateIntegrationBodyActionsValue\n */\nexport interface CreateIntegrationBodyActionsValue {\n    /**\n     * Title of the action\n     * @type {string}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the action\n     * @type {string}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'input': CreateIntegrationBodyActionsValueInput;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'output': CreateIntegrationBodyActionsValueInput;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyActionsValueInput\n */\nexport interface CreateIntegrationBodyActionsValueInput {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyActionsValueInput\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValue\n */\nexport interface CreateIntegrationBodyChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'messages': { [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversation}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'conversation'?: CreateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'message'?: CreateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValueConversation\n */\nexport interface CreateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.\n * @export\n * @interface CreateIntegrationBodyChannelsValueConversationCreation\n */\nexport interface CreateIntegrationBodyChannelsValueConversationCreation {\n    /**\n     * Enable conversation creation\n     * @type {boolean}\n     * @memberof CreateIntegrationBodyChannelsValueConversationCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a conversation.\n     * @type {Array<string>}\n     * @memberof CreateIntegrationBodyChannelsValueConversationCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * Message definition\n * @export\n * @interface CreateIntegrationBodyChannelsValueMessagesValue\n */\nexport interface CreateIntegrationBodyChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyConfiguration\n */\nexport interface CreateIntegrationBodyConfiguration {\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n    /**\n     * \n     * @type {CreateIntegrationBodyConfigurationIdentifier}\n     * @memberof CreateIntegrationBodyConfiguration\n     */\n    'identifier'?: CreateIntegrationBodyConfigurationIdentifier;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyConfigurationIdentifier\n */\nexport interface CreateIntegrationBodyConfigurationIdentifier {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateIntegrationBodyConfigurationIdentifier\n     */\n    'required'?: boolean;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof CreateIntegrationBodyConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyIdentifier\n */\nexport interface CreateIntegrationBodyIdentifier {\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof CreateIntegrationBodyIdentifier\n     */\n    'fallbackHandlerScript'?: string;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof CreateIntegrationBodyIdentifier\n     */\n    'extractScript'?: string;\n}\n/**\n * State definition\n * @export\n * @interface CreateIntegrationBodyStatesValue\n */\nexport interface CreateIntegrationBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof CreateIntegrationBodyStatesValue\n     */\n    'type': CreateIntegrationBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const CreateIntegrationBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type CreateIntegrationBodyStatesValueTypeEnum = typeof CreateIntegrationBodyStatesValueTypeEnum[keyof typeof CreateIntegrationBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateIntegrationBodyUser\n */\nexport interface CreateIntegrationBodyUser {\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'creation'?: CreateIntegrationBodyUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.\n * @export\n * @interface CreateIntegrationBodyUserCreation\n */\nexport interface CreateIntegrationBodyUserCreation {\n    /**\n     * Enable user creation\n     * @type {boolean}\n     * @memberof CreateIntegrationBodyUserCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a user.\n     * @type {Array<string>}\n     * @memberof CreateIntegrationBodyUserCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationResponse\n */\nexport interface CreateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof CreateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface CreateMessageBody\n */\nexport interface CreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * User id\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'userId': string;\n    /**\n     * User id\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof CreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * Schedule the Message to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateMessageBodySchedule\n */\nexport interface CreateMessageBodySchedule {\n    /**\n     * When the [Event](#schema_event) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateMessageBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Message](#schema_message)\n     * @type {number}\n     * @memberof CreateMessageBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateMessageResponse\n */\nexport interface CreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof CreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenBody\n */\nexport interface CreatePersonalAccessTokenBody {\n    /**\n     * Note to identify the PAT\n     * @type {string}\n     * @memberof CreatePersonalAccessTokenBody\n     */\n    'note': string;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenResponse\n */\nexport interface CreatePersonalAccessTokenResponse {\n    /**\n     * \n     * @type {CreatePersonalAccessTokenResponsePat}\n     * @memberof CreatePersonalAccessTokenResponse\n     */\n    'pat': CreatePersonalAccessTokenResponsePat;\n}\n/**\n * \n * @export\n * @interface CreatePersonalAccessTokenResponsePat\n */\nexport interface CreatePersonalAccessTokenResponsePat {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'note': string;\n    /**\n     * The PAT value. This will only be returned here when created and cannot be retrieved later.\n     * @type {string}\n     * @memberof CreatePersonalAccessTokenResponsePat\n     */\n    'value': string;\n}\n/**\n * \n * @export\n * @interface CreateUserBody\n */\nexport interface CreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof CreateUserBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface CreateUserResponse\n */\nexport interface CreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof CreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface CreateWorkspaceBody\n */\nexport interface CreateWorkspaceBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceBody\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberBody\n */\nexport interface CreateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'role': CreateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const CreateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberBodyRoleEnum = typeof CreateWorkspaceMemberBodyRoleEnum[keyof typeof CreateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberResponse\n */\nexport interface CreateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'role': CreateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const CreateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberResponseRoleEnum = typeof CreateWorkspaceMemberResponseRoleEnum[keyof typeof CreateWorkspaceMemberResponseRoleEnum];\n\n/**\n * \n * @export\n * @interface CreateWorkspaceResponse\n */\nexport interface CreateWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'accountType': CreateWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'billingVersion': CreateWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceResponse\n     */\n    'plan': CreateWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateWorkspaceResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const CreateWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type CreateWorkspaceResponseAccountTypeEnum = typeof CreateWorkspaceResponseAccountTypeEnum[keyof typeof CreateWorkspaceResponseAccountTypeEnum];\nexport const CreateWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type CreateWorkspaceResponseBillingVersionEnum = typeof CreateWorkspaceResponseBillingVersionEnum[keyof typeof CreateWorkspaceResponseBillingVersionEnum];\nexport const CreateWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type CreateWorkspaceResponsePlanEnum = typeof CreateWorkspaceResponsePlanEnum[keyof typeof CreateWorkspaceResponsePlanEnum];\n\n/**\n * The event object represents an action or an occurrence.\n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Event\n     */\n    'id': string;\n    /**\n     * Creation date of the [Event](#schema_event) in ISO 8601 format\n     * @type {string}\n     * @memberof Event\n     */\n    'createdAt': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Event\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api.\n     * @type {{ [key: string]: any; }}\n     * @memberof Event\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * ID of the [Conversation](#schema_conversation) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'conversationId'?: string;\n    /**\n     * ID of the [User](#schema_user) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'userId'?: string;\n    /**\n     * ID of the [Message](#schema_message) to link the event to.\n     * @type {string}\n     * @memberof Event\n     */\n    'messageId'?: string;\n}\n/**\n * \n * @export\n * @interface GetAccountResponse\n */\nexport interface GetAccountResponse {\n    /**\n     * \n     * @type {GetAccountResponseAccount}\n     * @memberof GetAccountResponse\n     */\n    'account': GetAccountResponseAccount;\n}\n/**\n * \n * @export\n * @interface GetAccountResponseAccount\n */\nexport interface GetAccountResponseAccount {\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'email': string;\n    /**\n     * Creation date of the [Account](#schema_account) in ISO 8601 format\n     * @type {string}\n     * @memberof GetAccountResponseAccount\n     */\n    'createdAt': string;\n}\n/**\n * \n * @export\n * @interface GetAuditRecordsResponse\n */\nexport interface GetAuditRecordsResponse {\n    /**\n     * \n     * @type {Array<GetAuditRecordsResponseRecordsInner>}\n     * @memberof GetAuditRecordsResponse\n     */\n    'records': Array<GetAuditRecordsResponseRecordsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof GetAuditRecordsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface GetAuditRecordsResponseRecordsInner\n */\nexport interface GetAuditRecordsResponseRecordsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'recordedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'userId': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'userEmail'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'resourceId': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'resourceName'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof GetAuditRecordsResponseRecordsInner\n     */\n    'action': GetAuditRecordsResponseRecordsInnerActionEnum;\n}\n\nexport const GetAuditRecordsResponseRecordsInnerActionEnum = {\n    Unknown: 'UNKNOWN',\n    AddWorkspaceMember: 'ADD_WORKSPACE_MEMBER',\n    RemoveWorkspaceMember: 'REMOVE_WORKSPACE_MEMBER',\n    UpdateWorkspaceMember: 'UPDATE_WORKSPACE_MEMBER',\n    CloseWorkspace: 'CLOSE_WORKSPACE',\n    CreateBot: 'CREATE_BOT',\n    CreateWorkspace: 'CREATE_WORKSPACE',\n    DeleteBot: 'DELETE_BOT',\n    DeployBot: 'DEPLOY_BOT',\n    TransferBot: 'TRANSFER_BOT',\n    DowngradeWorkspacePlan: 'DOWNGRADE_WORKSPACE_PLAN',\n    DownloadBotArchive: 'DOWNLOAD_BOT_ARCHIVE',\n    UpdateBot: 'UPDATE_BOT',\n    UpdateBotChannel: 'UPDATE_BOT_CHANNEL',\n    UpdateBotConfig: 'UPDATE_BOT_CONFIG',\n    UpdatePaymentMethod: 'UPDATE_PAYMENT_METHOD',\n    UpdateWorkspace: 'UPDATE_WORKSPACE',\n    UpgradeWorkspacePlan: 'UPGRADE_WORKSPACE_PLAN',\n    SetSpendingLimit: 'SET_SPENDING_LIMIT'\n} as const;\n\nexport type GetAuditRecordsResponseRecordsInnerActionEnum = typeof GetAuditRecordsResponseRecordsInnerActionEnum[keyof typeof GetAuditRecordsResponseRecordsInnerActionEnum];\n\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponse\n */\nexport interface GetBotAnalyticsResponse {\n    /**\n     * \n     * @type {Array<GetBotAnalyticsResponseRecordsInner>}\n     * @memberof GetBotAnalyticsResponse\n     */\n    'records': Array<GetBotAnalyticsResponseRecordsInner>;\n}\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponseRecordsInner\n */\nexport interface GetBotAnalyticsResponseRecordsInner {\n    /**\n     * ISO 8601 date string of the beginning (inclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'startDateTimeUtc': string;\n    /**\n     * ISO 8601 date string of the end (exclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'endDateTimeUtc': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'returningUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'newUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'sessions': number;\n    /**\n     * Deprecated. Use `userMessages` instead.\n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'messages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'userMessages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'botMessages': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'events': number;\n    /**\n     * \n     * @type {{ [key: string]: number; }}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'eventTypes': { [key: string]: number; };\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponse\n */\nexport interface GetBotLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetBotLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponse\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponseLogsInner\n */\nexport interface GetBotLogsResponseLogsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'timestamp': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'level': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'message': string;\n}\n/**\n * \n * @export\n * @interface GetBotResponse\n */\nexport interface GetBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof GetBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface GetBotWebchatResponse\n */\nexport interface GetBotWebchatResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotWebchatResponse\n     */\n    'code': string;\n}\n/**\n * \n * @export\n * @interface GetConversationResponse\n */\nexport interface GetConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetEventResponse\n */\nexport interface GetEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof GetEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface GetFileResponse\n */\nexport interface GetFileResponse {\n    /**\n     * \n     * @type {any}\n     * @memberof GetFileResponse\n     */\n    'file': any;\n}\n/**\n * \n * @export\n * @interface GetIntegrationByNameResponse\n */\nexport interface GetIntegrationByNameResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationByNameResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetIntegrationLogsResponse\n */\nexport interface GetIntegrationLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetIntegrationLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetIntegrationLogsResponse\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface GetIntegrationResponse\n */\nexport interface GetIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetMessageResponse\n */\nexport interface GetMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationBody\n */\nexport interface GetOrCreateConversationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a conversation from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationResponse\n */\nexport interface GetOrCreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetOrCreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageBody\n */\nexport interface GetOrCreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * User id\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'userId': string;\n    /**\n     * User id\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Message](#schema_message). The set of [Tags](#tags) available on a [Message](#schema_message) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof GetOrCreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageResponse\n */\nexport interface GetOrCreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetOrCreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserBody\n */\nexport interface GetOrCreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * [DEPRECATED] To create a user from within a bot, call an action of the integration instead.\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     * @deprecated\n     */\n    'integrationName'?: string;\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserResponse\n */\nexport interface GetOrCreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetOrCreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetParticipantResponse\n */\nexport interface GetParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponse\n */\nexport interface GetPublicIntegrationByIdResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetPublicIntegrationByIdResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationResponse\n */\nexport interface GetPublicIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetPublicIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetStateResponse\n */\nexport interface GetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof GetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface GetUsageResponse\n */\nexport interface GetUsageResponse {\n    /**\n     * \n     * @type {Usage}\n     * @memberof GetUsageResponse\n     */\n    'usage': Usage;\n}\n/**\n * \n * @export\n * @interface GetUserResponse\n */\nexport interface GetUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceBillingDetailsResponse\n */\nexport interface GetWorkspaceBillingDetailsResponse {\n    /**\n     * \n     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriod}\n     * @memberof GetWorkspaceBillingDetailsResponse\n     */\n    'currentPeriod': GetWorkspaceBillingDetailsResponseCurrentPeriod;\n    /**\n     * \n     * @type {GetWorkspaceBillingDetailsResponsePaymentMethod}\n     * @memberof GetWorkspaceBillingDetailsResponse\n     */\n    'paymentMethod': GetWorkspaceBillingDetailsResponsePaymentMethod | null;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceBillingDetailsResponseCurrentPeriod\n */\nexport interface GetWorkspaceBillingDetailsResponseCurrentPeriod {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod\n     */\n    'start': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod\n     */\n    'end': string;\n    /**\n     * \n     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriodUsage}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriod\n     */\n    'usage': GetWorkspaceBillingDetailsResponseCurrentPeriodUsage;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsage\n */\nexport interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsage {\n    /**\n     * \n     * @type {GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsage\n     */\n    'userMessages': GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n */\nexport interface GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n     */\n    'status': GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n     */\n    'quantity': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n     */\n    'price': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n     */\n    'minimum': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessages\n     */\n    'maximum': number;\n}\n\nexport const GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum = {\n    Ok: 'OK',\n    Warning: 'Warning',\n    LimitReached: 'LimitReached'\n} as const;\n\nexport type GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum = typeof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum[keyof typeof GetWorkspaceBillingDetailsResponseCurrentPeriodUsageUserMessagesStatusEnum];\n\n/**\n * \n * @export\n * @interface GetWorkspaceBillingDetailsResponsePaymentMethod\n */\nexport interface GetWorkspaceBillingDetailsResponsePaymentMethod {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceBillingDetailsResponsePaymentMethod\n     */\n    'type': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceBillingDetailsResponsePaymentMethod\n     */\n    'lastDigits': string;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceQuotaResponse\n */\nexport interface GetWorkspaceQuotaResponse {\n    /**\n     * \n     * @type {GetWorkspaceQuotaResponseQuota}\n     * @memberof GetWorkspaceQuotaResponse\n     */\n    'quota': GetWorkspaceQuotaResponseQuota;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceQuotaResponseQuota\n */\nexport interface GetWorkspaceQuotaResponseQuota {\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'period': string;\n    /**\n     * Value of the quota that is used\n     * @type {number}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'value': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof GetWorkspaceQuotaResponseQuota\n     */\n    'type': GetWorkspaceQuotaResponseQuotaTypeEnum;\n}\n\nexport const GetWorkspaceQuotaResponseQuotaTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type GetWorkspaceQuotaResponseQuotaTypeEnum = typeof GetWorkspaceQuotaResponseQuotaTypeEnum[keyof typeof GetWorkspaceQuotaResponseQuotaTypeEnum];\n\n/**\n * \n * @export\n * @interface GetWorkspaceResponse\n */\nexport interface GetWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'accountType': GetWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'billingVersion': GetWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'plan': GetWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GetWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const GetWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type GetWorkspaceResponseAccountTypeEnum = typeof GetWorkspaceResponseAccountTypeEnum[keyof typeof GetWorkspaceResponseAccountTypeEnum];\nexport const GetWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type GetWorkspaceResponseBillingVersionEnum = typeof GetWorkspaceResponseBillingVersionEnum[keyof typeof GetWorkspaceResponseBillingVersionEnum];\nexport const GetWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type GetWorkspaceResponsePlanEnum = typeof GetWorkspaceResponsePlanEnum[keyof typeof GetWorkspaceResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface Integration\n */\nexport interface Integration {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Integration\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {IntegrationIdentifier}\n     * @memberof Integration\n     */\n    'identifier': IntegrationIdentifier;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Integration\n     */\n    'name': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Integration\n     */\n    'version': string;\n    /**\n     * \n     * @type {IntegrationConfiguration}\n     * @memberof Integration\n     */\n    'configuration': IntegrationConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: IntegrationChannelsValue; }}\n     * @memberof Integration\n     */\n    'channels': { [key: string]: IntegrationChannelsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}\n     * @memberof Integration\n     */\n    'states': { [key: string]: CreateIntegrationBodyStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof Integration\n     */\n    'events': { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}\n     * @memberof Integration\n     */\n    'actions': { [key: string]: CreateIntegrationBodyActionsValue; };\n    /**\n     * \n     * @type {IntegrationUser}\n     * @memberof Integration\n     */\n    'user': IntegrationUser;\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof Integration\n     */\n    'dev': boolean;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'iconUrl': string;\n    /**\n     * URL of the readme of the integration. This is the readme that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'readmeUrl': string;\n}\n/**\n * Channel definition\n * @export\n * @interface IntegrationChannelsValue\n */\nexport interface IntegrationChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof IntegrationChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof IntegrationChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}\n     * @memberof IntegrationChannelsValue\n     */\n    'messages': { [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {IntegrationChannelsValueConversation}\n     * @memberof IntegrationChannelsValue\n     */\n    'conversation': IntegrationChannelsValueConversation;\n    /**\n     * \n     * @type {BotMessage}\n     * @memberof IntegrationChannelsValue\n     */\n    'message': BotMessage;\n}\n/**\n * Conversation object configuration\n * @export\n * @interface IntegrationChannelsValueConversation\n */\nexport interface IntegrationChannelsValueConversation {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof IntegrationChannelsValueConversation\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof IntegrationChannelsValueConversation\n     */\n    'creation': CreateIntegrationBodyChannelsValueConversationCreation;\n}\n/**\n * Configuration definition\n * @export\n * @interface IntegrationConfiguration\n */\nexport interface IntegrationConfiguration {\n    /**\n     * \n     * @type {IntegrationConfigurationIdentifier}\n     * @memberof IntegrationConfiguration\n     */\n    'identifier': IntegrationConfigurationIdentifier;\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof IntegrationConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n}\n/**\n * Identifier configuration of the [Integration](#schema_integration)\n * @export\n * @interface IntegrationConfigurationIdentifier\n */\nexport interface IntegrationConfigurationIdentifier {\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof IntegrationConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IntegrationConfigurationIdentifier\n     */\n    'required': boolean;\n}\n/**\n * Global identifier configuration of the [Integration](#schema_integration)\n * @export\n * @interface IntegrationIdentifier\n */\nexport interface IntegrationIdentifier {\n    /**\n     * VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn\\'t have an identifier\n     * @type {string}\n     * @memberof IntegrationIdentifier\n     */\n    'fallbackHandlerScript'?: string;\n    /**\n     * VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth\n     * @type {string}\n     * @memberof IntegrationIdentifier\n     */\n    'extractScript'?: string;\n}\n/**\n * User object configuration\n * @export\n * @interface IntegrationUser\n */\nexport interface IntegrationUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof IntegrationUser\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof IntegrationUser\n     */\n    'creation': CreateIntegrationBodyUserCreation;\n}\n/**\n * \n * @export\n * @interface IntrospectBody\n */\nexport interface IntrospectBody {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectBody\n     */\n    'botId': string;\n}\n/**\n * \n * @export\n * @interface IntrospectResponse\n */\nexport interface IntrospectResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'workspaceId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'botId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface Issue\n */\nexport interface Issue {\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'code': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'lastSeenAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'title': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'description': string;\n    /**\n     * \n     * @type {{ [key: string]: IssueGroupedDataValue; }}\n     * @memberof Issue\n     */\n    'groupedData': { [key: string]: IssueGroupedDataValue; };\n    /**\n     * \n     * @type {number}\n     * @memberof Issue\n     */\n    'eventsCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'category': IssueCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Issue\n     */\n    'resolutionLink': string | null;\n}\n\nexport const IssueCategoryEnum = {\n    UserCode: 'user_code',\n    Limits: 'limits',\n    Configuration: 'configuration',\n    Other: 'other'\n} as const;\n\nexport type IssueCategoryEnum = typeof IssueCategoryEnum[keyof typeof IssueCategoryEnum];\n\n/**\n * \n * @export\n * @interface IssueEvent\n */\nexport interface IssueEvent {\n    /**\n     * \n     * @type {string}\n     * @memberof IssueEvent\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IssueEvent\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {{ [key: string]: IssueGroupedDataValue; }}\n     * @memberof IssueEvent\n     */\n    'data': { [key: string]: IssueGroupedDataValue; };\n}\n/**\n * \n * @export\n * @interface IssueGroupedDataValue\n */\nexport interface IssueGroupedDataValue {\n    /**\n     * \n     * @type {string}\n     * @memberof IssueGroupedDataValue\n     */\n    'raw': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IssueGroupedDataValue\n     */\n    'pretty'?: string;\n}\n/**\n * \n * @export\n * @interface ListBotIssueEventsResponse\n */\nexport interface ListBotIssueEventsResponse {\n    /**\n     * \n     * @type {Array<ListBotIssueEventsResponseIssueEventsInner>}\n     * @memberof ListBotIssueEventsResponse\n     */\n    'issueEvents': Array<ListBotIssueEventsResponseIssueEventsInner>;\n}\n/**\n * \n * @export\n * @interface ListBotIssueEventsResponseIssueEventsInner\n */\nexport interface ListBotIssueEventsResponseIssueEventsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}\n     * @memberof ListBotIssueEventsResponseIssueEventsInner\n     */\n    'data': { [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; };\n}\n/**\n * \n * @export\n * @interface ListBotIssuesResponse\n */\nexport interface ListBotIssuesResponse {\n    /**\n     * \n     * @type {Array<ListBotIssuesResponseIssuesInner>}\n     * @memberof ListBotIssuesResponse\n     */\n    'issues': Array<ListBotIssuesResponseIssuesInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListBotIssuesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotIssuesResponseIssuesInner\n */\nexport interface ListBotIssuesResponseIssuesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'code': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'lastSeenAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'title': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'description': string;\n    /**\n     * \n     * @type {{ [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; }}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'groupedData': { [key: string]: ListBotIssuesResponseIssuesInnerGroupedDataValue; };\n    /**\n     * \n     * @type {number}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'eventsCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'category': ListBotIssuesResponseIssuesInnerCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInner\n     */\n    'resolutionLink': string | null;\n}\n\nexport const ListBotIssuesResponseIssuesInnerCategoryEnum = {\n    UserCode: 'user_code',\n    Limits: 'limits',\n    Configuration: 'configuration',\n    Other: 'other'\n} as const;\n\nexport type ListBotIssuesResponseIssuesInnerCategoryEnum = typeof ListBotIssuesResponseIssuesInnerCategoryEnum[keyof typeof ListBotIssuesResponseIssuesInnerCategoryEnum];\n\n/**\n * \n * @export\n * @interface ListBotIssuesResponseIssuesInnerGroupedDataValue\n */\nexport interface ListBotIssuesResponseIssuesInnerGroupedDataValue {\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue\n     */\n    'raw': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotIssuesResponseIssuesInnerGroupedDataValue\n     */\n    'pretty'?: string;\n}\n/**\n * \n * @export\n * @interface ListBotsResponse\n */\nexport interface ListBotsResponse {\n    /**\n     * \n     * @type {Array<ListBotsResponseBotsInner>}\n     * @memberof ListBotsResponse\n     */\n    'bots': Array<ListBotsResponseBotsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListBotsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotsResponseBotsInner\n */\nexport interface ListBotsResponseBotsInner {\n    /**\n     * User id\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'deployedAt'?: string;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponse\n */\nexport interface ListConversationsResponse {\n    /**\n     * \n     * @type {Array<Conversation>}\n     * @memberof ListConversationsResponse\n     */\n    'conversations': Array<Conversation>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListConversationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponseMeta\n */\nexport interface ListConversationsResponseMeta {\n    /**\n     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.\n     * @type {string}\n     * @memberof ListConversationsResponseMeta\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface ListEventsResponse\n */\nexport interface ListEventsResponse {\n    /**\n     * \n     * @type {Array<Event>}\n     * @memberof ListEventsResponse\n     */\n    'events': Array<Event>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListEventsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListFilesResponse\n */\nexport interface ListFilesResponse {\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof ListFilesResponse\n     */\n    'files': Array<any>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListFilesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListIntegrationsResponse\n */\nexport interface ListIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}\n     * @memberof ListIntegrationsResponse\n     */\n    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListMessagesResponse\n */\nexport interface ListMessagesResponse {\n    /**\n     * \n     * @type {Array<Message>}\n     * @memberof ListMessagesResponse\n     */\n    'messages': Array<Message>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListMessagesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListParticipantsResponse\n */\nexport interface ListParticipantsResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListParticipantsResponse\n     */\n    'participants': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListParticipantsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPersonalAccessTokensResponse\n */\nexport interface ListPersonalAccessTokensResponse {\n    /**\n     * \n     * @type {Array<ListPersonalAccessTokensResponsePatsInner>}\n     * @memberof ListPersonalAccessTokensResponse\n     */\n    'pats': Array<ListPersonalAccessTokensResponsePatsInner>;\n}\n/**\n * \n * @export\n * @interface ListPersonalAccessTokensResponsePatsInner\n */\nexport interface ListPersonalAccessTokensResponsePatsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListPersonalAccessTokensResponsePatsInner\n     */\n    'note': string;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponse\n */\nexport interface ListPublicIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponseIntegrationsInner\n */\nexport interface ListPublicIntegrationsResponseIntegrationsInner {\n    /**\n     * User id\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'id': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'name': string;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'version': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'iconUrl': string;\n}\n/**\n * \n * @export\n * @interface ListUsageHistoryResponse\n */\nexport interface ListUsageHistoryResponse {\n    /**\n     * \n     * @type {Array<Usage>}\n     * @memberof ListUsageHistoryResponse\n     */\n    'usages': Array<Usage>;\n}\n/**\n * \n * @export\n * @interface ListUsersResponse\n */\nexport interface ListUsersResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListUsersResponse\n     */\n    'users': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListUsersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponse\n */\nexport interface ListWorkspaceInvoicesResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceInvoicesResponseInvoicesInner>}\n     * @memberof ListWorkspaceInvoicesResponse\n     */\n    'invoices': Array<ListWorkspaceInvoicesResponseInvoicesInner>;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponseInvoicesInner\n */\nexport interface ListWorkspaceInvoicesResponseInvoicesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {ListWorkspaceInvoicesResponseInvoicesInnerPeriod}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'period': ListWorkspaceInvoicesResponseInvoicesInnerPeriod;\n    /**\n     * Date on which the invoice was generated.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'date': string;\n    /**\n     * Total amount to pay of the invoice.\n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'amount': number;\n    /**\n     * Currency of the invoice amount.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'currency': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'paymentStatus': ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum;\n    /**\n     * Number of times payment has been unsuccessfully attempted on the invoice.\n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'paymentAttemptCount': number | null;\n    /**\n     * Date on which the next payment attempt will be made.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'nextPaymentAttemptDate': string | null;\n    /**\n     * URL to download the PDF file of the invoice.\n     * @type {string}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInner\n     */\n    'pdfUrl': string;\n}\n\nexport const ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = {\n    Paid: 'paid',\n    Unpaid: 'unpaid'\n} as const;\n\nexport type ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum = typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum[keyof typeof ListWorkspaceInvoicesResponseInvoicesInnerPaymentStatusEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n */\nexport interface ListWorkspaceInvoicesResponseInvoicesInnerPeriod {\n    /**\n     * \n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n     */\n    'month': number;\n    /**\n     * \n     * @type {number}\n     * @memberof ListWorkspaceInvoicesResponseInvoicesInnerPeriod\n     */\n    'year': number;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponse\n */\nexport interface ListWorkspaceMembersResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceMembersResponseMembersInner>}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'members': Array<ListWorkspaceMembersResponseMembersInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponseMembersInner\n */\nexport interface ListWorkspaceMembersResponseMembersInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'role': ListWorkspaceMembersResponseMembersInnerRoleEnum;\n}\n\nexport const ListWorkspaceMembersResponseMembersInnerRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type ListWorkspaceMembersResponseMembersInnerRoleEnum = typeof ListWorkspaceMembersResponseMembersInnerRoleEnum[keyof typeof ListWorkspaceMembersResponseMembersInnerRoleEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceQuotasResponse\n */\nexport interface ListWorkspaceQuotasResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceQuotasResponseQuotasInner>}\n     * @memberof ListWorkspaceQuotasResponse\n     */\n    'quotas': Array<ListWorkspaceQuotasResponseQuotasInner>;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceQuotasResponseQuotasInner\n */\nexport interface ListWorkspaceQuotasResponseQuotasInner {\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'period': string;\n    /**\n     * Value of the quota that is used\n     * @type {number}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'value': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof ListWorkspaceQuotasResponseQuotasInner\n     */\n    'type': ListWorkspaceQuotasResponseQuotasInnerTypeEnum;\n}\n\nexport const ListWorkspaceQuotasResponseQuotasInnerTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type ListWorkspaceQuotasResponseQuotasInnerTypeEnum = typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum[keyof typeof ListWorkspaceQuotasResponseQuotasInnerTypeEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspaceUsagesResponse\n */\nexport interface ListWorkspaceUsagesResponse {\n    /**\n     * \n     * @type {Array<Usage>}\n     * @memberof ListWorkspaceUsagesResponse\n     */\n    'usages': Array<Usage>;\n}\n/**\n * \n * @export\n * @interface ListWorkspacesResponse\n */\nexport interface ListWorkspacesResponse {\n    /**\n     * \n     * @type {Array<UpdateWorkspaceResponse>}\n     * @memberof ListWorkspacesResponse\n     */\n    'workspaces': Array<UpdateWorkspaceResponse>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspacesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).\n * @export\n * @interface Message\n */\nexport interface Message {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'id': string;\n    /**\n     * Creation date of the [Message](#schema_message) in ISO 8601 format\n     * @type {string}\n     * @memberof Message\n     */\n    'createdAt': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Message\n     */\n    'type': string;\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof Message\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * Direction of the message (`incoming` or `outgoing`).\n     * @type {string}\n     * @memberof Message\n     */\n    'direction': MessageDirectionEnum;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'conversationId': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Message\n     */\n    'tags': { [key: string]: string; };\n}\n\nexport const MessageDirectionEnum = {\n    Incoming: 'incoming',\n    Outgoing: 'outgoing'\n} as const;\n\nexport type MessageDirectionEnum = typeof MessageDirectionEnum[keyof typeof MessageDirectionEnum];\n\n/**\n * \n * @export\n * @interface ModelFile\n */\nexport interface ModelFile {\n    /**\n     * ID of the bot the file will be used for\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'botId': string;\n    /**\n     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'name': string;\n    /**\n     * Accepted values: private, public\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'accessType': ModelFileAccessTypeEnum;\n    /**\n     * ID of the [File](#schema_file)\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'id': string;\n    /**\n     * Creation date of the [File](#schema_file) in ISO 8601 format\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'createdAt': string;\n    /**\n     * Size of the file in bytes\n     * @type {number}\n     * @memberof ModelFile\n     */\n    'size': number;\n    /**\n     * Public URL to the file contents, available only if the access type is public. If the file is private, use the Download endpoint to retrieve the file contents.\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'publicUrl'?: string;\n}\n\nexport const ModelFileAccessTypeEnum = {\n    Private: 'private',\n    Public: 'public'\n} as const;\n\nexport type ModelFileAccessTypeEnum = typeof ModelFileAccessTypeEnum[keyof typeof ModelFileAccessTypeEnum];\n\n/**\n * \n * @export\n * @interface PatchStateBody\n */\nexport interface PatchStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof PatchStateBody\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface PatchStateResponse\n */\nexport interface PatchStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof PatchStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface SetStateBody\n */\nexport interface SetStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof SetStateBody\n     */\n    'payload': { [key: string]: any; } | null;\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof SetStateBody\n     */\n    'expiry'?: number;\n}\n/**\n * \n * @export\n * @interface SetStateResponse\n */\nexport interface SetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof SetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface SetWorkspacePaymentMethodBody\n */\nexport interface SetWorkspacePaymentMethodBody {\n    /**\n     * ID of the Stripe PaymentMethod to attach to the workspace.\n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodBody\n     */\n    'stripePaymentMethodId': string;\n}\n/**\n * \n * @export\n * @interface SetWorkspacePaymentMethodResponse\n */\nexport interface SetWorkspacePaymentMethodResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'stripePaymentMethodId': string;\n    /**\n     * \n     * @type {GetWorkspaceBillingDetailsResponsePaymentMethod}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'paymentMethod': GetWorkspaceBillingDetailsResponsePaymentMethod | null;\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'status': SetWorkspacePaymentMethodResponseStatusEnum;\n    /**\n     * \n     * @type {SetWorkspacePaymentMethodResponseNextAction}\n     * @memberof SetWorkspacePaymentMethodResponse\n     */\n    'nextAction'?: SetWorkspacePaymentMethodResponseNextAction;\n}\n\nexport const SetWorkspacePaymentMethodResponseStatusEnum = {\n    Succeeded: 'succeeded',\n    Processing: 'processing',\n    Canceled: 'canceled',\n    RequiresConfirmation: 'requires_confirmation',\n    RequiresAction: 'requires_action',\n    RequiresPaymentMethod: 'requires_payment_method'\n} as const;\n\nexport type SetWorkspacePaymentMethodResponseStatusEnum = typeof SetWorkspacePaymentMethodResponseStatusEnum[keyof typeof SetWorkspacePaymentMethodResponseStatusEnum];\n\n/**\n * If the payment needs to be confirmed, this will contain a URL to redirect the user to so they can complete the verification process to confirm it.\n * @export\n * @interface SetWorkspacePaymentMethodResponseNextAction\n */\nexport interface SetWorkspacePaymentMethodResponseNextAction {\n    /**\n     * \n     * @type {string}\n     * @memberof SetWorkspacePaymentMethodResponseNextAction\n     */\n    'redirectToUrl': string;\n}\n/**\n * The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.\n * @export\n * @interface State\n */\nexport interface State {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'id': string;\n    /**\n     * Creation date of the [State](#schema_state) in ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [State](#schema_state) in ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'updatedAt': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'botId': string;\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'conversationId'?: string;\n    /**\n     * Id of the [User](#schema_user)\n     * @type {string}\n     * @memberof State\n     */\n    'userId'?: string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof State\n     */\n    'name': string;\n    /**\n     * Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot` or `integration`) that the state is related to\n     * @type {string}\n     * @memberof State\n     */\n    'type': StateTypeEnum;\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof State\n     */\n    'payload': { [key: string]: any; };\n}\n\nexport const StateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\n\nexport type StateTypeEnum = typeof StateTypeEnum[keyof typeof StateTypeEnum];\n\n/**\n * \n * @export\n * @interface TransferBotBody\n */\nexport interface TransferBotBody {\n    /**\n     * The ID of the workspace you want to transfer the bot to.\n     * @type {string}\n     * @memberof TransferBotBody\n     */\n    'targetWorkspaceId': string;\n}\n/**\n * \n * @export\n * @interface UpdateBotBody\n */\nexport interface UpdateBotBody {\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'url'?: string;\n    /**\n     * Type of the [Bot](#schema_bot) authentication (`iam`)\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'authentication'?: UpdateBotBodyAuthenticationEnum;\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof UpdateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBody\n     */\n    'blocked'?: boolean;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'user'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'message'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'conversation'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyStatesValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'states'?: { [key: string]: UpdateBotBodyStatesValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyRecurringEventsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'recurringEvents'?: { [key: string]: UpdateBotBodyRecurringEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyIntegrationsValue | null; }}\n     * @memberof UpdateBotBody\n     */\n    'integrations'?: { [key: string]: UpdateBotBodyIntegrationsValue | null; };\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof UpdateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n    /**\n     * Indicates if the [Bot](#schema_bot) should be executed in accelerated mode\n     * @type {boolean}\n     * @memberof UpdateBotBody\n     */\n    'alwaysAlive'?: boolean;\n}\n\nexport const UpdateBotBodyAuthenticationEnum = {\n    Iam: 'iam'\n} as const;\n\nexport type UpdateBotBodyAuthenticationEnum = typeof UpdateBotBodyAuthenticationEnum[keyof typeof UpdateBotBodyAuthenticationEnum];\n\n/**\n * Event Definition\n * @export\n * @interface UpdateBotBodyEventsValue\n */\nexport interface UpdateBotBodyEventsValue {\n    /**\n     * Title of the event\n     * @type {string}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the event\n     * @type {string}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyIntegrationsValue\n */\nexport interface UpdateBotBodyIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'enabled'?: boolean;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'configuration'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyRecurringEventsValue\n */\nexport interface UpdateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyStatesValue\n */\nexport interface UpdateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)\n     * @type {string}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'type': UpdateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const UpdateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot'\n} as const;\n\nexport type UpdateBotBodyStatesValueTypeEnum = typeof UpdateBotBodyStatesValueTypeEnum[keyof typeof UpdateBotBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateBotBodyUser\n */\nexport interface UpdateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateBotBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface UpdateBotBodyUserTagsValue\n */\nexport interface UpdateBotBodyUserTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'description'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateBotResponse\n */\nexport interface UpdateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof UpdateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface UpdateConversationBody\n */\nexport interface UpdateConversationBody {\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateConversationBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateConversationResponse\n */\nexport interface UpdateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof UpdateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBody\n */\nexport interface UpdateIntegrationBody {\n    /**\n     * \n     * @type {UpdateIntegrationBodyConfiguration}\n     * @memberof UpdateIntegrationBody\n     */\n    'configuration'?: UpdateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'channels'?: { [key: string]: UpdateIntegrationBodyChannelsValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyIdentifier}\n     * @memberof UpdateIntegrationBody\n     */\n    'identifier'?: UpdateIntegrationBodyIdentifier;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyActionsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'actions'?: { [key: string]: UpdateIntegrationBodyActionsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue | null; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyStatesValue | null; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'states'?: { [key: string]: UpdateIntegrationBodyStatesValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyUser}\n     * @memberof UpdateIntegrationBody\n     */\n    'user'?: UpdateIntegrationBodyUser;\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'description'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'url'?: string;\n}\n/**\n * Action definition\n * @export\n * @interface UpdateIntegrationBodyActionsValue\n */\nexport interface UpdateIntegrationBodyActionsValue {\n    /**\n     * Title of the action\n     * @type {string}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the action\n     * @type {string}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'input': CreateIntegrationBodyActionsValueInput;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'output': CreateIntegrationBodyActionsValueInput;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValue\n */\nexport interface UpdateIntegrationBodyChannelsValue {\n    /**\n     * Title of the channel\n     * @type {string}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the channel\n     * @type {string}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; }}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'messages'?: { [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue | null; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyChannelsValueConversation}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'conversation'?: UpdateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'message'?: UpdateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValueConversation\n */\nexport interface UpdateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * Message definition\n * @export\n * @interface UpdateIntegrationBodyChannelsValueMessagesValue\n */\nexport interface UpdateIntegrationBodyChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyConfiguration\n */\nexport interface UpdateIntegrationBodyConfiguration {\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyConfigurationIdentifier}\n     * @memberof UpdateIntegrationBodyConfiguration\n     */\n    'identifier'?: UpdateIntegrationBodyConfigurationIdentifier;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyConfigurationIdentifier\n */\nexport interface UpdateIntegrationBodyConfigurationIdentifier {\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyConfigurationIdentifier\n     */\n    'linkTemplateScript'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateIntegrationBodyConfigurationIdentifier\n     */\n    'required'?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyIdentifier\n */\nexport interface UpdateIntegrationBodyIdentifier {\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyIdentifier\n     */\n    'extractScript'?: string | null;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyIdentifier\n     */\n    'fallbackHandlerScript'?: string | null;\n}\n/**\n * State definition\n * @export\n * @interface UpdateIntegrationBodyStatesValue\n */\nexport interface UpdateIntegrationBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'type': UpdateIntegrationBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const UpdateIntegrationBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type UpdateIntegrationBodyStatesValueTypeEnum = typeof UpdateIntegrationBodyStatesValueTypeEnum[keyof typeof UpdateIntegrationBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyUser\n */\nexport interface UpdateIntegrationBodyUser {\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'creation'?: CreateIntegrationBodyUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue | null; }}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue | null; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationResponse\n */\nexport interface UpdateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof UpdateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface UpdateMessageBody\n */\nexport interface UpdateMessageBody {\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateMessageBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateMessageResponse\n */\nexport interface UpdateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof UpdateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface UpdateUserBody\n */\nexport interface UpdateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateUserBody\n     */\n    'tags'?: { [key: string]: string; };\n    /**\n     * Name of the user\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'name'?: string;\n    /**\n     * URI of the user picture\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'pictureUrl'?: string | null;\n}\n/**\n * \n * @export\n * @interface UpdateUserResponse\n */\nexport interface UpdateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof UpdateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface UpdateWorkspaceBody\n */\nexport interface UpdateWorkspaceBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceBody\n     */\n    'spendingLimit'?: number;\n}\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberBody\n */\nexport interface UpdateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberBody\n     */\n    'role'?: UpdateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberBodyRoleEnum = typeof UpdateWorkspaceMemberBodyRoleEnum[keyof typeof UpdateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberResponse\n */\nexport interface UpdateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'role': UpdateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberResponseRoleEnum = typeof UpdateWorkspaceMemberResponseRoleEnum[keyof typeof UpdateWorkspaceMemberResponseRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceResponse\n */\nexport interface UpdateWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'accountType': UpdateWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'billingVersion': UpdateWorkspaceResponseBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'plan': UpdateWorkspaceResponsePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const UpdateWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceResponseAccountTypeEnum = typeof UpdateWorkspaceResponseAccountTypeEnum[keyof typeof UpdateWorkspaceResponseAccountTypeEnum];\nexport const UpdateWorkspaceResponseBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type UpdateWorkspaceResponseBillingVersionEnum = typeof UpdateWorkspaceResponseBillingVersionEnum[keyof typeof UpdateWorkspaceResponseBillingVersionEnum];\nexport const UpdateWorkspaceResponsePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type UpdateWorkspaceResponsePlanEnum = typeof UpdateWorkspaceResponsePlanEnum[keyof typeof UpdateWorkspaceResponsePlanEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceResponse1\n */\nexport interface UpdateWorkspaceResponse1 {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'accountType': UpdateWorkspaceResponse1AccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'billingVersion': UpdateWorkspaceResponse1BillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'plan': UpdateWorkspaceResponse1PlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse1\n     */\n    'spendingLimit': number;\n}\n\nexport const UpdateWorkspaceResponse1AccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceResponse1AccountTypeEnum = typeof UpdateWorkspaceResponse1AccountTypeEnum[keyof typeof UpdateWorkspaceResponse1AccountTypeEnum];\nexport const UpdateWorkspaceResponse1BillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type UpdateWorkspaceResponse1BillingVersionEnum = typeof UpdateWorkspaceResponse1BillingVersionEnum[keyof typeof UpdateWorkspaceResponse1BillingVersionEnum];\nexport const UpdateWorkspaceResponse1PlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type UpdateWorkspaceResponse1PlanEnum = typeof UpdateWorkspaceResponse1PlanEnum[keyof typeof UpdateWorkspaceResponse1PlanEnum];\n\n/**\n * \n * @export\n * @interface Usage\n */\nexport interface Usage {\n    /**\n     * Id of the usage that it is linked to. It can either be a workspace id or a bot id\n     * @type {string}\n     * @memberof Usage\n     */\n    'id': string;\n    /**\n     * Period of the quota that it is applied to\n     * @type {string}\n     * @memberof Usage\n     */\n    'period': string;\n    /**\n     * Value of the current usage\n     * @type {number}\n     * @memberof Usage\n     */\n    'value': number;\n    /**\n     * Quota of the current usage\n     * @type {number}\n     * @memberof Usage\n     */\n    'quota': number;\n    /**\n     * Usage type that can be used\n     * @type {string}\n     * @memberof Usage\n     */\n    'type': UsageTypeEnum;\n}\n\nexport const UsageTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\n\nexport type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];\n\n/**\n * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.\n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof User\n     */\n    'id': string;\n    /**\n     * Creation date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'updatedAt': string;\n    /**\n     * Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof User\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'name'?: string;\n    /**\n     * Picture URL of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'pictureUrl'?: string;\n}\n/**\n * \n * @export\n * @interface Workspace\n */\nexport interface Workspace {\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'accountType': WorkspaceAccountTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'billingVersion': WorkspaceBillingVersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'plan': WorkspacePlanEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workspace\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'spendingLimit': number;\n}\n\nexport const WorkspaceAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type WorkspaceAccountTypeEnum = typeof WorkspaceAccountTypeEnum[keyof typeof WorkspaceAccountTypeEnum];\nexport const WorkspaceBillingVersionEnum = {\n    V1: 'v1',\n    V2: 'v2'\n} as const;\n\nexport type WorkspaceBillingVersionEnum = typeof WorkspaceBillingVersionEnum[keyof typeof WorkspaceBillingVersionEnum];\nexport const WorkspacePlanEnum = {\n    Community: 'community',\n    Team: 'team',\n    Enterprise: 'enterprise'\n} as const;\n\nexport type WorkspacePlanEnum = typeof WorkspacePlanEnum[keyof typeof WorkspacePlanEnum];\n\n/**\n * \n * @export\n * @interface WorkspaceMember\n */\nexport interface WorkspaceMember {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkspaceMember\n     */\n    'role': WorkspaceMemberRoleEnum;\n}\n\nexport const WorkspaceMemberRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type WorkspaceMemberRoleEnum = typeof WorkspaceMemberRoleEnum[keyof typeof WorkspaceMemberRoleEnum];\n\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant: async (id: string, addParticipantBody?: AddParticipantBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('addParticipant', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addParticipantBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {string} id Workspace ID\n         * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        breakDownWorkspaceUsageByBot: async (id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('breakDownWorkspaceUsageByBot', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('breakDownWorkspaceUsageByBot', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/usages/by-bot`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction: async (callActionBody?: CallActionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/actions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(callActionBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Change AI Spend quota\n         * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeAISpendQuota: async (changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/quotas/ai-spend`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(changeAISpendQuotaBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Change workspace billing plan\n         * @param {string} id Workspace ID\n         * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeWorkspacePlan: async (id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('changeWorkspacePlan', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/change-plan`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(changeWorkspacePlanBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {string} id Workspace ID\n         * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        chargeWorkspaceUnpaidInvoices: async (id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('chargeWorkspaceUnpaidInvoices', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/invoices/charge-unpaid`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(chargeWorkspaceUnpaidInvoicesBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration: async (configureIntegrationBody?: ConfigureIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/integrations/configure`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(configureIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot: async (createBotBody?: CreateBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation: async (createConversationBody?: CreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent: async (createEventBody?: CreateEventBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createEventBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create File\n         * @param {CreateFileBody} [createFileBody] Create File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile: async (createFileBody?: CreateFileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/storage/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createFileBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration: async (createIntegrationBody?: CreateIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage: async (createMessageBody?: CreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a PAT\n         * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPersonalAccessToken: async (createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/pats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPersonalAccessTokenBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser: async (createUserBody?: CreateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create workspace\n         * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspace: async (createWorkspaceBody?: CreateWorkspaceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember: async (createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBotIssue: async (id: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteBotIssue', 'id', id)\n            // verify required parameter 'issueId' is not null or undefined\n            assertParamExists('deleteBotIssue', 'issueId', issueId)\n            const localVarPath = `/v1/admin/bots/{id}/issues/{issueId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"issueId\"}}`, encodeURIComponent(String(issueId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete a PAT\n         * @param {string} id ID of Personal Access Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePersonalAccessToken: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deletePersonalAccessToken', 'id', id)\n            const localVarPath = `/v1/admin/account/pats/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspace: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Download File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('downloadFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}/download`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {string} id Workspace ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuditRecords: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getAuditRecords', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/audit-records`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics: async (id: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotAnalytics', 'id', id)\n            // verify required parameter 'startDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'startDate', startDate)\n            // verify required parameter 'endDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'endDate', endDate)\n            const localVarPath = `/v1/admin/bots/{id}/analytics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (startDate !== undefined) {\n                localVarQueryParameter['startDate'] = startDate;\n            }\n\n            if (endDate !== undefined) {\n                localVarQueryParameter['endDate'] = endDate;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs: async (id: string, timeStart: string, timeEnd: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotLogs', 'id', id)\n            // verify required parameter 'timeStart' is not null or undefined\n            assertParamExists('getBotLogs', 'timeStart', timeStart)\n            // verify required parameter 'timeEnd' is not null or undefined\n            assertParamExists('getBotLogs', 'timeEnd', timeEnd)\n            const localVarPath = `/v1/admin/bots/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (timeStart !== undefined) {\n                localVarQueryParameter['timeStart'] = timeStart;\n            }\n\n            if (timeEnd !== undefined) {\n                localVarQueryParameter['timeEnd'] = timeEnd;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat: async (id: string, type: GetBotWebchatTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotWebchat', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getBotWebchat', 'type', type)\n            const localVarPath = `/v1/admin/bots/{id}/webchat`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getEvent', 'id', id)\n            const localVarPath = `/v1/chat/events/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName: async (name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getIntegrationByName', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getIntegrationByName', 'version', version)\n            const localVarPath = `/v1/admin/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs: async (id: string, timeStart: string, timeEnd: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'id', id)\n            // verify required parameter 'timeStart' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'timeStart', timeStart)\n            // verify required parameter 'timeEnd' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'timeEnd', timeEnd)\n            const localVarPath = `/v1/admin/integrations/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (timeStart !== undefined) {\n                localVarQueryParameter['timeStart'] = timeStart;\n            }\n\n            if (timeEnd !== undefined) {\n                localVarQueryParameter['timeEnd'] = timeEnd;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation: async (getOrCreateConversationBody?: GetOrCreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage: async (getOrCreateMessageBody?: GetOrCreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser: async (getOrCreateUserBody?: GetOrCreateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getParticipant', 'userId', userId)\n            const localVarPath = `/v1/chat/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration: async (name: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getPublicIntegration', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getPublicIntegration', 'version', version)\n            const localVarPath = `/v1/admin/hub/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getPublicIntegrationById', 'id', id)\n            const localVarPath = `/v1/admin/hub/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState: async (type: GetStateTypeEnum, id: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get usage\n         * @param {GetUsageTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsage: async (type: GetUsageTypeEnum, id: string, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getUsage', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUsage', 'id', id)\n            const localVarPath = `/v1/admin/usages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get billing details of workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceBillingDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspaceBillingDetails', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/details`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace quota\n         * @param {string} id Workspace ID\n         * @param {GetWorkspaceQuotaTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceQuota: async (id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspaceQuota', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getWorkspaceQuota', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/quota`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect: async (introspectBody?: IntrospectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/introspect`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(introspectBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssueEvents: async (id: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listBotIssueEvents', 'id', id)\n            // verify required parameter 'issueId' is not null or undefined\n            assertParamExists('listBotIssueEvents', 'issueId', issueId)\n            const localVarPath = `/v1/admin/bots/{id}/issues/{issueId}/events`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"issueId\"}}`, encodeURIComponent(String(issueId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Bot Issues\n         * @param {string} id Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssues: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listBotIssues', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/issues`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List bots\n         * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots: async (dev?: boolean, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (dev !== undefined) {\n                localVarQueryParameter['dev'] = dev;\n            }\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations: async (nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (participantIds) {\n                localVarQueryParameter['participantIds'] = participantIds;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {string} [conversationId] Filter by conversation id\n         * @param {string} [userId] Filter by user id\n         * @param {string} [messageId] Filter by message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents: async (nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (userId !== undefined) {\n                localVarQueryParameter['userId'] = userId;\n            }\n\n            if (messageId !== undefined) {\n                localVarQueryParameter['messageId'] = messageId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Files\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles: async (botId: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'botId' is not null or undefined\n            assertParamExists('listFiles', 'botId', botId)\n            const localVarPath = `/v1/storage/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (botId !== undefined) {\n                localVarQueryParameter['botId'] = botId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations: async (nextToken?: string, name?: string, version?: string, dev?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n            if (dev !== undefined) {\n                localVarQueryParameter['dev'] = dev;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants: async (id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listParticipants', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPersonalAccessTokens: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/account/pats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations: async (nextToken?: string, name?: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/hub/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get usage history\n         * @param {ListUsageHistoryTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsageHistory: async (type: ListUsageHistoryTypeEnum, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('listUsageHistory', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listUsageHistory', 'id', id)\n            const localVarPath = `/v1/admin/usages/{id}/history`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceInvoices: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceInvoices', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/invoices`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers: async (nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspace quotas\n         * @param {string} id Workspace ID\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceQuotas: async (id: string, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceQuotas', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/quotas`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspace usages\n         * @param {string} id Workspace ID\n         * @param {ListWorkspaceUsagesTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceUsages: async (id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listWorkspaceUsages', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('listWorkspaceUsages', 'type', type)\n            const localVarPath = `/v1/admin/workspaces/{id}/usages`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces: async (nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState: async (type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('patchState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('patchState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('patchState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(patchStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('removeParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('removeParticipant', 'userId', userId)\n            const localVarPath = `/v1/chat/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState: async (type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('setState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('setState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('setState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {string} id Workspace ID\n         * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setWorkspacePaymentMethod: async (id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('setWorkspacePaymentMethod', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}/billing/payment-method`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setWorkspacePaymentMethodBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot: async (id: string, transferBotBody?: TransferBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('transferBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/transfer`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot: async (id: string, updateBotBody?: UpdateBotBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation: async (id: string, updateConversationBody?: UpdateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration ID\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration: async (id: string, updateIntegrationBody?: UpdateIntegrationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage: async (id: string, updateMessageBody?: UpdateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser: async (id: string, updateUserBody?: UpdateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace: async (id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember: async (id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addParticipant(id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addParticipant(id, addParticipantBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {string} id Workspace ID\n         * @param {BreakDownWorkspaceUsageByBotTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async breakDownWorkspaceUsageByBot(id: string, type: BreakDownWorkspaceUsageByBotTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreakDownWorkspaceUsageByBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.breakDownWorkspaceUsageByBot(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async callAction(callActionBody?: CallActionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallActionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.callAction(callActionBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Change AI Spend quota\n         * @param {ChangeAISpendQuotaBody} [changeAISpendQuotaBody] New AI Spend quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeAISpendQuota(changeAISpendQuotaBody?: ChangeAISpendQuotaBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAISpendQuota(changeAISpendQuotaBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Change workspace billing plan\n         * @param {string} id Workspace ID\n         * @param {ChangeWorkspacePlanBody} [changeWorkspacePlanBody] Billing plan to change the workspace to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeWorkspacePlan(id: string, changeWorkspacePlanBody?: ChangeWorkspacePlanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeWorkspacePlanResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.changeWorkspacePlan(id, changeWorkspacePlanBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {string} id Workspace ID\n         * @param {ChargeWorkspaceUnpaidInvoicesBody} [chargeWorkspaceUnpaidInvoicesBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async chargeWorkspaceUnpaidInvoices(id: string, chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.chargeWorkspaceUnpaidInvoices(id, chargeWorkspaceUnpaidInvoicesBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async configureIntegration(configureIntegrationBody?: ConfigureIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.configureIntegration(configureIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createBot(createBotBody?: CreateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createBot(createBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createConversation(createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(createConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createEvent(createEventBody?: CreateEventBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create File\n         * @param {CreateFileBody} [createFileBody] Create File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFile(createFileBody?: CreateFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(createFileBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createIntegration(createIntegrationBody?: CreateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegration(createIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createMessage(createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(createMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create a PAT\n         * @param {CreatePersonalAccessTokenBody} [createPersonalAccessTokenBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPersonalAccessToken(createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPersonalAccessToken(createPersonalAccessTokenBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Create workspace\n         * @param {CreateWorkspaceBody} [createWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkspace(createWorkspaceBody?: CreateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspace(createWorkspaceBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkspaceMember(createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspaceMember(createWorkspaceMemberBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBot(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBotIssue(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBotIssue(id, issueId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegration(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete a PAT\n         * @param {string} id ID of Personal Access Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deletePersonalAccessToken(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePersonalAccessToken(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Delete workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspace(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkspaceMember(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspaceMember(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Download File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async downloadFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {string} id Workspace ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAuditRecords(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuditRecordsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditRecords(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBot(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBot(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotAnalytics(id: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotAnalyticsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotAnalytics(id, startDate, endDate, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotLogs(id, timeStart, timeEnd, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotWebchat(id: string, type: GetBotWebchatTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotWebchatResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotWebchat(id, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getConversation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegration(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationByName(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationByNameResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationByName(name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration ID\n         * @param {string} timeStart Beginning of the time range to get logs from\n         * @param {string} timeEnd End of the time range to get logs from\n         * @param {string} [nextToken] Token to get the next page of logs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationLogs(id: string, timeStart: string, timeEnd: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationLogs(id, timeStart, timeEnd, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateConversation(getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateConversation(getOrCreateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateMessage(getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateMessage(getOrCreateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateUser(getOrCreateUserBody?: GetOrCreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateUser(getOrCreateUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipant(id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegration(name: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegration(name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegrationById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationByIdResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegrationById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getState(type: GetStateTypeEnum, id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getState(type, id, name, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get usage\n         * @param {GetUsageTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUsage(type: GetUsageTypeEnum, id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsage(type, id, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspace(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspace(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get billing details of workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspaceBillingDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceBillingDetailsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceBillingDetails(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get workspace quota\n         * @param {string} id Workspace ID\n         * @param {GetWorkspaceQuotaTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspaceQuota(id: string, type: GetWorkspaceQuotaTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceQuotaResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceQuota(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async introspect(introspectBody?: IntrospectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.introspect(introspectBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {string} id Bot ID\n         * @param {string} issueId Issue ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBotIssueEvents(id: string, issueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssueEventsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBotIssueEvents(id, issueId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Bot Issues\n         * @param {string} id Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBotIssues(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotIssuesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBotIssues(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List bots\n         * @param {boolean} [dev] If true, only dev bots are returned. Otherwise, only production bots are returned.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBots(dev?: boolean, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBots(dev, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listConversations(nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversations(nextToken, tags, participantIds, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {string} [conversationId] Filter by conversation id\n         * @param {string} [userId] Filter by user id\n         * @param {string} [messageId] Filter by message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listEvents(nextToken?: string, type?: string, conversationId?: string, userId?: string, messageId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(nextToken, type, conversationId, userId, messageId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Files\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listFiles(botId: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFilesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(botId, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {boolean} [dev] If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listIntegrations(nextToken?: string, name?: string, version?: string, dev?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listIntegrations(nextToken, name, version, dev, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listMessages(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMessagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessages(nextToken, conversationId, tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listParticipants(id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listParticipants(id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPersonalAccessTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPersonalAccessTokensResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPersonalAccessTokens(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPublicIntegrations(nextToken?: string, name?: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPublicIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPublicIntegrations(nextToken, name, version, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Get usage history\n         * @param {ListUsageHistoryTypeEnum} type Type of usage\n         * @param {string} id ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsageHistory(type: ListUsageHistoryTypeEnum, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsageHistoryResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsageHistory(type, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsers(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(nextToken, conversationId, tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceInvoices(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceInvoicesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceInvoices(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceMembers(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceMembersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceMembers(nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspace quotas\n         * @param {string} id Workspace ID\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceQuotas(id: string, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceQuotasResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceQuotas(id, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspace usages\n         * @param {string} id Workspace ID\n         * @param {ListWorkspaceUsagesTypeEnum} type Type of usage\n         * @param {string} [period] Period to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceUsages(id: string, type: ListWorkspaceUsagesTypeEnum, period?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceUsagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceUsages(id, type, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaces(nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspacesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaces(nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async patchState(type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.patchState(type, id, name, patchStateBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeParticipant(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParticipant(id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setState(type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setState(type, id, name, setStateBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {string} id Workspace ID\n         * @param {SetWorkspacePaymentMethodBody} [setWorkspacePaymentMethodBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setWorkspacePaymentMethod(id: string, setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetWorkspacePaymentMethodResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspacePaymentMethod(id, setWorkspacePaymentMethodBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferBot(id: string, transferBotBody?: TransferBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBot(id, transferBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBot(id: string, updateBotBody?: UpdateBotBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBot(id, updateBotBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateConversation(id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(id, updateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration ID\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateIntegration(id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegration(id, updateIntegrationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMessage(id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(id, updateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUser(id: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, updateUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspace(id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceResponse1>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspace(id, updateWorkspaceBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspaceMember(id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspaceMember(id, updateWorkspaceMemberBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n         * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse> {\n            return localVarFp.addParticipant(requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Break down workspace usage by bot\n         * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig): AxiosPromise<BreakDownWorkspaceUsageByBotResponse> {\n            return localVarFp.breakDownWorkspaceUsageByBot(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Call an action\n         * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CallActionResponse> {\n            return localVarFp.callAction(requestParameters.callActionBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Change AI Spend quota\n         * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeAISpendQuota(requestParameters: DefaultApiChangeAISpendQuotaRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.changeAISpendQuota(requestParameters.changeAISpendQuotaBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Change workspace billing plan\n         * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeWorkspacePlanResponse> {\n            return localVarFp.changeWorkspacePlan(requestParameters.id, requestParameters.changeWorkspacePlanBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Charge unpaid invoices of a workspace.\n         * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeWorkspaceUnpaidInvoicesResponse> {\n            return localVarFp.chargeWorkspaceUnpaidInvoices(requestParameters.id, requestParameters.chargeWorkspaceUnpaidInvoicesBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create bot\n         * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateBotResponse> {\n            return localVarFp.createBot(requestParameters.createBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse> {\n            return localVarFp.createConversation(requestParameters.createConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse> {\n            return localVarFp.createEvent(requestParameters.createEventBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create File\n         * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateFileResponse> {\n            return localVarFp.createFile(requestParameters.createFileBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create integration\n         * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateIntegrationResponse> {\n            return localVarFp.createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse> {\n            return localVarFp.createMessage(requestParameters.createMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a PAT\n         * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPersonalAccessToken(requestParameters: DefaultApiCreatePersonalAccessTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreatePersonalAccessTokenResponse> {\n            return localVarFp.createPersonalAccessToken(requestParameters.createPersonalAccessTokenBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse> {\n            return localVarFp.createUser(requestParameters.createUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create workspace\n         * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspace(requestParameters: DefaultApiCreateWorkspaceRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceResponse> {\n            return localVarFp.createWorkspace(requestParameters.createWorkspaceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Add a member to the workspace\n         * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateWorkspaceMemberResponse> {\n            return localVarFp.createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete bot\n         * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete Bot Issue\n         * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteBotIssue(requestParameters.id, requestParameters.issueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete File\n         * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete integration\n         * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete a PAT\n         * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deletePersonalAccessToken(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete workspace\n         * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteWorkspaceMember(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Download File\n         * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: AxiosRequestConfig): AxiosPromise<any> {\n            return localVarFp.downloadFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get details of the account authenticating with this endpoint.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAccount(options?: AxiosRequestConfig): AxiosPromise<GetAccountResponse> {\n            return localVarFp.getAccount(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the audit records of a workspace, sorted from most recent to oldest.\n         * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<GetAuditRecordsResponse> {\n            return localVarFp.getAuditRecords(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot details\n         * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotResponse> {\n            return localVarFp.getBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot analytics\n         * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotAnalyticsResponse> {\n            return localVarFp.getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot logs\n         * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotLogsResponse> {\n            return localVarFp.getBotLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig): AxiosPromise<GetBotWebchatResponse> {\n            return localVarFp.getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse> {\n            return localVarFp.getConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<GetEventResponse> {\n            return localVarFp.getEvent(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get File\n         * @param {DefaultApiGetFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFile(requestParameters: DefaultApiGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<GetFileResponse> {\n            return localVarFp.getFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationResponse> {\n            return localVarFp.getIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationByNameResponse> {\n            return localVarFp.getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration logs\n         * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig): AxiosPromise<GetIntegrationLogsResponse> {\n            return localVarFp.getIntegrationLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse> {\n            return localVarFp.getMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse> {\n            return localVarFp.getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse> {\n            return localVarFp.getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateUserResponse> {\n            return localVarFp.getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse> {\n            return localVarFp.getParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by name and version\n         * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationResponse> {\n            return localVarFp.getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by Id\n         * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GetPublicIntegrationByIdResponse> {\n            return localVarFp.getPublicIntegrationById(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig): AxiosPromise<GetStateResponse> {\n            return localVarFp.getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get usage\n         * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig): AxiosPromise<GetUsageResponse> {\n            return localVarFp.getUsage(requestParameters.type, requestParameters.id, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse> {\n            return localVarFp.getUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace details\n         * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceResponse> {\n            return localVarFp.getWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get billing details of workspace\n         * @param {DefaultApiGetWorkspaceBillingDetailsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceBillingDetails(requestParameters: DefaultApiGetWorkspaceBillingDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceBillingDetailsResponse> {\n            return localVarFp.getWorkspaceBillingDetails(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace quota\n         * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<GetWorkspaceQuotaResponse> {\n            return localVarFp.getWorkspaceQuota(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Introspect the API\n         * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntrospectResponse> {\n            return localVarFp.introspect(requestParameters.introspectBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Events for a Bot Issue\n         * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssueEventsResponse> {\n            return localVarFp.listBotIssueEvents(requestParameters.id, requestParameters.issueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Bot Issues\n         * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig): AxiosPromise<ListBotIssuesResponse> {\n            return localVarFp.listBotIssues(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List bots\n         * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListBotsResponse> {\n            return localVarFp.listBots(requestParameters.dev, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse> {\n            return localVarFp.listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListEventsResponse> {\n            return localVarFp.listEvents(requestParameters.nextToken, requestParameters.type, requestParameters.conversationId, requestParameters.userId, requestParameters.messageId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Files\n         * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<ListFilesResponse> {\n            return localVarFp.listFiles(requestParameters.botId, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List integrations\n         * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListIntegrationsResponse> {\n            return localVarFp.listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, requestParameters.dev, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListMessagesResponse> {\n            return localVarFp.listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n         * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse> {\n            return localVarFp.listParticipants(requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List PATs (Personal Access Tokens) of account.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPersonalAccessTokens(options?: AxiosRequestConfig): AxiosPromise<ListPersonalAccessTokensResponse> {\n            return localVarFp.listPersonalAccessTokens(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List public integration\n         * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListPublicIntegrationsResponse> {\n            return localVarFp.listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get usage history\n         * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ListUsageHistoryResponse> {\n            return localVarFp.listUsageHistory(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListUsersResponse> {\n            return localVarFp.listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List invoices billed to workspace\n         * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceInvoicesResponse> {\n            return localVarFp.listWorkspaceInvoices(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceMembersResponse> {\n            return localVarFp.listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspace quotas\n         * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceQuotasResponse> {\n            return localVarFp.listWorkspaceQuotas(requestParameters.id, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspace usages\n         * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkspaceUsagesResponse> {\n            return localVarFp.listWorkspaceUsages(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListWorkspacesResponse> {\n            return localVarFp.listWorkspaces(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig): AxiosPromise<PatchStateResponse> {\n            return localVarFp.patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.removeParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig): AxiosPromise<SetStateResponse> {\n            return localVarFp.setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n         * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<SetWorkspacePaymentMethodResponse> {\n            return localVarFp.setWorkspacePaymentMethod(requestParameters.id, requestParameters.setWorkspacePaymentMethodBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update bot\n         * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateBotResponse> {\n            return localVarFp.updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse> {\n            return localVarFp.updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update integration\n         * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateIntegrationResponse> {\n            return localVarFp.updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a message\n         * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse> {\n            return localVarFp.updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse> {\n            return localVarFp.updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update workspace\n         * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceResponse1> {\n            return localVarFp.updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the member of a workspace\n         * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateWorkspaceMemberResponse> {\n            return localVarFp.updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * Request parameters for addParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiAddParticipantRequest\n */\nexport interface DefaultApiAddParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly id: string\n\n    /**\n     * Participant data\n     * @type {AddParticipantBody}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly addParticipantBody?: AddParticipantBody\n}\n\n/**\n * Request parameters for breakDownWorkspaceUsageByBot operation in DefaultApi.\n * @export\n * @interface DefaultApiBreakDownWorkspaceUsageByBotRequest\n */\nexport interface DefaultApiBreakDownWorkspaceUsageByBotRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly type: BreakDownWorkspaceUsageByBotTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiBreakDownWorkspaceUsageByBot\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for callAction operation in DefaultApi.\n * @export\n * @interface DefaultApiCallActionRequest\n */\nexport interface DefaultApiCallActionRequest {\n    /**\n     * Action payload\n     * @type {CallActionBody}\n     * @memberof DefaultApiCallAction\n     */\n    readonly callActionBody?: CallActionBody\n}\n\n/**\n * Request parameters for changeAISpendQuota operation in DefaultApi.\n * @export\n * @interface DefaultApiChangeAISpendQuotaRequest\n */\nexport interface DefaultApiChangeAISpendQuotaRequest {\n    /**\n     * New AI Spend quota\n     * @type {ChangeAISpendQuotaBody}\n     * @memberof DefaultApiChangeAISpendQuota\n     */\n    readonly changeAISpendQuotaBody?: ChangeAISpendQuotaBody\n}\n\n/**\n * Request parameters for changeWorkspacePlan operation in DefaultApi.\n * @export\n * @interface DefaultApiChangeWorkspacePlanRequest\n */\nexport interface DefaultApiChangeWorkspacePlanRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiChangeWorkspacePlan\n     */\n    readonly id: string\n\n    /**\n     * Billing plan to change the workspace to\n     * @type {ChangeWorkspacePlanBody}\n     * @memberof DefaultApiChangeWorkspacePlan\n     */\n    readonly changeWorkspacePlanBody?: ChangeWorkspacePlanBody\n}\n\n/**\n * Request parameters for chargeWorkspaceUnpaidInvoices operation in DefaultApi.\n * @export\n * @interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest\n */\nexport interface DefaultApiChargeWorkspaceUnpaidInvoicesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices\n     */\n    readonly id: string\n\n    /**\n     * \n     * @type {ChargeWorkspaceUnpaidInvoicesBody}\n     * @memberof DefaultApiChargeWorkspaceUnpaidInvoices\n     */\n    readonly chargeWorkspaceUnpaidInvoicesBody?: ChargeWorkspaceUnpaidInvoicesBody\n}\n\n/**\n * Request parameters for configureIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiConfigureIntegrationRequest\n */\nexport interface DefaultApiConfigureIntegrationRequest {\n    /**\n     * Configuration of the integration\n     * @type {ConfigureIntegrationBody}\n     * @memberof DefaultApiConfigureIntegration\n     */\n    readonly configureIntegrationBody?: ConfigureIntegrationBody\n}\n\n/**\n * Request parameters for createBot operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateBotRequest\n */\nexport interface DefaultApiCreateBotRequest {\n    /**\n     * Bot metadata\n     * @type {CreateBotBody}\n     * @memberof DefaultApiCreateBot\n     */\n    readonly createBotBody?: CreateBotBody\n}\n\n/**\n * Request parameters for createConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateConversationRequest\n */\nexport interface DefaultApiCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {CreateConversationBody}\n     * @memberof DefaultApiCreateConversation\n     */\n    readonly createConversationBody?: CreateConversationBody\n}\n\n/**\n * Request parameters for createEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateEventRequest\n */\nexport interface DefaultApiCreateEventRequest {\n    /**\n     * Event data\n     * @type {CreateEventBody}\n     * @memberof DefaultApiCreateEvent\n     */\n    readonly createEventBody?: CreateEventBody\n}\n\n/**\n * Request parameters for createFile operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateFileRequest\n */\nexport interface DefaultApiCreateFileRequest {\n    /**\n     * Create File\n     * @type {CreateFileBody}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly createFileBody?: CreateFileBody\n}\n\n/**\n * Request parameters for createIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateIntegrationRequest\n */\nexport interface DefaultApiCreateIntegrationRequest {\n    /**\n     * Integration\n     * @type {CreateIntegrationBody}\n     * @memberof DefaultApiCreateIntegration\n     */\n    readonly createIntegrationBody?: CreateIntegrationBody\n}\n\n/**\n * Request parameters for createMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateMessageRequest\n */\nexport interface DefaultApiCreateMessageRequest {\n    /**\n     * Message data\n     * @type {CreateMessageBody}\n     * @memberof DefaultApiCreateMessage\n     */\n    readonly createMessageBody?: CreateMessageBody\n}\n\n/**\n * Request parameters for createPersonalAccessToken operation in DefaultApi.\n * @export\n * @interface DefaultApiCreatePersonalAccessTokenRequest\n */\nexport interface DefaultApiCreatePersonalAccessTokenRequest {\n    /**\n     * \n     * @type {CreatePersonalAccessTokenBody}\n     * @memberof DefaultApiCreatePersonalAccessToken\n     */\n    readonly createPersonalAccessTokenBody?: CreatePersonalAccessTokenBody\n}\n\n/**\n * Request parameters for createUser operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateUserRequest\n */\nexport interface DefaultApiCreateUserRequest {\n    /**\n     * User data\n     * @type {CreateUserBody}\n     * @memberof DefaultApiCreateUser\n     */\n    readonly createUserBody?: CreateUserBody\n}\n\n/**\n * Request parameters for createWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateWorkspaceRequest\n */\nexport interface DefaultApiCreateWorkspaceRequest {\n    /**\n     * Workspace metadata\n     * @type {CreateWorkspaceBody}\n     * @memberof DefaultApiCreateWorkspace\n     */\n    readonly createWorkspaceBody?: CreateWorkspaceBody\n}\n\n/**\n * Request parameters for createWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateWorkspaceMemberRequest\n */\nexport interface DefaultApiCreateWorkspaceMemberRequest {\n    /**\n     * Workspace member metadata\n     * @type {CreateWorkspaceMemberBody}\n     * @memberof DefaultApiCreateWorkspaceMember\n     */\n    readonly createWorkspaceMemberBody?: CreateWorkspaceMemberBody\n}\n\n/**\n * Request parameters for deleteBot operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteBotRequest\n */\nexport interface DefaultApiDeleteBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteBotIssue operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteBotIssueRequest\n */\nexport interface DefaultApiDeleteBotIssueRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBotIssue\n     */\n    readonly id: string\n\n    /**\n     * Issue ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBotIssue\n     */\n    readonly issueId: string\n}\n\n/**\n * Request parameters for deleteConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteConversationRequest\n */\nexport interface DefaultApiDeleteConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiDeleteConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteFile operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteFileRequest\n */\nexport interface DefaultApiDeleteFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiDeleteFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteIntegrationRequest\n */\nexport interface DefaultApiDeleteIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiDeleteIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteMessageRequest\n */\nexport interface DefaultApiDeleteMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiDeleteMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deletePersonalAccessToken operation in DefaultApi.\n * @export\n * @interface DefaultApiDeletePersonalAccessTokenRequest\n */\nexport interface DefaultApiDeletePersonalAccessTokenRequest {\n    /**\n     * ID of Personal Access Token\n     * @type {string}\n     * @memberof DefaultApiDeletePersonalAccessToken\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteUser operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteUserRequest\n */\nexport interface DefaultApiDeleteUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiDeleteUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteWorkspaceRequest\n */\nexport interface DefaultApiDeleteWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiDeleteWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteWorkspaceMemberRequest\n */\nexport interface DefaultApiDeleteWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiDeleteWorkspaceMember\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for downloadFile operation in DefaultApi.\n * @export\n * @interface DefaultApiDownloadFileRequest\n */\nexport interface DefaultApiDownloadFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiDownloadFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getAuditRecords operation in DefaultApi.\n * @export\n * @interface DefaultApiGetAuditRecordsRequest\n */\nexport interface DefaultApiGetAuditRecordsRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetAuditRecords\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiGetAuditRecords\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getBot operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotRequest\n */\nexport interface DefaultApiGetBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getBotAnalytics operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotAnalyticsRequest\n */\nexport interface DefaultApiGetBotAnalyticsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly id: string\n\n    /**\n     * Start date/time (inclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly startDate: string\n\n    /**\n     * End date/time (exclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly endDate: string\n}\n\n/**\n * Request parameters for getBotLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotLogsRequest\n */\nexport interface DefaultApiGetBotLogsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly id: string\n\n    /**\n     * Beginning of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly timeStart: string\n\n    /**\n     * End of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly timeEnd: string\n\n    /**\n     * Token to get the next page of logs\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getBotWebchat operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotWebchatRequest\n */\nexport interface DefaultApiGetBotWebchatRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly id: string\n\n    /**\n     * type of script to get\n     * @type {'preconfigured' | 'configurable' | 'fullscreen' | 'sharableUrl'}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly type: GetBotWebchatTypeEnum\n}\n\n/**\n * Request parameters for getConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetConversationRequest\n */\nexport interface DefaultApiGetConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiGetEventRequest\n */\nexport interface DefaultApiGetEventRequest {\n    /**\n     * Event id\n     * @type {string}\n     * @memberof DefaultApiGetEvent\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getFile operation in DefaultApi.\n * @export\n * @interface DefaultApiGetFileRequest\n */\nexport interface DefaultApiGetFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiGetFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationRequest\n */\nexport interface DefaultApiGetIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegrationByName operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationByNameRequest\n */\nexport interface DefaultApiGetIntegrationByNameRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getIntegrationLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationLogsRequest\n */\nexport interface DefaultApiGetIntegrationLogsRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly id: string\n\n    /**\n     * Beginning of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly timeStart: string\n\n    /**\n     * End of the time range to get logs from\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly timeEnd: string\n\n    /**\n     * Token to get the next page of logs\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for getMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetMessageRequest\n */\nexport interface DefaultApiGetMessageRequest {\n    /**\n     * Id of the Message\n     * @type {string}\n     * @memberof DefaultApiGetMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getOrCreateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateConversationRequest\n */\nexport interface DefaultApiGetOrCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {GetOrCreateConversationBody}\n     * @memberof DefaultApiGetOrCreateConversation\n     */\n    readonly getOrCreateConversationBody?: GetOrCreateConversationBody\n}\n\n/**\n * Request parameters for getOrCreateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateMessageRequest\n */\nexport interface DefaultApiGetOrCreateMessageRequest {\n    /**\n     * Message data\n     * @type {GetOrCreateMessageBody}\n     * @memberof DefaultApiGetOrCreateMessage\n     */\n    readonly getOrCreateMessageBody?: GetOrCreateMessageBody\n}\n\n/**\n * Request parameters for getOrCreateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateUserRequest\n */\nexport interface DefaultApiGetOrCreateUserRequest {\n    /**\n     * User data\n     * @type {GetOrCreateUserBody}\n     * @memberof DefaultApiGetOrCreateUser\n     */\n    readonly getOrCreateUserBody?: GetOrCreateUserBody\n}\n\n/**\n * Request parameters for getParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiGetParticipantRequest\n */\nexport interface DefaultApiGetParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for getPublicIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationRequest\n */\nexport interface DefaultApiGetPublicIntegrationRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getPublicIntegrationById operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationByIdRequest\n */\nexport interface DefaultApiGetPublicIntegrationByIdRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegrationById\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getState operation in DefaultApi.\n * @export\n * @interface DefaultApiGetStateRequest\n */\nexport interface DefaultApiGetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiGetState\n     */\n    readonly type: GetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly name: string\n}\n\n/**\n * Request parameters for getUsage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUsageRequest\n */\nexport interface DefaultApiGetUsageRequest {\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly type: GetUsageTypeEnum\n\n    /**\n     * ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n     * @type {string}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly id: string\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiGetUsage\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for getUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUserRequest\n */\nexport interface DefaultApiGetUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiGetUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceRequest\n */\nexport interface DefaultApiGetWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspaceBillingDetails operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceBillingDetailsRequest\n */\nexport interface DefaultApiGetWorkspaceBillingDetailsRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspaceBillingDetails\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspaceQuota operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceQuotaRequest\n */\nexport interface DefaultApiGetWorkspaceQuotaRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly type: GetWorkspaceQuotaTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiGetWorkspaceQuota\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for introspect operation in DefaultApi.\n * @export\n * @interface DefaultApiIntrospectRequest\n */\nexport interface DefaultApiIntrospectRequest {\n    /**\n     * \n     * @type {IntrospectBody}\n     * @memberof DefaultApiIntrospect\n     */\n    readonly introspectBody?: IntrospectBody\n}\n\n/**\n * Request parameters for listBotIssueEvents operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotIssueEventsRequest\n */\nexport interface DefaultApiListBotIssueEventsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssueEvents\n     */\n    readonly id: string\n\n    /**\n     * Issue ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssueEvents\n     */\n    readonly issueId: string\n}\n\n/**\n * Request parameters for listBotIssues operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotIssuesRequest\n */\nexport interface DefaultApiListBotIssuesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListBotIssues\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListBotIssues\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listBots operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotsRequest\n */\nexport interface DefaultApiListBotsRequest {\n    /**\n     * If true, only dev bots are returned. Otherwise, only production bots are returned.\n     * @type {boolean}\n     * @memberof DefaultApiListBots\n     */\n    readonly dev?: boolean\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListBots\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listConversations operation in DefaultApi.\n * @export\n * @interface DefaultApiListConversationsRequest\n */\nexport interface DefaultApiListConversationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListConversations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListConversations\n     */\n    readonly tags?: { [key: string]: string; }\n\n    /**\n     * Filter by participant ids\n     * @type {Array<string>}\n     * @memberof DefaultApiListConversations\n     */\n    readonly participantIds?: Array<string>\n}\n\n/**\n * Request parameters for listEvents operation in DefaultApi.\n * @export\n * @interface DefaultApiListEventsRequest\n */\nexport interface DefaultApiListEventsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by event type\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly type?: string\n\n    /**\n     * Filter by conversation id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by user id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly userId?: string\n\n    /**\n     * Filter by message id\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly messageId?: string\n}\n\n/**\n * Request parameters for listFiles operation in DefaultApi.\n * @export\n * @interface DefaultApiListFilesRequest\n */\nexport interface DefaultApiListFilesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly botId: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListIntegrationsRequest\n */\nexport interface DefaultApiListIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly version?: string\n\n    /**\n     * If true, only dev integrations are returned. Otherwise, only production integrations are returned.\n     * @type {boolean}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly dev?: boolean\n}\n\n/**\n * Request parameters for listMessages operation in DefaultApi.\n * @export\n * @interface DefaultApiListMessagesRequest\n */\nexport interface DefaultApiListMessagesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly nextToken?: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListMessages\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listParticipants operation in DefaultApi.\n * @export\n * @interface DefaultApiListParticipantsRequest\n */\nexport interface DefaultApiListParticipantsRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listPublicIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListPublicIntegrationsRequest\n */\nexport interface DefaultApiListPublicIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly version?: string\n}\n\n/**\n * Request parameters for listUsageHistory operation in DefaultApi.\n * @export\n * @interface DefaultApiListUsageHistoryRequest\n */\nexport interface DefaultApiListUsageHistoryRequest {\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiListUsageHistory\n     */\n    readonly type: ListUsageHistoryTypeEnum\n\n    /**\n     * ID of a bot or a workspace, depending on the \\&quot;type\\&quot; parameter\n     * @type {string}\n     * @memberof DefaultApiListUsageHistory\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for listUsers operation in DefaultApi.\n * @export\n * @interface DefaultApiListUsersRequest\n */\nexport interface DefaultApiListUsersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by conversation id. This will return all users that have participated in the conversation.\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListUsers\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listWorkspaceInvoices operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceInvoicesRequest\n */\nexport interface DefaultApiListWorkspaceInvoicesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceInvoices\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for listWorkspaceMembers operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceMembersRequest\n */\nexport interface DefaultApiListWorkspaceMembersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceMembers\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listWorkspaceQuotas operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceQuotasRequest\n */\nexport interface DefaultApiListWorkspaceQuotasRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceQuotas\n     */\n    readonly id: string\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceQuotas\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for listWorkspaceUsages operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceUsagesRequest\n */\nexport interface DefaultApiListWorkspaceUsagesRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly id: string\n\n    /**\n     * Type of usage\n     * @type {'invocation_timeout' | 'invocation_calls' | 'storage_count' | 'bot_count' | 'knowledgebase_vector_storage' | 'workspace_ratelimit' | 'table_row_count' | 'workspace_member_count' | 'integrations_owned_count' | 'ai_spend' | 'openai_spend' | 'bing_search_spend' | 'always_alive'}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly type: ListWorkspaceUsagesTypeEnum\n\n    /**\n     * Period to get\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceUsages\n     */\n    readonly period?: string\n}\n\n/**\n * Request parameters for listWorkspaces operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspacesRequest\n */\nexport interface DefaultApiListWorkspacesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaces\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for patchState operation in DefaultApi.\n * @export\n * @interface DefaultApiPatchStateRequest\n */\nexport interface DefaultApiPatchStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiPatchState\n     */\n    readonly type: PatchStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {PatchStateBody}\n     * @memberof DefaultApiPatchState\n     */\n    readonly patchStateBody?: PatchStateBody\n}\n\n/**\n * Request parameters for removeParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiRemoveParticipantRequest\n */\nexport interface DefaultApiRemoveParticipantRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for setState operation in DefaultApi.\n * @export\n * @interface DefaultApiSetStateRequest\n */\nexport interface DefaultApiSetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiSetState\n     */\n    readonly type: SetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {SetStateBody}\n     * @memberof DefaultApiSetState\n     */\n    readonly setStateBody?: SetStateBody\n}\n\n/**\n * Request parameters for setWorkspacePaymentMethod operation in DefaultApi.\n * @export\n * @interface DefaultApiSetWorkspacePaymentMethodRequest\n */\nexport interface DefaultApiSetWorkspacePaymentMethodRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiSetWorkspacePaymentMethod\n     */\n    readonly id: string\n\n    /**\n     * \n     * @type {SetWorkspacePaymentMethodBody}\n     * @memberof DefaultApiSetWorkspacePaymentMethod\n     */\n    readonly setWorkspacePaymentMethodBody?: SetWorkspacePaymentMethodBody\n}\n\n/**\n * Request parameters for transferBot operation in DefaultApi.\n * @export\n * @interface DefaultApiTransferBotRequest\n */\nexport interface DefaultApiTransferBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly id: string\n\n    /**\n     * Bot transfer request\n     * @type {TransferBotBody}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly transferBotBody?: TransferBotBody\n}\n\n/**\n * Request parameters for updateBot operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateBotRequest\n */\nexport interface DefaultApiUpdateBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly id: string\n\n    /**\n     * Bot metadata\n     * @type {UpdateBotBody}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly updateBotBody?: UpdateBotBody\n}\n\n/**\n * Request parameters for updateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateConversationRequest\n */\nexport interface DefaultApiUpdateConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly id: string\n\n    /**\n     * Conversation data\n     * @type {UpdateConversationBody}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly updateConversationBody?: UpdateConversationBody\n}\n\n/**\n * Request parameters for updateIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateIntegrationRequest\n */\nexport interface DefaultApiUpdateIntegrationRequest {\n    /**\n     * Integration ID\n     * @type {string}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly id: string\n\n    /**\n     * Integration\n     * @type {UpdateIntegrationBody}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly updateIntegrationBody?: UpdateIntegrationBody\n}\n\n/**\n * Request parameters for updateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateMessageRequest\n */\nexport interface DefaultApiUpdateMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly id: string\n\n    /**\n     * Message data\n     * @type {UpdateMessageBody}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly updateMessageBody?: UpdateMessageBody\n}\n\n/**\n * Request parameters for updateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateUserRequest\n */\nexport interface DefaultApiUpdateUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly id: string\n\n    /**\n     * User data\n     * @type {UpdateUserBody}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly updateUserBody?: UpdateUserBody\n}\n\n/**\n * Request parameters for updateWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceRequest\n */\nexport interface DefaultApiUpdateWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly id: string\n\n    /**\n     * Workspace metadata\n     * @type {UpdateWorkspaceBody}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly updateWorkspaceBody?: UpdateWorkspaceBody\n}\n\n/**\n * Request parameters for updateWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceMemberRequest\n */\nexport interface DefaultApiUpdateWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly id: string\n\n    /**\n     * Workspace member metadata\n     * @type {UpdateWorkspaceMemberBody}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Add a [Participant](#schema_participant) to a [Conversation](#schema_conversation).\n     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).addParticipant(requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Break down workspace usage by bot\n     * @param {DefaultApiBreakDownWorkspaceUsageByBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public breakDownWorkspaceUsageByBot(requestParameters: DefaultApiBreakDownWorkspaceUsageByBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).breakDownWorkspaceUsageByBot(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Call an action\n     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).callAction(requestParameters.callActionBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Change AI Spend quota\n     * @param {DefaultApiChangeAISpendQuotaRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changeAISpendQuota(requestParameters: DefaultApiChangeAISpendQuotaRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).changeAISpendQuota(requestParameters.changeAISpendQuotaBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Change workspace billing plan\n     * @param {DefaultApiChangeWorkspacePlanRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public changeWorkspacePlan(requestParameters: DefaultApiChangeWorkspacePlanRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).changeWorkspacePlan(requestParameters.id, requestParameters.changeWorkspacePlanBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Charge unpaid invoices of a workspace.\n     * @param {DefaultApiChargeWorkspaceUnpaidInvoicesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public chargeWorkspaceUnpaidInvoices(requestParameters: DefaultApiChargeWorkspaceUnpaidInvoicesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).chargeWorkspaceUnpaidInvoices(requestParameters.id, requestParameters.chargeWorkspaceUnpaidInvoicesBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * An integration can call this endpoint to configure itself\n     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create bot\n     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createBot(requestParameters.createBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createConversation(requestParameters.createConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createEvent(requestParameters.createEventBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create File\n     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createFile(requestParameters.createFileBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create integration\n     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createMessage(requestParameters.createMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a PAT\n     * @param {DefaultApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createPersonalAccessToken(requestParameters: DefaultApiCreatePersonalAccessTokenRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createPersonalAccessToken(requestParameters.createPersonalAccessTokenBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createUser(requestParameters.createUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create workspace\n     * @param {DefaultApiCreateWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createWorkspace(requestParameters: DefaultApiCreateWorkspaceRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createWorkspace(requestParameters.createWorkspaceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Add a member to the workspace\n     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete bot\n     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete Bot Issue\n     * @param {DefaultApiDeleteBotIssueRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteBotIssue(requestParameters: DefaultApiDeleteBotIssueRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteBotIssue(requestParameters.id, requestParameters.issueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete File\n     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete integration\n     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Message](#schema_message). It cannot be undone.\n     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete a PAT\n     * @param {DefaultApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deletePersonalAccessToken(requestParameters: DefaultApiDeletePersonalAccessTokenRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deletePersonalAccessToken(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [User](#schema_user). It cannot be undone.\n     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete workspace\n     * @param {DefaultApiDeleteWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteWorkspace(requestParameters: DefaultApiDeleteWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a member of a workspace\n     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteWorkspaceMember(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Download File\n     * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).downloadFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get details of the account authenticating with this endpoint.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAccount(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAccount(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the audit records of a workspace, sorted from most recent to oldest.\n     * @param {DefaultApiGetAuditRecordsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAuditRecords(requestParameters: DefaultApiGetAuditRecordsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getAuditRecords(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot details\n     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBot(requestParameters: DefaultApiGetBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot analytics\n     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot logs\n     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the webchat code/URL for a bot\n     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Event](#schema_event) object for a valid identifiers.\n     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getEvent(requestParameters: DefaultApiGetEventRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getEvent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get File\n     * @param {DefaultApiGetFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getFile(requestParameters: DefaultApiGetFileRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration logs\n     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationLogs(requestParameters.id, requestParameters.timeStart, requestParameters.timeEnd, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier.\n     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by name and version\n     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by Id\n     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegrationById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [State](#schema_state) object for a valid identifiers.\n     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getState(requestParameters: DefaultApiGetStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get usage\n     * @param {DefaultApiGetUsageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUsage(requestParameters: DefaultApiGetUsageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUsage(requestParameters.type, requestParameters.id, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier.\n     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace details\n     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get billing details of workspace\n     * @param {DefaultApiGetWorkspaceBillingDetailsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspaceBillingDetails(requestParameters: DefaultApiGetWorkspaceBillingDetailsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspaceBillingDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace quota\n     * @param {DefaultApiGetWorkspaceQuotaRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspaceQuota(requestParameters: DefaultApiGetWorkspaceQuotaRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspaceQuota(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Introspect the API\n     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).introspect(requestParameters.introspectBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Events for a Bot Issue\n     * @param {DefaultApiListBotIssueEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBotIssueEvents(requestParameters: DefaultApiListBotIssueEventsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBotIssueEvents(requestParameters.id, requestParameters.issueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Bot Issues\n     * @param {DefaultApiListBotIssuesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBotIssues(requestParameters: DefaultApiListBotIssuesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBotIssues(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List bots\n     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBots(requestParameters.dev, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listEvents(requestParameters.nextToken, requestParameters.type, requestParameters.conversationId, requestParameters.userId, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Files\n     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listFiles(requestParameters: DefaultApiListFilesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listFiles(requestParameters.botId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List integrations\n     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, requestParameters.dev, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Participant](#schema_participant) for a given [Conversation](#schema_conversation).\n     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listParticipants(requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List PATs (Personal Access Tokens) of account.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listPersonalAccessTokens(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listPersonalAccessTokens(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List public integration\n     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get usage history\n     * @param {DefaultApiListUsageHistoryRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listUsageHistory(requestParameters: DefaultApiListUsageHistoryRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listUsageHistory(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List invoices billed to workspace\n     * @param {DefaultApiListWorkspaceInvoicesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceInvoices(requestParameters: DefaultApiListWorkspaceInvoicesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceInvoices(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Lists all the members in a workspace\n     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspace quotas\n     * @param {DefaultApiListWorkspaceQuotasRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceQuotas(requestParameters: DefaultApiListWorkspaceQuotasRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceQuotas(requestParameters.id, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspace usages\n     * @param {DefaultApiListWorkspaceUsagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceUsages(requestParameters: DefaultApiListWorkspaceUsagesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceUsages(requestParameters.id, requestParameters.type, requestParameters.period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspaces the user has access to\n     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaces(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public patchState(requestParameters: DefaultApiPatchStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a [Participant](#schema_participant) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).removeParticipant(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setState(requestParameters: DefaultApiSetStateRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Set the Stripe PaymentMethod to use for billing the workspace. To create a PaymentMethod, use the Stripe API or SDK with our Stripe Publishable Key which is listed in this documentation.\n     * @param {DefaultApiSetWorkspacePaymentMethodRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setWorkspacePaymentMethod(requestParameters: DefaultApiSetWorkspacePaymentMethodRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setWorkspacePaymentMethod(requestParameters.id, requestParameters.setWorkspacePaymentMethodBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public transferBot(requestParameters: DefaultApiTransferBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update bot\n     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update integration\n     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a message\n     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update workspace\n     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the member of a workspace\n     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const BreakDownWorkspaceUsageByBotTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type BreakDownWorkspaceUsageByBotTypeEnum = typeof BreakDownWorkspaceUsageByBotTypeEnum[keyof typeof BreakDownWorkspaceUsageByBotTypeEnum];\n/**\n * @export\n */\nexport const GetBotWebchatTypeEnum = {\n    Preconfigured: 'preconfigured',\n    Configurable: 'configurable',\n    Fullscreen: 'fullscreen',\n    SharableUrl: 'sharableUrl'\n} as const;\nexport type GetBotWebchatTypeEnum = typeof GetBotWebchatTypeEnum[keyof typeof GetBotWebchatTypeEnum];\n/**\n * @export\n */\nexport const GetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type GetStateTypeEnum = typeof GetStateTypeEnum[keyof typeof GetStateTypeEnum];\n/**\n * @export\n */\nexport const GetUsageTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type GetUsageTypeEnum = typeof GetUsageTypeEnum[keyof typeof GetUsageTypeEnum];\n/**\n * @export\n */\nexport const GetWorkspaceQuotaTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type GetWorkspaceQuotaTypeEnum = typeof GetWorkspaceQuotaTypeEnum[keyof typeof GetWorkspaceQuotaTypeEnum];\n/**\n * @export\n */\nexport const ListUsageHistoryTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type ListUsageHistoryTypeEnum = typeof ListUsageHistoryTypeEnum[keyof typeof ListUsageHistoryTypeEnum];\n/**\n * @export\n */\nexport const ListWorkspaceUsagesTypeEnum = {\n    InvocationTimeout: 'invocation_timeout',\n    InvocationCalls: 'invocation_calls',\n    StorageCount: 'storage_count',\n    BotCount: 'bot_count',\n    KnowledgebaseVectorStorage: 'knowledgebase_vector_storage',\n    WorkspaceRatelimit: 'workspace_ratelimit',\n    TableRowCount: 'table_row_count',\n    WorkspaceMemberCount: 'workspace_member_count',\n    IntegrationsOwnedCount: 'integrations_owned_count',\n    AiSpend: 'ai_spend',\n    OpenaiSpend: 'openai_spend',\n    BingSearchSpend: 'bing_search_spend',\n    AlwaysAlive: 'always_alive'\n} as const;\nexport type ListWorkspaceUsagesTypeEnum = typeof ListWorkspaceUsagesTypeEnum[keyof typeof ListWorkspaceUsagesTypeEnum];\n/**\n * @export\n */\nexport const PatchStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type PatchStateTypeEnum = typeof PatchStateTypeEnum[keyof typeof PatchStateTypeEnum];\n/**\n * @export\n */\nexport const SetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type SetStateTypeEnum = typeof SetStateTypeEnum[keyof typeof SetStateTypeEnum];\n\n\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.15.6\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://api.botpress.cloud\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.15.6\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport crypto from 'crypto'\n\nconst codes = {\n  HTTP_STATUS_BAD_REQUEST: 400,\n  HTTP_STATUS_UNAUTHORIZED: 401,\n  HTTP_STATUS_PAYMENT_REQUIRED: 402,\n  HTTP_STATUS_FORBIDDEN: 403,\n  HTTP_STATUS_NOT_FOUND: 404,\n  HTTP_STATUS_METHOD_NOT_ALLOWED: 405,\n  HTTP_STATUS_REQUEST_TIMEOUT: 408,\n  HTTP_STATUS_CONFLICT: 409,\n  HTTP_STATUS_PAYLOAD_TOO_LARGE: 413,\n  HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: 415,\n  HTTP_STATUS_TOO_MANY_REQUESTS: 429,\n  HTTP_STATUS_INTERNAL_SERVER_ERROR: 500,\n  HTTP_STATUS_NOT_IMPLEMENTED: 501,\n  HTTP_STATUS_BAD_GATEWAY: 502,\n  HTTP_STATUS_SERVICE_UNAVAILABLE: 503,\n  HTTP_STATUS_GATEWAY_TIMEOUT: 504,\n} as const\n\ntype ErrorCode = typeof codes[keyof typeof codes]\n\ndeclare const window: any\ntype CryptoLib = { getRandomValues(array: Uint8Array): Uint8Array }\n\nconst cryptoLibPolyfill: CryptoLib = {\n  // Fallback in case crypto isn't available.\n  getRandomValues: (array: Uint8Array) => new Uint8Array(array.map(() => Math.floor(Math.random() * 256))),\n}\n\nlet cryptoLib: CryptoLib =\n  typeof window !== 'undefined' && typeof window.document !== 'undefined'\n    ? window.crypto // Note: On browsers we need to use window.crypto instead of the imported crypto module as the latter is externalized and doesn't have getRandomValues().\n    : crypto\n\nif (!cryptoLib.getRandomValues) {\n  // Use a polyfill in older environments that have a crypto implementaton missing getRandomValues()\n  cryptoLib = cryptoLibPolyfill\n}\n\nabstract class BaseApiError<Code extends ErrorCode, Type extends string, Description extends string> extends Error {\n  public readonly isApiError = true\n\n  constructor(\n    public readonly code: Code,\n    public readonly description: Description,\n    public readonly type: Type,\n    public override readonly message: string,\n    public readonly error?: Error,\n    public readonly id?: string\n  ) {\n    super(message)\n\n    if (!this.id) {\n      this.id = BaseApiError.generateId()\n    }\n  }\n\n  format() {\n    return `[${this.type}] ${this.message} (Error ID: ${this.id})`\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      code: this.code,\n      type: this.type,\n      message: this.message,\n    }\n  }\n\n  static generateId() {\n    const prefix = this.getPrefix();\n    const timestamp = new Date().toISOString().replace(/[\\-:TZ]/g, \"\").split(\".\")[0] // UTC time in YYMMDDHHMMSS format\n\n    const randomSuffixByteLength = 4\n    const randomHexSuffix = Array.from(cryptoLib.getRandomValues(new Uint8Array(randomSuffixByteLength)))\n      .map(x => x.toString(16).padStart(2, '0'))\n      .join('')\n      .toUpperCase()\n    \n    return `${prefix}_${timestamp}x${randomHexSuffix}`\n  }\n\n  private static getPrefix() {\n    if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {\n      // Browser environment\n      return 'err_bwsr'\n    }\n    return 'err'\n  }\n}\n\nconst isObject = (obj: unknown): obj is object => typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n\nexport const isApiError = (thrown: unknown): thrown is ApiError => {\n  return thrown instanceof BaseApiError || isObject(thrown) && (thrown as ApiError).isApiError === true\n}\n\ntype UnknownType = 'Unknown'\n\n/**\n *  An unknown error occurred\n */\nexport class UnknownError extends BaseApiError<500, UnknownType, 'An unknown error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An unknown error occurred', 'Unknown', message, error, id)\n  }\n}\n\ntype InternalType = 'Internal'\n\n/**\n *  An internal error occurred\n */\nexport class InternalError extends BaseApiError<500, InternalType, 'An internal error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An internal error occurred', 'Internal', message, error, id)\n  }\n}\n\ntype UnauthorizedType = 'Unauthorized'\n\n/**\n *  The request requires to be authenticated.\n */\nexport class UnauthorizedError extends BaseApiError<401, UnauthorizedType, 'The request requires to be authenticated.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(401, 'The request requires to be authenticated.', 'Unauthorized', message, error, id)\n  }\n}\n\ntype ForbiddenType = 'Forbidden'\n\n/**\n *  The requested action can\\'t be peform by this resource.\n */\nexport class ForbiddenError extends BaseApiError<403, ForbiddenType, 'The requested action can\\'t be peform by this resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The requested action can\\'t be peform by this resource.', 'Forbidden', message, error, id)\n  }\n}\n\ntype PayloadTooLargeType = 'PayloadTooLarge'\n\n/**\n *  The request payload is too large.\n */\nexport class PayloadTooLargeError extends BaseApiError<413, PayloadTooLargeType, 'The request payload is too large.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request payload is too large.', 'PayloadTooLarge', message, error, id)\n  }\n}\n\ntype InvalidPayloadType = 'InvalidPayload'\n\n/**\n *  The request payload is invalid.\n */\nexport class InvalidPayloadError extends BaseApiError<400, InvalidPayloadType, 'The request payload is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The request payload is invalid.', 'InvalidPayload', message, error, id)\n  }\n}\n\ntype UnsupportedMediaTypeType = 'UnsupportedMediaType'\n\n/**\n *  The request is invalid because the content-type is not supported.\n */\nexport class UnsupportedMediaTypeError extends BaseApiError<415, UnsupportedMediaTypeType, 'The request is invalid because the content-type is not supported.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(415, 'The request is invalid because the content-type is not supported.', 'UnsupportedMediaType', message, error, id)\n  }\n}\n\ntype MethodNotFoundType = 'MethodNotFound'\n\n/**\n *  The requested method does not exist.\n */\nexport class MethodNotFoundError extends BaseApiError<405, MethodNotFoundType, 'The requested method does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(405, 'The requested method does not exist.', 'MethodNotFound', message, error, id)\n  }\n}\n\ntype ResourceNotFoundType = 'ResourceNotFound'\n\n/**\n *  The requested resource does not exist.\n */\nexport class ResourceNotFoundError extends BaseApiError<404, ResourceNotFoundType, 'The requested resource does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(404, 'The requested resource does not exist.', 'ResourceNotFound', message, error, id)\n  }\n}\n\ntype InvalidJsonSchemaType = 'InvalidJsonSchema'\n\n/**\n *  The provided JSON schema is invalid.\n */\nexport class InvalidJsonSchemaError extends BaseApiError<400, InvalidJsonSchemaType, 'The provided JSON schema is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided JSON schema is invalid.', 'InvalidJsonSchema', message, error, id)\n  }\n}\n\ntype InvalidDataFormatType = 'InvalidDataFormat'\n\n/**\n *  The provided data doesn\\'t respect the provided JSON schema.\n */\nexport class InvalidDataFormatError extends BaseApiError<400, InvalidDataFormatType, 'The provided data doesn\\'t respect the provided JSON schema.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided data doesn\\'t respect the provided JSON schema.', 'InvalidDataFormat', message, error, id)\n  }\n}\n\ntype InvalidIdentifierType = 'InvalidIdentifier'\n\n/**\n *  The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.\n */\nexport class InvalidIdentifierError extends BaseApiError<400, InvalidIdentifierType, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.', 'InvalidIdentifier', message, error, id)\n  }\n}\n\ntype RelationConflictType = 'RelationConflict'\n\n/**\n *  The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.\n */\nexport class RelationConflictError extends BaseApiError<409, RelationConflictType, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.', 'RelationConflict', message, error, id)\n  }\n}\n\ntype ReferenceNotFoundType = 'ReferenceNotFound'\n\n/**\n *  The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.\n */\nexport class ReferenceNotFoundError extends BaseApiError<400, ReferenceNotFoundType, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.', 'ReferenceNotFound', message, error, id)\n  }\n}\n\ntype InvalidQueryType = 'InvalidQuery'\n\n/**\n *  The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.\n */\nexport class InvalidQueryError extends BaseApiError<400, InvalidQueryType, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.', 'InvalidQuery', message, error, id)\n  }\n}\n\ntype RuntimeType = 'Runtime'\n\n/**\n *  An error happened during the execution of a runtime (bot or integration).\n */\nexport class RuntimeError extends BaseApiError<400, RuntimeType, 'An error happened during the execution of a runtime (bot or integration).'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'An error happened during the execution of a runtime (bot or integration).', 'Runtime', message, error, id)\n  }\n}\n\ntype AlreadyExistsType = 'AlreadyExists'\n\n/**\n *  The record attempted to be created already exists.\n */\nexport class AlreadyExistsError extends BaseApiError<409, AlreadyExistsType, 'The record attempted to be created already exists.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The record attempted to be created already exists.', 'AlreadyExists', message, error, id)\n  }\n}\n\ntype RateLimitedType = 'RateLimited'\n\n/**\n *  The request has been rate limited.\n */\nexport class RateLimitedError extends BaseApiError<429, RateLimitedType, 'The request has been rate limited.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(429, 'The request has been rate limited.', 'RateLimited', message, error, id)\n  }\n}\n\ntype PaymentRequiredType = 'PaymentRequired'\n\n/**\n *  A payment is required to perform this request.\n */\nexport class PaymentRequiredError extends BaseApiError<402, PaymentRequiredType, 'A payment is required to perform this request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(402, 'A payment is required to perform this request.', 'PaymentRequired', message, error, id)\n  }\n}\n\ntype QuotaExceededType = 'QuotaExceeded'\n\n/**\n *  The request exceeds the allowed quota. Quotas are a soft limit that can be increased.\n */\nexport class QuotaExceededError extends BaseApiError<403, QuotaExceededType, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.', 'QuotaExceeded', message, error, id)\n  }\n}\n\ntype LimitExceededType = 'LimitExceeded'\n\n/**\n *  The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.\n */\nexport class LimitExceededError extends BaseApiError<413, LimitExceededType, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.', 'LimitExceeded', message, error, id)\n  }\n}\n\nexport type ErrorType =\n  | 'Unknown'\n  | 'Internal'\n  | 'Unauthorized'\n  | 'Forbidden'\n  | 'PayloadTooLarge'\n  | 'InvalidPayload'\n  | 'UnsupportedMediaType'\n  | 'MethodNotFound'\n  | 'ResourceNotFound'\n  | 'InvalidJsonSchema'\n  | 'InvalidDataFormat'\n  | 'InvalidIdentifier'\n  | 'RelationConflict'\n  | 'ReferenceNotFound'\n  | 'InvalidQuery'\n  | 'Runtime'\n  | 'AlreadyExists'\n  | 'RateLimited'\n  | 'PaymentRequired'\n  | 'QuotaExceeded'\n  | 'LimitExceeded'\n\nexport type ApiError =\n  | UnknownError\n  | InternalError\n  | UnauthorizedError\n  | ForbiddenError\n  | PayloadTooLargeError\n  | InvalidPayloadError\n  | UnsupportedMediaTypeError\n  | MethodNotFoundError\n  | ResourceNotFoundError\n  | InvalidJsonSchemaError\n  | InvalidDataFormatError\n  | InvalidIdentifierError\n  | RelationConflictError\n  | ReferenceNotFoundError\n  | InvalidQueryError\n  | RuntimeError\n  | AlreadyExistsError\n  | RateLimitedError\n  | PaymentRequiredError\n  | QuotaExceededError\n  | LimitExceededError\n\nconst errorTypes: { [type: string]: new (message: string, error?: Error, id?: string) => ApiError } = {\n  Unknown: UnknownError,\n  Internal: InternalError,\n  Unauthorized: UnauthorizedError,\n  Forbidden: ForbiddenError,\n  PayloadTooLarge: PayloadTooLargeError,\n  InvalidPayload: InvalidPayloadError,\n  UnsupportedMediaType: UnsupportedMediaTypeError,\n  MethodNotFound: MethodNotFoundError,\n  ResourceNotFound: ResourceNotFoundError,\n  InvalidJsonSchema: InvalidJsonSchemaError,\n  InvalidDataFormat: InvalidDataFormatError,\n  InvalidIdentifier: InvalidIdentifierError,\n  RelationConflict: RelationConflictError,\n  ReferenceNotFound: ReferenceNotFoundError,\n  InvalidQuery: InvalidQueryError,\n  Runtime: RuntimeError,\n  AlreadyExists: AlreadyExistsError,\n  RateLimited: RateLimitedError,\n  PaymentRequired: PaymentRequiredError,\n  QuotaExceeded: QuotaExceededError,\n  LimitExceeded: LimitExceededError,\n}\n\nexport const errorFrom = (err: unknown): ApiError => {\n  if (isApiError(err)) {\n    return err\n  }\n  else if (err instanceof Error) {\n    return new UnknownError(err.message, err)\n  }\n  else if (typeof err === 'string') {\n    return new UnknownError(err)\n  }\n  else {\n    return getApiErrorFromObject(err)\n  }\n}\n\nfunction getApiErrorFromObject(err: any) {\n  // Check if it's an deserialized API error object\n  if (typeof err === 'object' && 'code' in err && 'type' in err && 'id' in err && 'message' in err && typeof err.type === 'string' && typeof err.message === 'string') {\n    const ErrorClass = errorTypes[err.type]\n    if (!ErrorClass) {\n      return new UnknownError(`An unclassified API error occurred: ${err.message} (Type: ${err.type}, Code: ${err.code})`)\n    }\n\n    return new ErrorClass(err.message, undefined, <string>err.id || 'UNKNOWN') // If error ID was not received do not pass undefined to generate a new one, flag it as UNKNOWN so we can fix the issue.\n  }\n\n  return new UnknownError('An invalid error occurred: ' + JSON.stringify(err))\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "AlreadyExistsError", "Client", "ForbiddenError", "InternalError", "InvalidDataFormatError", "InvalidIdentifierError", "InvalidJsonSchemaError", "InvalidPayloadError", "InvalidQueryError", "LimitExceededError", "MethodNotFoundError", "PayloadTooLargeError", "PaymentRequiredError", "QuotaExceededError", "RateLimitedError", "ReferenceNotFoundError", "RelationConflictError", "ResourceNotFoundError", "RuntimeError", "UnauthorizedError", "UnknownError", "UnsupportedMediaTypeError", "axios", "errorFrom", "isApiError", "__toCommonJS", "import_axios", "import_browser_or_node", "defaultApiUrl", "defaultTimeout", "apiUrlEnvName", "botIdEnvName", "integrationIdEnvName", "workspaceIdEnvName", "tokenEnvName", "getClientConfig", "clientProps", "props", "readEnvConfig", "headers", "apiUrl", "timeout", "getNodeConfig", "config", "token", "import_axios", "import_axios", "import_axios", "BASE_PATH", "BaseAPI", "configuration", "basePath", "BASE_PATH", "axios", "globalAxios", "RequiredError", "field", "msg", "DUMMY_BASE_URL", "assertParamExists", "functionName", "paramName", "paramValue", "RequiredError", "setFlattenedQueryParams", "urlSearchParams", "parameter", "key", "item", "currentKey", "setSearchParams", "url", "objects", "searchParams", "serializeDataIfNeeded", "value", "requestOptions", "configuration", "nonString", "toPathString", "createRequestFunction", "axiosArgs", "globalAxios", "BASE_PATH", "axios", "basePath", "axiosRequestArgs", "DefaultApiAxiosParamCreator", "configuration", "id", "addParticipantBody", "options", "assertParamExists", "localVarPath", "localVarUrlObj", "DUMMY_BASE_URL", "baseOptions", "localVarRequestOptions", "localVarHeaderParameter", "localVarQueryParameter", "setSearchParams", "headersFromBaseOptions", "serializeDataIfNeeded", "toPathString", "type", "period", "callActionBody", "changeAISpendQuotaBody", "changeWorkspacePlanBody", "chargeWorkspaceUnpaidInvoicesBody", "configureIntegrationBody", "createBotBody", "createConversationBody", "createEventBody", "createFileBody", "createIntegrationBody", "createMessageBody", "createPersonalAccessTokenBody", "createUserBody", "createWorkspaceBody", "createWorkspaceMemberBody", "issueId", "nextToken", "startDate", "endDate", "timeStart", "timeEnd", "name", "version", "getOrCreateConversationBody", "getOrCreateMessageBody", "getOrCreateUserBody", "userId", "introspectBody", "dev", "tags", "participantIds", "conversationId", "messageId", "botId", "patchStateBody", "setStateBody", "setWorkspacePaymentMethodBody", "transferBotBody", "updateBotBody", "updateConversationBody", "updateIntegrationBody", "updateMessageBody", "updateUserBody", "updateWorkspaceBody", "updateWorkspaceMemberBody", "DefaultApiFp", "localVarAxiosParamCreator", "localVarAxiosArgs", "createRequestFunction", "globalAxios", "BASE_PATH", "DefaultApi", "BaseAPI", "requestParameters", "options", "DefaultApiFp", "request", "import_crypto", "cryptoLibPolyfill", "array", "cryptoLib", "crypto", "BaseApiError", "code", "description", "type", "message", "error", "id", "prefix", "timestamp", "randomSuffixByteLength", "randomHexSuffix", "x", "isObject", "obj", "isApiError", "thrown", "UnknownError", "InternalError", "UnauthorizedError", "ForbiddenError", "PayloadTooLargeError", "InvalidPayloadError", "UnsupportedMediaTypeError", "MethodNotFoundError", "ResourceNotFoundError", "InvalidJsonSchemaError", "InvalidDataFormatError", "InvalidIdentifierError", "RelationConflictError", "ReferenceNotFoundError", "InvalidQueryError", "RuntimeError", "AlreadyExistsError", "RateLimitedError", "PaymentRequiredError", "QuotaExceededError", "LimitExceededError", "errorTypes", "errorFrom", "err", "getApiErrorFromObject", "ErrorClass", "ApiClient", "configuration", "basePath", "axiosInstance", "DefaultApi", "createConversationBody", "res", "getError", "props", "getOrCreateConversationBody", "id", "updateConversationBody", "e", "addParticipantBody", "createEventBody", "createMessageBody", "getOrCreateMessageBody", "updateMessageBody", "createUserBody", "getOrCreateUserBody", "updateUserBody", "type", "name", "setStateBody", "patchStateBody", "callActionBody", "configureIntegrationBody", "createPersonalAccessTokenBody", "createBotBody", "updateBotBody", "transferBotBody", "setWorkspacePaymentMethodBody", "chargeWorkspaceUnpaidInvoicesBody", "createWorkspaceBody", "updateWorkspaceBody", "changeWorkspacePlanBody", "createWorkspaceMemberBody", "updateWorkspaceMemberBody", "createIntegrationBody", "updateIntegrationBody", "changeAISpendQuotaBody", "introspectBody", "createFileBody", "err", "axios", "errorFrom", "axios", "_100mb", "maxBodyLength", "maxContentLength", "Client", "ApiClient", "clientProps", "clientConfig", "getClientConfig", "apiUrl", "headers", "withCredentials", "timeout", "axiosClient"]
}
